"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[877],{91441:function(e,t,n){n.d(t,{Dv:function(){return r},tU:function(){return o},qX:function(){return i}});var r={sizePx:11,noTailPx:10,font:"".concat(11,"px sans-serif"),padX:4,padY:2};function o(e){return"/geomorph/".concat(e,".json")}function i(e){return"/geomorph/".concat(e,".png")}},96005:function(e,t,n){n.d(t,{B:function(){return x}});var r=n(68216),o=n(25997),i=function(){function e(){(0,r.Z)(this,e)}return(0,o.Z)(e,null,[{key:"roundNumber",value:function(e,t){var n=Math.pow(10,t);return Math.round(e*n)/n}},{key:"sample",value:function(e){return e[Math.floor(Math.random()*e.length)]}},{key:"distanceToSquared",value:function(e,t){var n=e.x-t.x,r=e.y-t.y;return n*n+r*r}},{key:"isPointInPoly",value:function(e,t){for(var n=!1,r=-1,o=e.length,i=o-1;++r<o;i=r)(e[r].y<=t.y&&t.y<e[i].y||e[i].y<=t.y&&t.y<e[r].y)&&t.x<(e[i].x-e[r].x)*(t.y-e[r].y)/(e[i].y-e[r].y)+e[r].x&&(n=!n);return n}},{key:"isVectorInPolygon",value:function(e,t,n){var r=1e5,o=-1e5,i=[];return t.vertexIds.forEach((function(e){r=Math.min(n[e].y,r),o=Math.max(n[e].y,o),i.push(n[e])})),!!(e.y<o+.5&&e.y>r-.5&&this.isPointInPoly(i,e))}},{key:"triarea2",value:function(e,t,n){var r=t.x-e.x,o=t.y-e.y;return-((n.x-e.x)*o-r*(n.y-e.y))}},{key:"vequal",value:function(e,t){return this.distanceToSquared(e,t)<1e-5}}]),e}(),s=function(){function e(t){(0,r.Z)(this,e),this.content=[],this.scoreFunction=t}return(0,o.Z)(e,[{key:"push",value:function(e){this.content.push(e),this.sinkDown(this.content.length-1)}},{key:"pop",value:function(){var e=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.bubbleUp(0)),e}},{key:"remove",value:function(e){var t=this.content.indexOf(e),n=this.content.pop();t!==this.content.length-1&&(this.content[t]=n,this.scoreFunction(n)<this.scoreFunction(e)?this.sinkDown(t):this.bubbleUp(t))}},{key:"size",value:function(){return this.content.length}},{key:"rescoreElement",value:function(e){this.sinkDown(this.content.indexOf(e))}},{key:"sinkDown",value:function(e){for(var t=this.content[e];e>0;){var n=(e+1>>1)-1,r=this.content[n];if(!(this.scoreFunction(t)<this.scoreFunction(r)))break;this.content[n]=t,this.content[e]=r,e=n}}},{key:"bubbleUp",value:function(e){for(var t=this.content.length,n=this.content[e],r=this.scoreFunction(n);;){var o=e+1<<1,i=o-1,s=null,u=-1/0;if(i<t){var a=this.content[i];(u=this.scoreFunction(a))<r&&(s=i)}if(o<t){var c=this.content[o];this.scoreFunction(c)<(null===s?r:u)&&(s=o)}if(null===s)break;this.content[e]=this.content[s],this.content[s]=n,e=s}}}]),e}(),u=function(){function e(){(0,r.Z)(this,e)}return(0,o.Z)(e,null,[{key:"init",value:function(e){for(var t=0;t<e.length;t++){var n=e[t];n.f=0,n.g=0,n.h=0,n.cost=1,n.visited=!1,n.closed=!1,n.parent=null}}},{key:"cleanUp",value:function(e){for(var t=0;t<e.length;t++){var n=e[t];delete n.f,delete n.g,delete n.h,delete n.cost,delete n.visited,delete n.closed,delete n.parent}}},{key:"heap",value:function(){return new s((function(e){return e.f}))}},{key:"search",value:function(e,t,n){this.init(e);var r=this.heap();for(r.push(t);r.size()>0;){var o=r.pop();if(o===n){for(var i=o,s=[];i.parent;)s.push(i),i=i.parent;return this.cleanUp(s),s.reverse()}o.closed=!0;for(var u=this.neighbours(e,o),a=0,c=u.length;a<c;a++){var l=u[a];if(!l.closed){var h=o.g+l.cost,d=l.visited;if(!d||h<l.g){if(l.visited=!0,l.parent=o,!l.centroid||!n.centroid)throw new Error("Unexpected state");l.h=l.h||this.heuristic(l.centroid,n.centroid),l.g=h,l.f=l.g+l.h,d?r.rescoreElement(l):r.push(l)}}}}return[]}},{key:"heuristic",value:function(e,t){return i.distanceToSquared(e,t)}},{key:"neighbours",value:function(e,t){for(var n=[],r=0;r<t.neighbours.length;r++)n.push(e[t.neighbours[r]]);return n}}]),e}(),a=n(79056),c=n(48103),l=function(){function e(){(0,r.Z)(this,e)}return(0,o.Z)(e,null,[{key:"buildZone",value:function(e){var t=this,n=this._buildNavigationMesh(e);n.vertices.forEach((function(e){e.x=i.roundNumber(e.x,2),e.y=i.roundNumber(e.y,2)}));var r={};r.vertices=n.vertices;var o=this._buildPolygonGroups(n);return r.groups=new Array(o.length),o.forEach((function(e,n){var o=new Map;e.forEach((function(e,t){return o.set(e,t)}));var s=new Array(e.length);e.forEach((function(e,n){var u=[];e.neighbours.forEach((function(e){return u.push(o.get(e))}));var a=[];e.neighbours.forEach((function(n){return a.push(t._getSharedVerticesInOrder(e,n))}));var l=new c.dl(0,0);l.add(r.vertices[e.vertexIds[0]]),l.add(r.vertices[e.vertexIds[1]]),l.add(r.vertices[e.vertexIds[2]]),l.scale(1/3),l.x=i.roundNumber(l.x,2),l.y=i.roundNumber(l.y,2),s[n]={id:n,centroid:l,neighbours:u,portals:a,vertexIds:e.vertexIds}})),r.groups[n]=s})),r}},{key:"_buildNavigationMesh",value:function(e){return this._buildPolygonsFromTriang(e)}},{key:"_spreadGroupId",value:function(e){for(var t=new Set([e]);t.size>0;){var n=t;t=new Set,n.forEach((function(n){n.group=e.group,n.neighbours.forEach((function(e){void 0===e.group&&t.add(e)}))}))}}},{key:"_buildPolygonGroups",value:function(e){var t=this,n=e.polygons,r=[];return n.forEach((function(e){void 0!==e.group?r[e.group].push(e):(e.group=r.length,t._spreadGroupId(e),r.push([e]))})),r}},{key:"_buildPolygonNeighbours",value:function(e,t){var n=new Set,r=t[e.vertexIds[0]],o=t[e.vertexIds[1]],i=t[e.vertexIds[2]];return r.forEach((function(t){t!==e&&(o.includes(t)||i.includes(t))&&n.add(t)})),o.forEach((function(t){t!==e&&i.includes(t)&&n.add(t)})),n}},{key:"_buildPolygonsFromTriang",value:function(e){for(var t=this,n=[],r=[],o={},i=0;i<e.vs.length;i++)r.push(e.vs[i]),o[i]=[];for(var s=0;s<e.tris.length;s++){var u=(0,a.Z)(e.tris[s],3),c=u[0],l=u[1],h=u[2],d={vertexIds:[c,l,h]};n.push(d),o[c].push(d),o[l].push(d),o[h].push(d)}return n.forEach((function(e){e.neighbours=t._buildPolygonNeighbours(e,o)})),{polygons:n,vertices:r}}},{key:"_getSharedVerticesInOrder",value:function(e,t){var n=e.vertexIds,r=n[0],o=n[1],i=n[2],s=t.vertexIds,u=s.includes(r),a=s.includes(o),c=s.includes(i);return u&&a&&c?Array.from(n):u&&a?[r,o]:a&&c?[o,i]:u&&c?[i,r]:(console.warn("Error processing navigation mesh neighbors; neighbors with <2 shared vertices found."),[])}}]),e}(),h=function(){function e(){(0,r.Z)(this,e),this.portals=[]}return(0,o.Z)(e,[{key:"push",value:function(e,t){void 0===t&&(t=e),this.portals.push({left:e,right:t})}},{key:"stringPull",value:function(){var e,t,n,r=this.portals,o=[],s=0,u=0,a=0;e=r[0].left,t=r[0].left,n=r[0].right,o.push(e);for(var c=1;c<r.length;c++){var l=r[c].left,h=r[c].right;if(i.triarea2(e,n,h)<=0){if(!(i.vequal(e,n)||i.triarea2(e,t,h)>0)){o.push(t),t=e=t,n=e,u=s=u,a=s,c=s;continue}n=h,a=c}if(i.triarea2(e,t,l)>=0){if(!(i.vequal(e,t)||i.triarea2(e,n,l)<0)){o.push(n),t=e=n,n=e,u=s=a,a=s,c=s;continue}t=l,u=c}}return 0!==o.length&&i.vequal(o[o.length-1],r[r.length-1].left)||o.push(r[r.length-1].left),this.path=o,o}}]),e}(),d=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new c.dl,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new c.dl,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new c.dl;(0,r.Z)(this,e),this.a=t,this.b=n,this.c=o}return(0,o.Z)(e,[{key:"closestPointToPoint",value:function(e,t){var n,r,o=this.a,i=this.b,s=this.c;f.subVectors(i,o),v.subVectors(s,o),p.subVectors(e,o);var u=f.dot(p),a=v.dot(p);if(u<=0&&a<=0)return t.copy(o);y.subVectors(e,i);var c=f.dot(y),l=v.dot(y);if(c>=0&&l<=c)return t.copy(i);var h=u*l-c*a;if(h<=0&&u>=0&&c<=0)return n=u/(u-c),t.copy(o).addScaledVector(f,n);g.subVectors(e,s);var d=f.dot(g),k=v.dot(g);if(k>=0&&d<=k)return t.copy(s);var w=d*a-u*k;if(w<=0&&a>=0&&k<=0)return r=a/(a-k),t.copy(o).addScaledVector(v,r);var x=c*k-d*l;if(x<=0&&l-c>=0&&d-k>=0)return b.subVectors(s,i),r=(l-c)/(l-c+(d-k)),t.copy(i).addScaledVector(b,r);var m=1/(x+w+h);return n=w*m,r=h*m,t.copy(o).addScaledVector(f,n).addScaledVector(v,r)}},{key:"set",value:function(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}}]),e}(),f=new c.dl,v=new c.dl,p=new c.dl,y=new c.dl,g=new c.dl,b=new c.dl;function k(e,t){var n="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"===typeof e)return w(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return w(e,t)}(e))||t&&e&&"number"===typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,u=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){u=!0,i=e},f:function(){try{s||null==n.return||n.return()}finally{if(u)throw i}}}}function w(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var x=function(){function e(){(0,r.Z)(this,e),this.zones={},this.MAX_DIST_TO_SOME_CENTROID=500;var t={point:new c.dl(0,0),triangle:new d,endPoint:new c.dl(0,0),closestNode:null,closestPoint:new c.dl(0,0),closestDistance:1/0};this.temp=t}return(0,o.Z)(e,[{key:"setZoneData",value:function(e,t){this.zones[e]=t}},{key:"getRandomNode",value:function(e,t,n,r){if(!this.zones[e])return new c.dl(0,0);n=n||null,r=r||0;var o=[];return this.zones[e].groups[t].forEach((function(e){n&&r?i.distanceToSquared(n,e.centroid)<r*r&&o.push(e.centroid):o.push(e.centroid)})),i.sample(o)||new c.dl(0,0)}},{key:"getClosestNode",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=this.zones[t].groups[n],s=this.zones[t].vertices,u=null,a=1/0;return o.forEach((function(t){var n=i.distanceToSquared(t.centroid,e);n<a&&(!r||i.isVectorInPolygon(e,t,s))&&(u=t,a=n)})),u}},{key:"findPath",value:function(e,t,n,r){var o=this.zones[n].groups[r],i=this.zones[n].vertices,s=this.getClosestNode(e,n,r,!0),a=this.getClosestNode(t,n,r,!0);if(!s||!a)return null;var l=u.search(o,s,a),d=function(e,t){for(var n=0;n<e.neighbours.length;n++)if(e.neighbours[n]===t.id)return e.portals[n]},f=new h;f.push(e);for(var v=0;v<l.length;v++){var p=l[v],y=l[v+1];if(y){var g=d(p,y);f.push(i[g[0]],i[g[1]])}}f.push(t),f.stringPull();var b=f.path.map((function(e){return new c.dl(e.x,e.y)}));return b.shift(),b}},{key:"getGroup",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!this.zones[e])return null;for(var r=null,o=Math.pow(this.MAX_DIST_TO_SOME_CENTROID,2),s=this.zones[e],u=0;u<s.groups.length;u++){var a,c=s.groups[u],l=k(c);try{for(l.s();!(a=l.n()).done;){var h=a.value;if(n){var d=[s.vertices[h.vertexIds[0]],s.vertices[h.vertexIds[1]],s.vertices[h.vertexIds[2]]];if(i.isPointInPoly(d,t))return u}var f=i.distanceToSquared(h.centroid,t);f<o&&(r=u,o=f)}}catch(v){l.e(v)}finally{l.f()}}return r}},{key:"clampStep",value:function(e,t,n,r,o,i){var s=this.zones[r].vertices,u=this.zones[r].groups[o],a=[n],c={};c[n.id]=0;var l=this.temp;l.closestNode=null,l.closestPoint.set(0,0),l.closestDistance=1/0,l.endPoint.copy(t);for(var h=a.pop();h;h=a.pop()){l.triangle.set(s[h.vertexIds[0]],s[h.vertexIds[1]],s[h.vertexIds[2]]),l.triangle.closestPointToPoint(l.endPoint,l.point),l.point.distanceToSquared(l.endPoint)<l.closestDistance&&(l.closestNode=h,l.closestPoint.copy(l.point),l.closestDistance=l.point.distanceToSquared(l.endPoint));var d=c[h.id];if(!(d>2))for(var f=0;f<h.neighbours.length;f++){var v=u[h.neighbours[f]];v.id in c||(a.push(v),c[v.id]=d+1)}}return i.copy(l.closestPoint),l.closestNode}}],[{key:"createZone",value:function(e){return l.buildZone(e)}}]),e}()}}]);