(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4390],{17398:function(e,n,a){"use strict";a.d(n,{Z:function(){return g}});var t,s=a(86576),i=a(17928),o=a(43057),r=a(68292),l=a(52209),c=a(88269),h=a(58199),p=a(8311);function d(e){var n,a="next-article--".concat(null===(n=e.article)||void 0===n?void 0:n.key);return e.article?(0,p.tZ)("div",{className:m,children:(0,p.tZ)(h.Z,{href:(0,i.Gu)(e.article),title:"Continue to next article",id:a,prePush:"#".concat(a),children:"Next"})}):null}var m=(0,c.iv)(t||(t=(0,l.Z)(["\n  height: 64px;\n  font-size: 1.1rem;\n  margin-top: -64px;\n  @media(max-width: 800px) {\n    margin-top: 0;\n    font-size: 1rem;\n  }\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    color: #555;\n    border: 1px solid #666;\n    background: #fff;\n    padding: 8px 16px;\n    border-radius: 4px;\n  }\n"])));function g(e){var n=e.part,a=e.markdown,t=i.Pd[n].map((function(e){return e.key})),l=t.length?i.mh[(0,s.Z$)(t)]:null,c=null!==l&&void 0!==l&&l.next?i.mh[l.next]:null;return(0,p.BX)(o.Z,{children:[(0,p.tZ)(r.Z,{keys:t,markdown:a}),(0,p.tZ)(d,{article:c})]})}},64289:function(e,n,a){"use strict";a.r(n),a.d(n,{default:function(){return l}});var t=a(17398),s=a(38701),i=a(38523),o=a(28834),r=a(8311);function l(){return(0,r.tZ)(t.Z,{part:1,markdown:{objective:s.Z,constraints:i.Z,finishing:o.Z}})}},44690:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/part/1",function(){return a(64289)}])},38523:function(e,n){"use strict";n.Z='## Constraints\n\nThis project needs a backbone.\nWe\'ve chosen the underlying technology, low-level game mechanics, and where events take place.\n\n### Technology\n\nLet us list our chosen tools.\n\n- Use standard web dev techniques (e.g. not [WebGL](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API)).\n- Use [NextJS](https://nextjs.org/) as our development environment.\n- Use [CodeSandbox](https://codesandbox.io) to share editable code.\n- Use [Boxy SVG](https://boxy-svg.com/) to edit assets.\n- Use [React function components](https://reactjs.org/docs/components-and-props.html#function-and-class-components) and CSS-in-JS.\n  > In particular, [Preact](https://www.npmjs.com/package/preact) (a [React](https://reactjs.org/) alternative) and [Goober](https://www.npmjs.com/package/goober).\n\nWe\'ll also support both mobile and desktop devices.\n\n\x3c!-- NOTE italics inside link currently unsupported --\x3e\n\n_Starship Markup_ refers to _Markup_, as in HyperText _Markup_ Language (HTML).\nWe\'ll use standard web development technologies e.g. CSS, SVGs, PNGs and the Web Animations API.\n\n<aside>\n\nAlthough WebGL permits far richer 3D graphics than CSS,\nit leads away from the declarative nature of Markup.\nSticking to core web technologies makes our approach relevant to a far larger audience.\nWe also want to avoid obsessing over graphics, seeking superior Game AI instead.\n\n</aside>\n\nIf you\'re unfamiliar with CodeSandbox (or similar sites), check out  [this example](https://codesandbox.io/s/rogue-markup-panzoom-yq060?file=/src/panzoom/PanZoom.jsx  "@new-tab").\nIf you peruse the files, you\'ll find e.g. the rectangle class _Rect_ and a Geomorph PNG.\nOur CodeSandboxes use React, whereas this site uses _Preact_.\nMore on that later.\n\n### Game mechanics\n\nNext, gameplay related constraints.\n\n- Use [Starship Geomorphs 2.0](http://travellerrpgblog.blogspot.com/2018/10/the-starship-geomorphs-book-if-finally.html) for graphics.\n  > We saw [an example](/pics/g-301--bridge.debug.x2.png "@new-tab") previously; \n  > here\'s [another](/pics/g-302--xboat-repair-bay.debug.png  "@new-tab").\n- Use a realtime birdseye camera.\n  > Basically a pannable and zoomable SVG.\n- Use the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API).\n  > This API provides access to the technology underlying CSS animations.\n- Use navigation & raycasting algorithms.\n  > Involves a [navmesh](https://en.wikipedia.org/wiki/Navigation_mesh#:~:text=A%20navigation%20mesh%2C%20or%20navmesh,video%20game%20AI%20in%202000.) and computing ray/geometry collisions.\n- Do not use a Physics engine.\n- Use an in-browser terminal.\n\nWe\'ll develop complex Game AI with the aid of a terminal.\nTry entering or copy-pasting the commands below. Mobile users may find copy-pasting easier.\n\n  | Category | Examples  |\n  | ------- | ---------- |\n  | Nav | <span class="cmd">ls</span>, <span class="cmd">pwd</span>, <span class="cmd">cd /home/test</span>, <span class="cmd">cd ..</span> |\n  | [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete "@new-tab") | <span class="cmd">echo foo >/home/bar</span>, <span class="cmd">/home/bar</span>, <span class="cmd">cd; rm bar</span> |\n  | Out | <span class="cmd">seq 10</span>, <span class="cmd">echo foo{1..5}</span>, <span class="cmd">expr \'2**10\'</span> |\n  | Meta | <span class="cmd">history</span>, <span class="cmd"> declare</span>, <span class="cmd">help</span>, <span class="cmd"> ps</span> |\n\n  <div\n    class="tabs"\n    name="terminal-demo"\n    height="300"\n    tabs="[\n      { key: \'terminal\', filepath: \'test\' },\n      { key: \'terminal\', filepath: \'other\' },\n    ]"\n  ></div>\n\nAs usual, [Ctrl+C](#command "sigkill test") terminates the "foreground process" e.g. try terminating <span class="cmd">sleep 5; echo rise and shine</span>.\nPipelines and background processes are also supported.\nWe\'ll use terminals to monitor the current state of our Game AI, issue direct commands, and develop long-running behaviour.\n\n### Setting\n\nThen it only remains to constrain the setting.\n\n- Events take place in the [Traveller Universe](https://travellermap.com/?p=-1.329!-23.768!3), onboard star ships, space ships and space stations.\n- [Bardo Thodol](https://en.wikipedia.org/wiki/Bardo_Thodol) provides a source of inspiration,\n  >  e.g. Ship AIs may recite it to dying [Low Berth](https://wiki.travellerrpg.com/Low_Berth_Rack "@new-tab") travellers.\n- [The Night Land](https://en.wikipedia.org/wiki/The_Night_Land) provides a source of inspiration,\n  > e.g. Earth is generally assumed to be lost after a Karmic Loop was created, letting in the Watchers and other manifestations from Buddhist hells.\n\nTraveller is a Futuristic pen-and-paper Role-playing Game, created in the late 70s.\nIt permits faster than light travel bounded by 6 parsecs per week (but usually more like 2 parsecs per week).\nLearn more on the [wiki](https://wiki.travellerrpg.com/Jump_Drive), the [official site](https://www.farfuture.net/) or explore [Traveller Map](https://travellermap.com/).\nIt directly motivated Robert Pearce\'s Starship Geomorphs, and provides considerable depth.\n\n<aside>\n\n_The Traveller game in all forms is owned by [Far Future Enterprises](https://www.farfuture.net/). Copyright \xa9 1977 \u2013 2021 Far Future Enterprises._\n\n</aside>\n\nWe\'ll leverage two additional sources of inspiration i.e. _Liberation Through Hearing in the Intermediate State_ (Bardo Thodol) and a famous Science Fiction story from 1912 (The Night Land).'},28834:function(e,n){"use strict";n.Z="## Finishing\n\nOver time we'll clarify the above constraints, but first we emphasise:\n> _creating a video game is really fucking hard_.\n\nSpelunky's creator suggested [three important requirements](https://makegames.tumblr.com/post/1136623767/finishing-a-game) for finishing a game.\nWe'll address them.\n\n### 1. Fun to develop\n\n_Games I want to make_. My underlying motivation is the lack of Game AI resources available on the web.\nIt is hard to discuss the subject without actually building a game, so I chose a setting and game mechanics which felt fun for me.\nI am particularly interested in navigation i.e. combining the movement of many characters in a flexible manner.\n\n### 2. The Result\n\n_Games I want to have made_. As an end result I want a highly replayable tactical/action game sandbox.\nProcedurally generated missions will involve going from A to B and doing C (ever was it so).\nMonotony will be overcome via encountered NPC behaviours and e.g. ship building.\nFunctionally, think [Teleglitch](https://www.youtube.com/results?search_query=Teleglitch) with richer NPCs and the ability to _place_ [room modules](https://steamcommunity.com/sharedfiles/filedetails/?id=175359117) when upgrading/docking.\nGraphically, see Starship Geomorphs 2.0.\n\n_Starship Markup_ will be easily extendable.\nWe'll provide compositional code, escape hatches to CodeSandbox, clear explanations, and [GitHub](https://github.com/) comments.\n\n### 3. Experience\n\n_Games I\u2019m good at making_. I work as a web developer, using React and CSS-in-JS on a daily basis. \nI have a [strong background](https://dblp.org/pid/81/8748.html) in Theoretical Computer Science,\nso won't confuse Game AI with AI, nor fall prey to the Deep Learning hype.\nI have also created similar game mechanics _many_ times over the years.\nHere's hoping my chain of unfinished projects is coming to a close!"},38701:function(e,n){"use strict";n.Z='## Objective\n\nWe are going to create a **video game**.\nThat\'s right, yet another game. \nWhat\'s **unusual** is that we\'re going to\n(a) describe the process in great detail,\n(b) use standard web development techniques.\n\nWhere will it take place?\n> The [Traveller universe](https://travellermap.com/?p=-1.329!-23.768!3).\n\nWhat kind of game is it?\n> A topdown Starship Simulator with a Game AI focus.\n\nWhy Game AI?\n\n> Because [NPC](https://tvtropes.org/pmwiki/pmwiki.php/Main/NonPlayerCharacter) behaviour is more interesting than any particular game.\n\x3c!-- > An environment is needed to make behaviour meaningful, fixed narratives/missions are not. --\x3e\n\nWe\'ll use [navigation meshes](https://en.wikipedia.org/wiki/Navigation_mesh) to simulate starship inhabitants,\nfollowing the rules of [Traveller](https://en.wikipedia.org/wiki/Traveller_%28role-playing_game%29).\nTo makes things less abstract, here\'s a Traveller-based asset called a _geomorph_.\n\n\n<div\n  class="tabs"\n  name="geomorph-301-debug"\n  height="340"\n  tabs="[{ key: \'component\', filepath: \'example/Gm301Debug\' }]"\n></div>\n\nWe\'ve recreated **Geomorph 301** (a.k.a. _Bridge_) from Robert Pearce\'s [Starship Geomorphs 2.0](http://travellerrpgblog.blogspot.com/2018/10/the-starship-geomorphs-book-if-finally.html),\nusing 8 of his [Starship Symbols](http://travellerrpgblog.blogspot.com/2020/08/starship-symbols-book.html).\nObstacles you can see over are shaded grey e.g. chairs and beds.\nWalls and obstacles which cannot be seen over are darker grey and black. The underlying polygons of these obstacles, together with the white rectangular doors, induce the _white triangulated navigable polygon_ shown above.\n\n> Check out this [larger version](/pics/g-301--bridge.debug.x2.png "@new-tab").\n\n<aside>\n\nA _Starship Geomorph_ is a rectangular partial floorplan of a starship, designed to be cut out and possibly glued to others.\nThey were created by Robert Pearce, and distributed as a PDF on his [blog](http://travellerrpgblog.blogspot.com/).\nA 2nd version was released in 2020, along with another PDF containing many individual symbols e.g. offices, fuel tanks and bedrooms. Soon afterwards Eric B. Smith transformed them into [transparent PNGs](http://gurpsland.no-ip.org/geomorphs/).\nThe latter 2000+ symbols will form the underlying basis of _Starship Markup_.\n\n</aside>\n\n__TODO__ remove Visibility and Css3d demo, replacing with NPC demo combined with terminal in some way.\n\n\x3c!-- We end with two basic demos.\nYou can pan/zoom, move the eyes, and view the obstacle polygons in 3D.\nThere are respective CodeSandboxes i.e. [visibility](https://codesandbox.io/s/rogue-markup-visibility-demo-k66zi?file=/src/example/Visibility.jsx "@new-tab") and [height](https://codesandbox.io/s/rogue-markup-3d-demo-forked-gyher?file=/src/example/Css3d.jsx "@new-tab"). --\x3e\n\n\n<div\n  class="tabs"\n  name="light-demo"\n  height="340"\n  tabs="[\n    // { key: \'component\', filepath: \'example/Visibility#301\' },\n    { key: \'component\', filepath: \'example/Css3d#301\' },\n  ]"\n></div>\n'}},function(e){e.O(0,[9774,9351,7045,6758,3033,3359,2888,179],(function(){return n=44690,e(e.s=n);var n}));var n=e.O();_N_E=n}]);