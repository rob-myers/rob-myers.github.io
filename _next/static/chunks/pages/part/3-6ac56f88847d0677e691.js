(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[442],{32191:function(n,e,t){"use strict";t.d(e,{Z:function(){return s}});var i=t(17928),a=t(82308),o=t(24009),r=t(8311);function s(n){var e=n.part,t=n.markdown,s=i.Pd[e].map((function(n){return n.key}));return(0,r.tZ)(a.Z,{children:(0,r.tZ)(o.Z,{keys:s,markdown:t})})}},88649:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return c}});var i=t(32191),a=t(33023),o=t(86262),r=t(8311),s={"tech-2":a.Z,"tech-3":o.Z};function c(){return(0,r.tZ)(i.Z,{part:3,markdown:s})}},20973:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/part/3",function(){return t(88649)}])},33023:function(n,e){"use strict";e.Z='## Technology (ai)\n\nSo far we\'ve described our objective, constrained our approach, and listed the technologies we\'ll use.\nHaving discussed [JavaScript components](2#tech-1--react-and-preact),\nwe turn to Game AI.\n\n### Overview\n\n_Rogue Markup_ will present a birdseye viewpoint of the interior of starships.\nThe [crew](https://wiki.travellerrpg.com/Crew "@new-tab") will have tasks e.g. manning the bridge, patrolling the decks, monitoring [low berths](https://wiki.travellerrpg.com/Low_Passage "@new-tab").\nThese behaviours will be constrained by e.g. sleep patterns, the behaviour of others, and hardware failures.\nSo how do video games implement these behaviours?\n\nThere are three standard systems:\n\n> **Navigation**: _planning e.g. route from A to B._\n>\n> **Animation**: _realism (e.g. limb movement) and visual cues._\n>\n> **Physics**: collision detection, force-driven rigid bodies, raycasting.\n\nNavigation is of central importance and will be discussed shortly.\nConcerning animation, we\'re definitely not going to obsess over realism.\nNevertheless we\'ll need visual cues to indicate NPC actions,\nand a _sense of flow_ via interdependent concurrent animations.\nAs for a physics engine, we [already mentioned](1#constraints--game-mechanics) we won\'t be using one. Instead:\n- Collision detection will be handled at a higher level (navigation).\n- The Web Animations API will replace force-driven movement.\n- We\'ll write our own raycaster e.g. for line-of-sight detection.\n\nIt is worth discussing Navigation and Raycasting in more detail.\n\n### Navigation\n\n\n\x3c!-- __TODO__\n- Rodney Brooks layers.\n- Navigation based Game AI.\n- Corner-wrapped Pathfinding only provides part of the \n- Geomorph 101\n--\x3e\n\n\x3c!-- Pathfinding is central to Game AI.\nOur NPCs need to move realistically e.g. they cannot move through walls, windows or locked doors. --\x3e\n\n<div\n  class="tabs"\n  id="tabs-nav-demo"\n  height="400"\n  enabled="false"\n  tabs="[\n     { key: \'component\', filepath: \'nav/NavDemo\' },\n   ]"\n></div>\n\n### Raycasting\n\n...'},86262:function(n,e){"use strict";e.Z="## Technology (dev)\n\n### Static Analysis\n\n- Typescript via JSDoc, referring to CodeSandbox.\n\n### Runtime Analysis\n\n- Terminal + Game AI\n\n### Comments\n\n- Display GitHub comments from Issue (build-time)\n- Can use anonymous credits to get recent"}},function(n){n.O(0,[774,188,651,13,888,179],(function(){return e=20973,n(n.s=e);var e}));var e=n.O();_N_E=e}]);