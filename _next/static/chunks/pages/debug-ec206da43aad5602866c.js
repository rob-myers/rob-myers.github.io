(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[94],{41208:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return m}});var a=t(30829),o=t(21850),s=t(38701),i=t(38523),r=t(68659),c=t(71674),l=t(86464),d=t(6968),h=t(8311);function m(){return(0,h.BX)(a.Z,{children:[(0,h.tZ)(o.Z,{dateTime:"2021-07-19",children:s.Z}),(0,h.tZ)(o.Z,{dateTime:"2021-07-19",children:i.Z}),(0,h.tZ)(o.Z,{dateTime:"2021-07-19",children:r.Z}),(0,h.tZ)(o.Z,{dateTime:"2021-07-19",children:c.Z}),(0,h.tZ)(o.Z,{dateTime:"2021-07-19",children:l.Z}),(0,h.tZ)(o.Z,{dateTime:"2021-07-19",children:d.Z})]})}},2304:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/debug",function(){return t(41208)}])},38523:function(e,n){"use strict";n.Z='## Constraints\n\nThis project needs a backbone.\nWe\'ve chosen the underlying technology, low-level game mechanics, and where events take place.\n\n### Technology\n\n- Use CSS/SVG/PNGs, not HTMLCanvas/WebGL.\n- Use [React function components](https://reactjs.org/docs/components-and-props.html#function-and-class-components) and CSS-in-JS.\n- Use [Preact](https://www.npmjs.com/package/preact) (like React), and [Goober](https://www.npmjs.com/package/goober) (like [Emotion](https://www.npmjs.com/package/@emotion/styled)).\n- Use [Web Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components) to avoid React renders.\n- Use [NextJS](https://nextjs.org/) as our dev env.\n- Use [CodeSandbox](https://codesandbox.io) to share editable code.\n- Support mobile/desktop devices.\n\nFor example, here\'s a [CodeSandbox](https://codesandbox.io/s/rogue-markup-panzoom-yq060?file=/src/panzoom/PanZoom.jsx  "@new-tab").\nIf you peruse the files, you\'ll find the rectangle class _Rect_ and a Geomorph PNG.\nOur CodeSandboxes use React, whereas this site uses _Preact_.\nMore on that later.\n\n### Game mechanics\n\n- Use [Starship Geomorphs 2.0](http://travellerrpgblog.blogspot.com/2018/10/the-starship-geomorphs-book-if-finally.html) for graphics.\n- Use a realtime birdseye camera.\n- Use the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API).\n- Use navigation & raycasting algorithms.\n- Use an in-browser terminal.\n- Do not use a Physics engine.\n\nTo debug and illustrate Game AI, we\'ll use a terminal.\nTry entering (or copy-pasting) the commands below.\n\n  | Category | Examples  |\n  | ------- | ---------- |\n  | Nav | <span class="cmd">ls</span>, <span class="cmd">pwd</span>, <span class="cmd">cd /home/test</span>, <span class="cmd">cd ..</span> |\n  | CRUD | <span class="cmd">echo foo >/home/bar</span>, <span class="cmd">/home/bar</span>, <span class="cmd">cd; rm bar</span> |\n  | Out | <span class="cmd">seq 10</span>, <span class="cmd">echo foo{1..5}</span>, <span class="cmd">expr \'2**10\'</span> |\n  | Meta | <span class="cmd">history</span>, <span class="cmd"> declare</span>, <span class="cmd">help</span>, <span class="cmd"> ps</span> |\n\n  <div\n    class="tabs"\n    height="300"\n    tabs="[ { key: \'terminal\', session: \'test\' } ]"\n  ></div>\n\nAs usual, [Ctrl+C](#command "sigkill test") terminates the "foreground process".\nTry terminating <span class="cmd">sleep 5</span>.\n\n### Setting\n\n- The [Traveller Universe](https://travellermap.com/?p=-1.329!-23.768!3).\n- Space vehicles, stations, and docks.\n- Buddhist backdrop via [Bardo Thodol](https://en.wikipedia.org/wiki/Bardo_Thodol).\n- Horror backdrop via [The Night Land](https://en.wikipedia.org/wiki/The_Night_Land).\n\n\nTraveller is a Futuristic pen-and-paper Role-playing Game, created in the late 70s.\nIt permits faster than light travel, at \u2264 6 parsecs per week.\nLearn more on the [wiki](https://wiki.travellerrpg.com/Jump_Drive), the [official site](https://www.farfuture.net/) or explore [Traveller Map](https://travellermap.com/).\nIt directly motivated Robert Pearce\'s Starship Geomorphs, and provides considerable depth.\n\n<div style="font-size:smaller; padding-bottom: 6px">\n\n_The Traveller game in all forms is owned by [Far Future Enterprises](https://www.farfuture.net/). Copyright \xa9 1977 \u2013 2021 Far Future Enterprises._\n</div>\n\n---\n\nOver time we\'ll clarify the above constraints, but first we emphasise:\n> _creating a video game is really fucking hard_.\n\nSpelunky\'s creator suggested [three important requirements](https://makegames.tumblr.com/post/1136623767/finishing-a-game).\nWe\'ll address them.\n\n### 1. Fun to develop\n\n_Games I want to make_. My underlying motivation is the lack of Game AI resources available on the web.\nIt is hard to discuss the subject without actually building a game, so I chose a setting and game mechanics which felt fun for me.\nI am particularly interested in navigation i.e. combining the movement of many characters in a flexible manner.\n\n### 2. The Result\n\n_Games I want to have made_. As an end result I want a highly replayable tactical/action game sandbox.\nProcedurally generated missions will involve going from A to B and doing C (ever was it so).\nMonotony will be overcome via encountered NPC behaviours and e.g. ship building.\nFunctionally, think [Teleglitch](https://www.youtube.com/results?search_query=Teleglitch) with richer NPCs and the ability to _place_ [room modules](https://steamcommunity.com/sharedfiles/filedetails/?id=175359117) when upgrading/docking.\nGraphically, see Starship Geomorphs 2.0.\n\nRogue Markup will be easy to extend.\nWe\'ll achieve this via compositional code, escape hatches to CodeSandbox, clear explanations, and [GitHub](https://github.com/) comments.\n\n### 3. Experience\n\n_Games I\u2019m good at making_. I work as a web developer, using React and CSS-in-JS on a daily basis. \nI have a [strong background](https://dblp.org/pid/81/8748.html) in Theoretical Computer Science,\nso won\'t confuse Game AI with AI, nor fall prey to the Deep Learning hype.\nI have also created similar game mechanics _many_ times over the years.\nHere\'s hoping my chain of unfinished projects is coming to a close!'},6968:function(e,n){"use strict";n.Z='## Geomorphs\n\n### Filesystem structure\n\nmedia\n- Starship Geomorphs 2.0.pdf (Original source)\n- Starship Symbols.pdf (Original source)\n- Geomorphs.zip (Transparent PNGs obtained from Starship Geomorphs 2.0)\n- SymbolsHighRes.zip (Transparent PNGs obtained from Starship Symbols)\n\nmedia/Geomorph\n- PNGs of lower quality (relatively).\n- Extracted from "Starship Geomorphs 2.0.pdf" by ... \n\nmedia/Symbols\n- PNGs of higher quality.\n- Extracted from "Starship Symbols.pdf" by ... \n\nmedia/scripts\n- ts-node scripts launched via npm scripts\n- Directories generated by scripts\n- media/geomorph-edge (Edge Geomorphs)\n- media/symbol-bridge\n- media/symbol-dock-small-craft\n- media/symbol-staterooms\n- media/symbol-lounge\n- media/symbol-root\n\npublic/png\n- PNGs from media/symbol-* with labels removed\n\npublic/svg\n- Enriched symbols\n- Geomorph hulls\n\n<div\n  class="tabs"\n  enabled="false"\n  height="400"\n  tabs="[\n    { key: \'component\', filepath: \'geomorph/GeomorphDemo\' },\n  ]"\n></div>\n'},38701:function(e,n){"use strict";n.Z='## Objective\n\nWe\'ll create a _Game AI focused_ roguelike, set in the [Traveller universe](https://travellermap.com/?p=-1.329!-23.768!3).\n\n_Why?_\n\nBecause [NPC](https://tvtropes.org/pmwiki/pmwiki.php/Main/NonPlayerCharacter) behaviour is more interesting than any particular game.\nAn environment is needed to make it meaningful, fixed narratives/missions are not.\n\nWe\'ll focus on combining navigation-based behaviours in a flexible manner.\nGame AI should be compositional, not forced into a narrative straight-jacket.\nAs for the environment, it will be driven by thousands of Traveller-based assets.\n\n<div\n  class="tabs"\n  height="400"\n  tabs="[{ key: \'component\', filepath: \'images/Gm301Debug\' }]"\n></div>\n\nAbove we\'ve recreated Geomorph 301 (a.k.a. _Bridge_) from [Starship Geomorphs 2.0](http://travellerrpgblog.blogspot.com/2018/10/the-starship-geomorphs-book-if-finally.html),\nusing 8 assets from [Starship Symbols](http://travellerrpgblog.blogspot.com/2020/08/starship-symbols-book.html).\nA larger version is [available](/pics/g-301--bridge.debug.x2.png "@new-tab").\nRoughly speaking, a "Starship Geomorph" is a rectangular slice of a starship designed to be cut out and glued to others.\nThey were created by Robert Pearce, and distributed as PDFs on his [blog](http://travellerrpgblog.blogspot.com/).\nTheir 2nd version was released in 2020, and soon afterwards Eric B. Smith transformed them into [transparent PNGs](http://gurpsland.no-ip.org/geomorphs/).\nThe latter 2000+ symbols will form the underlying basis of _Rogue Markup_.\n'},71674:function(e,n){"use strict";n.Z='## Technology (2)\n\nThus far we\'ve described our objective, constrained our approach, and listed the technologies we\'ll use.\nHaving outlined our chosen notion of JavaScript component,\nwe turn to Game AI related technology i.e. _navigation_ and _raycasting_.\n\n### Navigation\n\n\x3c!-- __TODO__\n- Rodney Brooks layers.\n- Navigation based Game AI.\n- Corner-wrapped Pathfinding only provides part of the \n- No physics engine\n- Geomorph 101\n--\x3e\n\n_Rogue Markup_ will present a birdseye viewpoint of the interior of starships.\nThe [crew](https://wiki.travellerrpg.com/Crew "@new-tab") will have tasks e.g. manning the bridge, patrolling the decks, monitoring [low berths](https://wiki.travellerrpg.com/Low_Passage "@new-tab").\nThese behaviours will be constrained by e.g. sleep patterns, the behaviour of others, and hardware failures.\nBut how do video games simulate these behaviours?\n\nThree systems are often used: navigation, animation and physics.\nNavigation does high-level planning e.g. find a route from A to B.\nAnimation provides realism (such as limb movement) and also information indicating NPC actions.\nPhysics provides collision detection and permits moving characters around via forces.\n\nNow, we chose not to use a physics engine.\n\n[Constraints]()\n\n\x3c!-- TODO can link to other blogs --\x3e\n\n\x3c!-- Pathfinding is central to Game AI.\nOur NPCs need to move realistically e.g. they cannot move through walls, windows or locked doors. --\x3e\n\n<div\n  class="tabs"\n  height="400"\n  enabled="true"\n  tabs="[\n     { key: \'component\', filepath: \'nav/NavDemo\' },\n   ]"\n></div>\n\n### Raycasting\n\n...'},86464:function(e,n){"use strict";n.Z="## Technology (3)\n\n### Static Analysis\n\n- Typescript via JSDoc, referring to CodeSandbox.\n\n### Runtime Analysis\n\n- Terminal + Game AI\n\n### Comments\n\n- Display GitHub comments from Issue (build-time)\n- Can use anonymous credits to get recent"},68659:function(e,n){"use strict";n.Z='## Technology\n\nSo, we\'re building a roguelike, directly on this website.\nIt will start to get fun once things are moving about.\nLet us describe the underlying technologies.\n\n| Concept | Technology |\n| ------- | ---------- |\n| Component | [React function components](https://reactjs.org/docs/components-and-props.html#function-and-class-components), and [Web Components](https://reactjs.org/docs/web-components.html). |\n| Styles | CSS-in-JS via [Goober](https://www.npmjs.com/package/goober). |\n| Component framework | [Preact](https://preactjs.com/), a DOM-diffing alternative to React. |\n| Pathfinding | Based on [three-pathfinding](https://www.npmjs.com/package/three-pathfinding).  |\n| Raycasting | Basic geometry and spacial partitions.  |\n| Static analysis | TypeScript via [JSDoc](https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html); also [ESLint](https://www.npmjs.com/package/eslint). |\n| Live analysis | In-browser terminal, via [xterm.js](https://www.npmjs.com/package/xterm) and [mvdan-sh](https://www.npmjs.com/package/mvdan-sh). |\n| Scripting | [TS Node](https://www.npmjs.com/package/ts-node) i.e. Node.js with types. |\n| Code viewing | [CodeMirror](https://codemirror.net/) to view JS. |\n| Code editing | External [CodeSandbox](https://codesandbox.io/) links, using React. |\n| Code sharing | Show [GitHub](https://github.com/) comments, provide GitHub [repo](https://github.com/rob-myers/rob-myers.github.io). |\n\n\x3c!-- Our in-browser terminal is built using [Xterm.js](https://xtermjs.org/) and the shell parser [mvdan-sh](https://github.com/mvdan/sh/tree/master/_js). --\x3e\n\nThe early 90s brought three pillars: HTML, CSS and JavaScript.\nWhenever we visit a website we receive an HTML response, referencing or embedding CSS and JS.\nOur web browser renders the HTML and CSS immediately, and runs the JS to provide interactivity (beyond links, hovers and CSS animations).\nMore precisely, all subsequent DOM mutations are performed by JavaScript.\nIt is now common to generate the initial HTML using JS too,\neither during a build-step or on a Node.js server.\nIn particular, JavaScript has become the central web technology.\n\n> \u2139\ufe0f _We\'ll spend the next two sections describing how we use JS._\n> _The discussion is full of jargon, but the details can be picked up later on._\n\n### React and Preact\n\nCompeting JavaScript frameworks exist, often with their own notion of component.\nOne popular approach uses _React function components_, which are just JavaScript functions with constraints on their parameters and return value.\n\n- They have a single parameter, conventionally called _props_.\n\n  It is a JavaScript object defining the component\'s named inputs,\n  and possibly special properties like _children_, _key_ and _ref_.\n\n- They must return either null or a virtual [DOM node](https://developer.mozilla.org/en-US/docs/Web/API/Node).\n\n  This returned value ultimately amounts to an HTML fragment to be rendered,\n  and may depend on the component\'s props and internal state (via [hooks](https://reactjs.org/docs/hooks-intro.html)).\n\nReact developers use a grammatical extension of JavaScript called JSX.\nIt permits composing components using an XML-like syntax, to obtain the desired dynamic DOM tree.\nLet\'s consider an example, a pannable and zoomable grid (also [on CodeSandbox](https://codesandbox.io/s/rogue-markup-panzoom-yq060?file=/src/panzoom/PanZoom.jsx "@new-tab")).\n\n<div\n  class="tabs"\n  height="400"\n  store-key="panzoom"\n  tabs="[\n    { key: \'component\', filepath: \'panzoom/PanZoomDemo\' },\n    { key: \'code\', filepath: \'panzoom/PanZoom.jsx\', folds: [{ line: 8, ch: 0 }] },\n    { key: \'code\', filepath: \'panzoom/PanZoomDemo.jsx\' },\n  ]"\n></div>\n\nThe file _panzoom/PanZoom.jsx_ (see [tab above](#command "open-tab panzoom code--panzoom/PanZoom.jsx")) defines two React function components, _PanZoom_ and _Grid_.\nBehaviourally:\n\n- _PanZoom_ renders an SVG consisting of its children (the Geomorph image provided in _PanZoomDemo_) and _Grid_. It adjusts the [SVG viewBox](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox) in response to mouse/pointer events.\n\n- _Grid_ renders part of an SVG i.e. two grid patterns.\n  They repeat squares of size 10x10 and 60x60 in abstract [SVG user units](https://www.w3.org/TR/SVG2/coords.html#TermUserUnits "@new-tab").\n\n  <aside>\n  \n  SVG user units become concrete via the `<svg>`\'s viewBox attribute and its width/height within the DOM.\n  We\'ll follow a convention based on the work of Robert Pearce and Eric B. Smith. That is, 60 abstract user units (one large grid square) correspond to 1.5 meters.\n  </aside>\n\nThe above two JS functions each have a single parameter `props`, and return something which looks like HTML (but isn\'t).\nFor example, _PanZoom_ renders _Grid_ by using the XML tag `<Grid/>`.\nThen although React function components are functions, syntactically they are not invoked like functions i.e. we do not write `Grid(props)`.\nBut what are React function components actually returning?\nHere\'s a whirlwind overview.\n\n- React devs use a grammatical extension of JS with XML called [JSX](https://en.wikipedia.org/wiki/JSX_(JavaScript)).\n- React applications are built by composing React function components, using the XML syntax for their return value.\n- Dev tools convert JSX into JS by replacing XML tags with invocations of `React.createElement` ([example/jsx-to-js.jsx](#command "open-tab jsx-to-js")).\n- This website actually uses _Preact_, a React alternative with the same API.\n  Then `React.createElement` is [this function](https://github.com/preactjs/preact/blob/master/src/create-element.js "@new-tab"),\n  and creates Preact virtual DOM nodes.\n- The root component is usually called _App_.\n  Running a React application means [invoking `ReactDOM.render`](https://codesandbox.io/s/rogue-markup-panzoom-yq060?file=/src/index.js "@new-tab")\n  with 2 arguments: `<App/>` and a DOM node _el_.\n\n- [`ReactDOM.render`](https://github.com/preactjs/preact/blob/master/src/render.js "@new-tab") initially converts `<App/>` into a DOM node mounted at _el_.\n  A subcomponent may re-render, recursively recreating a virtual DOM node.\n  It is [diffed](https://github.com/preactjs/preact/blob/master/src/diff/index.js "@new-tab") and only the difference is applied to the DOM.\n\n<div\n  class="tabs"\n  height="340"\n  store-key="jsx-to-js"\n  tabs="[ { key: \'code\', filepath: \'example/jsx-to-js.jsx\' } ]"\n></div>\n\n### Avoiding React Renders\n\n\x3c!--\nWebsites respond to interaction, sometimes without changing the DOM.\nWhen they do mutate the DOM, they usually don\'t continually do so.\nFor example, zooming a map can be done with a CSS transform and a pre-existing CSS transition.\nAs another example, showing additional search results amounts to a single mutation.\n--\x3e\n\nWhen React renders a component, it computes a rooted subtree of the virtual DOM,\ncompares the previous one, and patches the DOM.\nIf many components change in a small amount of time, [some renders are automatically avoided](https://github.com/preactjs/preact/blob/ebd87f3005d9558bfd3c5f38e0496a5d19553441/src/component.js#L221 "@new-tab") via the ancestral relationship.\nDevelopers can also avoid recreating an entire rooted subtree using [`React.memo`](https://github.com/preactjs/preact/blob/master/compat/src/memo.js "@new-tab").\nBut for many websites, the virtual DOM manipulations are neither too large nor too frequent, and React developers may simply ignore their overhead.\n\nHowever, we are making a realtime video game.\nWe want to control the rendering as much as possible, to ensure good performance and aid debugging e.g. when many objects are onscreen.\nIf we allowed React (actually, Preact) to render in response to user interaction, we\'d lose this control.\nTake another look at _panzoom/PanZoom.jsx_.\n\n<div\n  class="tabs"\n  height="360"\n  store-key="panzoom-again"\n  tabs="[\n    { key: \'code\', filepath: \'panzoom/PanZoom.jsx\' },\n    { key: \'code\', filepath: \'geom/rect.js\' },\n  ]"\n></div>\n\n_PanZoom_ returns an `<svg/>` with a viewBox attribute determined by `state.viewBox`.\nWhen a user zooms via mousewheel, the event handler `state.onWheel` updates `state.viewBox`.\nBut updating this variable does not automatically update the virtual DOM.\nUsually one would _trigger a re-render_, so that _PanZoom_ returns `<svg/>` with the updated viewBox, and the DOM-diffing algorithm does the update.\nBut how do we trigger a re-render?\n\nA React function component is rendered if an ancestor is (modulo React.memo), or if its internal state changes. Internal state is represented using the [React.useState hook](https://reactjs.org/docs/hooks-state.html) e.g.\n\n> `const [value, setValue] = React.useState(() => initialValue)`\n\nThese declarations cannot be nested, must occur at the "top-level" of the React function component, and must always execute in the same order.\nThis induces a [well-defined association](https://github.com/preactjs/preact/blob/98f130ee8695c2b4f7535205ddf02168192cdcac/hooks/src/index.js#L109 "@new-tab") with their enclosing component.\nTo change state we execute `setValue(nextValue)` e.g. in response to a click. If `nextValue` differs from `value`, the function `setValue` causes the component to re-render where now `React.setState(...)[0]` has the new value.\nThis propagation of internal state is possible because hooks must always execute in the same order.\n\nIn _panzoom/PanZoom.jsx_, `value` corresponds to `state` but there is no correspondent of `setValue`.\nWhy?\nBecause we never inform React we\'ve changed `state`, despite mutating it on mouse and pointer events.\nInstead we directly mutate the DOM via:\n\n> ``state.root.setAttribute(\'viewBox\', `${state.viewBox}`);``\n\n\x3c!-- By the way, `` `${state.viewBox}` `` amounts to `state.viewBox.toString()` which is defined in [geom/rect.js](#command "open-tab panzoom-again code--geom/rect.js"). --\x3e\n\nAs far as React is concerned nothing has changed.\nAlso, if React renders for another reason (e.g. an ancestral render), it\'ll use the mutated `state` to set the viewBox attribute (so, no change).\nWhy bother though?\nTo avoid needlessly recomputing `<Grid />` and `children` whenever we pan or zoom.\nOur game may contain many elements, and we\'d rather not recompute their virtual DOM many times per second.\n\nThe above situation is handled by a single DOM mutation.\nIn more complex situations we\'ll integrate [Web Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components).\nMore on that later.\n\n\x3c!-- ### CSS inside JS\n\nTraditionally, CSS is provided in separate files,\nlinked in the `<head/>` and referenced by DOM elements via their space-separated attribute `class`.\nBoth _PanZoom_ and _PanZoomDemo_ above are styled using CSS-in-JS.\nThis means the CSS is written inside JS or JSX files, often together with the React component it applies to.\nThe npm module [Goober](https://www.npmjs.com/package/goober) handles this for us. --\x3e\n'}},function(e){e.O(0,[774,35,953,888,179],(function(){return n=2304,e(e.s=n);var n}));var n=e.O();_N_E=n}]);