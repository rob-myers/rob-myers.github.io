"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[80],{79080:function(n,o,e){e.r(o),o.default='import React, { useEffect, useState, useMemo, useRef } from "react";\nimport { css } from "goober";\nimport { useQuery } from "react-query";\n\nimport { gridBounds, initViewBox } from "../example/defaults";\nimport { Poly, Vect } from "../geom";\nimport { getSvgPos, geom, projectSvgEvt } from "../service";\nimport { Pathfinding } from \'../pathfinding/Pathfinding\';\nimport PanZoom from "../panzoom/PanZoom";\n\n/**\n * TODO find an interface permitting possibly many\n * navpaths, and enable/disable navnodes\n */\n\nexport default function NavDemo() {\n\n  const [dots, setDots] = useState(/** @type {Geom.VectJson[]} */ ([]));\n  const [path, setPath] = useState(/** @type {Geom.Vect[]} */ ([]));\n  const pathfinding = useMemo(() => new Pathfinding, []);\n  const zoneKey = \'myZone\';\n  const lastDownAt = useRef(0);\n\n  const { data } = useQuery(\'navpoly-demo\', async () => {\n    /** @type {Geomorph.GeomorphJson} */\n    const json = await fetch(\'/geomorph/g-301--bridge.json\').then(x => x.json());\n    const navPoly = json.navPoly.map(x => Poly.from(x));\n    const decomp = geom.polysToTriangulation(navPoly);\n    const zone = Pathfinding.createZone(decomp);\n    pathfinding.setZoneData(zoneKey, zone);\n    return { pngRect: json.pngRect, navPoly, zone };\n  });\n\n  useEffect(() => {\n    if (dots.length === 2) {\n      const groupId = pathfinding.getGroup(zoneKey, dots[0]);\n      if (groupId !== null) {\n        setPath(\n          [dots[0]].concat(pathfinding.findPath(dots[0], dots[1], zoneKey, groupId) || [])\n            .map(Vect.from)\n        );\n      }\n    } else {\n      setPath([]);\n    }\n  }, [dots]);\n\n  return (\n    <PanZoom gridBounds={gridBounds} initViewBox={initViewBox} maxZoom={6}>\n      <g\n        className={rootCss}\n        ref={(el) => {\n          if (el) {// Use native events so polyfill works\n            el.addEventListener(\'pointerdown\', () => {\n              lastDownAt.current = Date.now();\n            });\n            el.addEventListener(\'pointerup\', (e) => {\n              if (Date.now() - lastDownAt.current < 200) {\n                const point = getSvgPos(projectSvgEvt(e));\n                setDots(dots.slice(0, 1).concat(point));\n              }\n            });\n          }\n        }}\n      >\n\n        {data && <>\n          <image\n            {...data.pngRect}\n            className="geomorph"\n            href="/geomorph/g-301--bridge.debug.png"\n          />\n\n          {data.navPoly.map(x => (\n            <path\n              className="navpoly"\n              d={x.svgPath}\n              // onPointerDown={_ => lastDownAt.current = Date.now()}\n              // onPointerUp={e => {\n              //   if (Date.now() - lastDownAt.current < 200) {\n              //     const point = Vect.from(getSvgPos(e));\n              //     setDots(dots.slice(0, 1).concat(point));\n              //   }\n              // }}\n            />\n          ))}\n\n          {data.zone.groups.map(nodes =>\n            nodes.map(({ centroid, vertexIds}) =>\n              // <circle fill="rgba(0, 0, 0, 0.2)" cx={centroid.x} cy={centroid.y} r={2.5} />\n              <polygon\n                className="navtri"\n                points={`${vertexIds.map(id => data.zone.vertices[id])}`}\n              />\n          ))}\n\n        </>}\n\n        <polyline className="navpath" points={`${path}`}/>\n\n        <g className="dots">\n          {dots.map((p, i) =>\n            <circle\n              key={i} cx={p.x} cy={p.y} r={8}\n              onClick={(e) => {\n                setDots(dots.filter((_, j) => i !== j));\n                e.stopPropagation();\n              }}\n            />\n          )}\n        </g>\n      </g>\n\n    </PanZoom>\n  );\n}\n\nconst rootCss = css`\n  border: 1px solid #555555;\n  height: inherit;\n\n  > path.navpoly {\n    fill: rgba(0, 0, 0, 0.01);\n    stroke-width: 2;\n  }\n\n  > g.dots circle {\n    fill: white;\n    stroke: black;\n    stroke-width: 2;\n    cursor: pointer;\n  }\n\n  > polyline.navpath {\n    fill: none;\n    stroke: #00f;\n    stroke-width: 4;\n    stroke-dasharray: 20 10;\n  }\n\n  polygon.navtri {\n    fill: rgba(0, 0, 0, 0);\n    &:hover {\n      fill: rgba(0, 0, 0, 0.2);\n    }\n  }\n`;'}}]);