"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[42],{31042:function(o,t,n){n.r(t),n.d(t,{default:function(){return Lo}});var e,r=n(59748),s=n(86352),i=n(11455),a=n(52209),l=n(88269),c=n(79056),y=n(20437),p=n(84273),g=n(8311);function d(o){var t=r.useState((function(){var t=o.initViewBox.clone(),r=o.minZoom||.5,s=o.maxZoom||2;return{viewBox:t,panFrom:null,zoom:o.initZoom||1,ptrs:[],ptrDiff:null,zoomTo:function(e,i){var a=Math.min(Math.max(n.zoom+i,r),s);t.x=n.zoom/a*(t.x-e.x)+e.x,t.y=n.zoom/a*(t.y-e.y)+e.y,t.width=1/a*o.initViewBox.width,t.height=1/a*o.initViewBox.height,n.zoom=a},onWheel:function(o){if(o.preventDefault(),"ownerSVGElement"in(o.target||{})){var t=(0,p.zk)((0,p.Xs)(o));n.zoomTo(t,-.003*o.deltaY),n.root.setAttribute("viewBox","".concat(n.viewBox))}},onPointerDown:function(o){"ownerSVGElement"in(o.target||{})&&(n.panFrom=(new y.dl).copy((0,p.zk)((0,p.Xs)(o))),n.ptrs.push((0,p.Xs)(o)))},onPointerMove:function(o){if(n.ptrs=n.ptrs.map((function(t){return t.pointerId===o.pointerId?(0,p.Xs)(o):t})),2===n.ptrs.length){var e=Math.abs(n.ptrs[1].clientX-n.ptrs[0].clientX);if(null!==n.ptrDiff){var r=(0,p._Y)(n.ptrs);n.zoomTo(r,.02*(e-n.ptrDiff)),n.root.setAttribute("viewBox","".concat(n.viewBox))}n.ptrDiff=e}else if(n.panFrom){var s=(0,p.zk)((0,p.Xs)(o));t.delta(n.panFrom.x-s.x,n.panFrom.y-s.y),n.root.setAttribute("viewBox","".concat(n.viewBox))}},onPointerUp:function(o){n.panFrom=null,n.ptrs=n.ptrs.filter((function(t){return o.pointerId!==t.pointerId})),n.ptrs.length<2&&(n.ptrDiff=null)},rootRef:function(o){o&&(n.root=o,o.addEventListener("wheel",n.onWheel,{passive:!1}),o.addEventListener("pointerdown",n.onPointerDown,{passive:!0}),o.addEventListener("pointermove",n.onPointerMove,{passive:!0}),o.addEventListener("pointerup",n.onPointerUp,{passive:!0}),o.addEventListener("pointercancel",n.onPointerUp,{passive:!0}),o.addEventListener("pointerleave",n.onPointerUp,{passive:!0}),o.addEventListener("touchstart",(function(o){return o.preventDefault()}),{passive:!1}))},root:{},rootCss:(0,l.iv)(e||(e=(0,a.Z)(["\n        width: 100%;\n        height: 100%;\n        touch-action: pan-x pan-y pinch-zoom;\n        > g.content {\n          shape-rendering: ",";\n        }\n        > .grid {\n          pointer-events: none;\n        }\n      "])),p.us?"optimizeSpeed":"auto")}})),n=(0,c.Z)(t,1)[0];return(0,g.BX)("svg",{ref:n.rootRef,className:n.rootCss,preserveAspectRatio:"xMinYMin",viewBox:"".concat(n.viewBox),children:[(0,g.tZ)("g",{className:"content",children:o.children}),(0,g.tZ)(h,{bounds:o.gridBounds})]})}function h(o){var t=r.useMemo((function(){return f++}),[]);return(0,g.tZ)(g.HY,{children:[10,60].flatMap((function(n){return[(0,g.tZ)("defs",{children:(0,g.tZ)("pattern",{id:"pattern-grid-".concat(n,"x").concat(n,"--").concat(t),width:n,height:n,patternUnits:"userSpaceOnUse",children:(0,g.tZ)("path",{d:"M ".concat(n," 0 L 0 0 0 ").concat(n),fill:"none",stroke:"rgba(0,0,0,0.5)",strokeWidth:"0.3"})})}),(0,g.tZ)("rect",{className:"grid",x:o.bounds.x,y:o.bounds.y,width:o.bounds.width,height:o.bounds.height,fill:"url(#pattern-grid-".concat(n,"x").concat(n,"--").concat(t,")")})]}))})}var u,f=0;var m=new y.UL(-6,-22,1212,628),x=new y.UL(-5e3,-5e3,10001,10001),v=m.clone().outset(50),w=(0,l.iv)(u||(u=(0,a.Z)(["\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  > p {\n    padding: 12px 8px;\n    margin: 0;\n    font-family: monospace;\n    font-size: 16px;\n    background: var(--focus-bg);\n  }\n"]))),b=n(92809),P=n(30266),k=n(809),Z=n.n(k),R=n(88767),S=n(68216),D=n(25997),M=function(){function o(){(0,S.Z)(this,o)}return(0,D.Z)(o,null,[{key:"roundNumber",value:function(o,t){var n=Math.pow(10,t);return Math.round(o*n)/n}},{key:"sample",value:function(o){return o[Math.floor(Math.random()*o.length)]}},{key:"distanceToSquared",value:function(o,t){var n=o.x-t.x,e=o.y-t.y;return n*n+e*e}},{key:"isPointInPoly",value:function(o,t){for(var n=!1,e=-1,r=o.length,s=r-1;++e<r;s=e)(o[e].y<=t.y&&t.y<o[s].y||o[s].y<=t.y&&t.y<o[e].y)&&t.x<(o[s].x-o[e].x)*(t.y-o[e].y)/(o[s].y-o[e].y)+o[e].x&&(n=!n);return n}},{key:"isVectorInPolygon",value:function(o,t,n){var e=1e5,r=-1e5,s=[];return t.vertexIds.forEach((function(o){e=Math.min(n[o].y,e),r=Math.max(n[o].y,r),s.push(n[o])})),!!(o.y<r+.5&&o.y>e-.5&&this.isPointInPoly(s,o))}},{key:"triarea2",value:function(o,t,n){var e=t.x-o.x,r=t.y-o.y;return-((n.x-o.x)*r-e*(n.y-o.y))}},{key:"vequal",value:function(o,t){return this.distanceToSquared(o,t)<1e-5}}]),o}(),O=function(){function o(t){(0,S.Z)(this,o),this.content=[],this.scoreFunction=t}return(0,D.Z)(o,[{key:"push",value:function(o){this.content.push(o),this.sinkDown(this.content.length-1)}},{key:"pop",value:function(){var o=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.bubbleUp(0)),o}},{key:"remove",value:function(o){var t=this.content.indexOf(o),n=this.content.pop();t!==this.content.length-1&&(this.content[t]=n,this.scoreFunction(n)<this.scoreFunction(o)?this.sinkDown(t):this.bubbleUp(t))}},{key:"size",value:function(){return this.content.length}},{key:"rescoreElement",value:function(o){this.sinkDown(this.content.indexOf(o))}},{key:"sinkDown",value:function(o){for(var t=this.content[o];o>0;){var n=(o+1>>1)-1,e=this.content[n];if(!(this.scoreFunction(t)<this.scoreFunction(e)))break;this.content[n]=t,this.content[o]=e,o=n}}},{key:"bubbleUp",value:function(o){for(var t=this.content.length,n=this.content[o],e=this.scoreFunction(n);;){var r=o+1<<1,s=r-1,i=null,a=-1/0;if(s<t){var l=this.content[s];(a=this.scoreFunction(l))<e&&(i=s)}if(r<t){var c=this.content[r];this.scoreFunction(c)<(null===i?e:a)&&(i=r)}if(null===i)break;this.content[o]=this.content[i],this.content[i]=n,o=i}}}]),o}(),E=function(){function o(){(0,S.Z)(this,o)}return(0,D.Z)(o,null,[{key:"init",value:function(o){for(var t=0;t<o.length;t++){var n=o[t];n.f=0,n.g=0,n.h=0,n.cost=1,n.visited=!1,n.closed=!1,n.parent=null}}},{key:"cleanUp",value:function(o){for(var t=0;t<o.length;t++){var n=o[t];delete n.f,delete n.g,delete n.h,delete n.cost,delete n.visited,delete n.closed,delete n.parent}}},{key:"heap",value:function(){return new O((function(o){return o.f}))}},{key:"search",value:function(o,t,n){this.init(o);var e=this.heap();for(e.push(t);e.size()>0;){var r=e.pop();if(r===n){for(var s=r,i=[];s.parent;)i.push(s),s=s.parent;return this.cleanUp(i),i.reverse()}r.closed=!0;for(var a=this.neighbours(o,r),l=0,c=a.length;l<c;l++){var y=a[l];if(!y.closed){var p=r.g+y.cost,g=y.visited;if(!g||p<y.g){if(y.visited=!0,y.parent=r,!y.centroid||!n.centroid)throw new Error("Unexpected state");y.h=y.h||this.heuristic(y.centroid,n.centroid),y.g=p,y.f=y.g+y.h,g?e.rescoreElement(y):e.push(y)}}}}return[]}},{key:"heuristic",value:function(o,t){return M.distanceToSquared(o,t)}},{key:"neighbours",value:function(o,t){for(var n=[],e=0;e<t.neighbours.length;e++)n.push(o[t.neighbours[e]]);return n}}]),o}(),z=function(){function o(){(0,S.Z)(this,o)}return(0,D.Z)(o,null,[{key:"buildZone",value:function(o){var t=this,n=this._buildNavigationMesh(o);n.vertices.forEach((function(o){o.x=M.roundNumber(o.x,2),o.y=M.roundNumber(o.y,2)}));var e={};e.vertices=n.vertices;var r=this._buildPolygonGroups(n);return e.groups=new Array(r.length),r.forEach((function(o,n){var r=new Map;o.forEach((function(o,t){return r.set(o,t)}));var s=new Array(o.length);o.forEach((function(o,n){var i=[];o.neighbours.forEach((function(o){return i.push(r.get(o))}));var a=[];o.neighbours.forEach((function(n){return a.push(t._getSharedVerticesInOrder(o,n))}));var l=new y.dl(0,0);l.add(e.vertices[o.vertexIds[0]]),l.add(e.vertices[o.vertexIds[1]]),l.add(e.vertices[o.vertexIds[2]]),l.scale(1/3),l.x=M.roundNumber(l.x,2),l.y=M.roundNumber(l.y,2),s[n]={id:n,centroid:l,neighbours:i,portals:a,vertexIds:o.vertexIds}})),e.groups[n]=s})),e}},{key:"_buildNavigationMesh",value:function(o){return this._buildPolygonsFromTriang(o)}},{key:"_spreadGroupId",value:function(o){for(var t=new Set([o]);t.size>0;){var n=t;t=new Set,n.forEach((function(n){n.group=o.group,n.neighbours.forEach((function(o){void 0===o.group&&t.add(o)}))}))}}},{key:"_buildPolygonGroups",value:function(o){var t=this,n=o.polygons,e=[];return n.forEach((function(o){void 0!==o.group?e[o.group].push(o):(o.group=e.length,t._spreadGroupId(o),e.push([o]))})),e}},{key:"_buildPolygonNeighbours",value:function(o,t){var n=new Set,e=t[o.vertexIds[0]],r=t[o.vertexIds[1]],s=t[o.vertexIds[2]];return e.forEach((function(t){t!==o&&(r.includes(t)||s.includes(t))&&n.add(t)})),r.forEach((function(t){t!==o&&s.includes(t)&&n.add(t)})),n}},{key:"_buildPolygonsFromTriang",value:function(o){for(var t=this,n=[],e=[],r={},s=0;s<o.vs.length;s++)e.push(o.vs[s]),r[s]=[];for(var i=0;i<o.tris.length;i++){var a=(0,c.Z)(o.tris[i],3),l=a[0],y=a[1],p=a[2],g={vertexIds:[l,y,p]};n.push(g),r[l].push(g),r[y].push(g),r[p].push(g)}return n.forEach((function(o){o.neighbours=t._buildPolygonNeighbours(o,r)})),{polygons:n,vertices:e}}},{key:"_getSharedVerticesInOrder",value:function(o,t){var n=o.vertexIds,e=n[0],r=n[1],s=n[2],i=t.vertexIds,a=i.includes(e),l=i.includes(r),c=i.includes(s);return a&&l&&c?Array.from(n):a&&l?[e,r]:l&&c?[r,s]:a&&c?[s,e]:(console.warn("Error processing navigation mesh neighbors; neighbors with <2 shared vertices found."),[])}}]),o}(),j=function(){function o(){(0,S.Z)(this,o),this.portals=[]}return(0,D.Z)(o,[{key:"push",value:function(o,t){void 0===t&&(t=o),this.portals.push({left:o,right:t})}},{key:"stringPull",value:function(){var o,t,n,e=this.portals,r=[],s=0,i=0,a=0;o=e[0].left,t=e[0].left,n=e[0].right,r.push(o);for(var l=1;l<e.length;l++){var c=e[l].left,y=e[l].right;if(M.triarea2(o,n,y)<=0){if(!(M.vequal(o,n)||M.triarea2(o,t,y)>0)){r.push(t),t=o=t,n=o,i=s=i,a=s,l=s;continue}n=y,a=l}if(M.triarea2(o,t,c)>=0){if(!(M.vequal(o,t)||M.triarea2(o,n,c)<0)){r.push(n),t=o=n,n=o,i=s=a,a=s,l=s;continue}t=c,i=l}}return 0!==r.length&&M.vequal(r[r.length-1],e[e.length-1].left)||r.push(e[e.length-1].left),this.path=r,r}}]),o}(),V=function(){function o(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new y.dl,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new y.dl,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new y.dl;(0,S.Z)(this,o),this.a=t,this.b=n,this.c=e}return(0,D.Z)(o,[{key:"closestPointToPoint",value:function(o,t){var n,e,r=this.a,s=this.b,i=this.c;B.subVectors(s,r),N.subVectors(i,r),I.subVectors(o,r);var a=B.dot(I),l=N.dot(I);if(a<=0&&l<=0)return t.copy(r);A.subVectors(o,s);var c=B.dot(A),y=N.dot(A);if(c>=0&&y<=c)return t.copy(s);var p=a*y-c*l;if(p<=0&&a>=0&&c<=0)return n=a/(a-c),t.copy(r).addScaledVector(B,n);T.subVectors(o,i);var g=B.dot(T),d=N.dot(T);if(d>=0&&g<=d)return t.copy(i);var h=g*l-a*d;if(h<=0&&l>=0&&d<=0)return e=l/(l-d),t.copy(r).addScaledVector(N,e);var u=c*d-g*y;if(u<=0&&y-c>=0&&g-d>=0)return L.subVectors(i,s),e=(y-c)/(y-c+(g-d)),t.copy(s).addScaledVector(L,e);var f=1/(u+h+p);return n=h*f,e=p*f,t.copy(r).addScaledVector(B,n).addScaledVector(N,e)}},{key:"set",value:function(o,t,n){return this.a.copy(o),this.b.copy(t),this.c.copy(n),this}}]),o}(),B=new y.dl,N=new y.dl,I=new y.dl,A=new y.dl,T=new y.dl,L=new y.dl;function U(o,t){var n="undefined"!==typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!n){if(Array.isArray(o)||(n=function(o,t){if(!o)return;if("string"===typeof o)return F(o,t);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return F(o,t)}(o))||t&&o&&"number"===typeof o.length){n&&(o=n);var e=0,r=function(){};return{s:r,n:function(){return e>=o.length?{done:!0}:{done:!1,value:o[e++]}},e:function(o){throw o},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,i=!0,a=!1;return{s:function(){n=n.call(o)},n:function(){var o=n.next();return i=o.done,o},e:function(o){a=!0,s=o},f:function(){try{i||null==n.return||n.return()}finally{if(a)throw s}}}}function F(o,t){(null==t||t>o.length)&&(t=o.length);for(var n=0,e=new Array(t);n<t;n++)e[n]=o[n];return e}var G,_=function(){function o(){(0,S.Z)(this,o),this.zones={};var t={point:new y.dl(0,0),triangle:new V,endPoint:new y.dl(0,0),closestNode:null,closestPoint:new y.dl(0,0),closestDistance:1/0};this.temp=t}return(0,D.Z)(o,[{key:"setZoneData",value:function(o,t){this.zones[o]=t}},{key:"getRandomNode",value:function(o,t,n,e){if(!this.zones[o])return new y.dl(0,0);n=n||null,e=e||0;var r=[];return this.zones[o].groups[t].forEach((function(o){n&&e?M.distanceToSquared(n,o.centroid)<e*e&&r.push(o.centroid):r.push(o.centroid)})),M.sample(r)||new y.dl(0,0)}},{key:"getClosestNode",value:function(o,t,n){var e=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=this.zones[t].groups[n],s=this.zones[t].vertices,i=null,a=1/0;return r.forEach((function(t){var n=M.distanceToSquared(t.centroid,o);n<a&&(!e||M.isVectorInPolygon(o,t,s))&&(i=t,a=n)})),i}},{key:"findPath",value:function(o,t,n,e){var r=this.zones[n].groups[e],s=this.zones[n].vertices,i=this.getClosestNode(o,n,e,!0),a=this.getClosestNode(t,n,e,!0);if(!i||!a)return null;var l=E.search(r,i,a),c=function(o,t){for(var n=0;n<o.neighbours.length;n++)if(o.neighbours[n]===t.id)return o.portals[n]},p=new j;p.push(o);for(var g=0;g<l.length;g++){var d=l[g],h=l[g+1];if(h){var u=c(d,h);p.push(s[u[0]],s[u[1]])}}p.push(t),p.stringPull();var f=p.path.map((function(o){return new y.dl(o.x,o.y)}));return f.shift(),f}},{key:"getGroup",value:function(o,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!this.zones[o])return null;for(var e=null,r=Math.pow(50,2),s=this.zones[o],i=0;i<s.groups.length;i++){var a,l=s.groups[i],c=U(l);try{for(c.s();!(a=c.n()).done;){var y=a.value;if(n){var p=[s.vertices[y.vertexIds[0]],s.vertices[y.vertexIds[1]],s.vertices[y.vertexIds[2]]];if(M.isPointInPoly(p,t))return i}var g=M.distanceToSquared(y.centroid,t);g<r&&(e=i,r=g)}}catch(d){c.e(d)}finally{c.f()}}return e}},{key:"clampStep",value:function(o,t,n,e,r,s){var i=this.zones[e].vertices,a=this.zones[e].groups[r],l=[n],c={};c[n.id]=0;var y=this.temp;y.closestNode=null,y.closestPoint.set(0,0),y.closestDistance=1/0,y.endPoint.copy(t);for(var p=l.pop();p;p=l.pop()){y.triangle.set(i[p.vertexIds[0]],i[p.vertexIds[1]],i[p.vertexIds[2]]),y.triangle.closestPointToPoint(y.endPoint,y.point),y.point.distanceToSquared(y.endPoint)<y.closestDistance&&(y.closestNode=p,y.closestPoint.copy(y.point),y.closestDistance=y.point.distanceToSquared(y.endPoint));var g=c[p.id];if(!(g>2))for(var d=0;d<p.neighbours.length;d++){var h=a[p.neighbours[d]];h.id in c||(l.push(h),c[h.id]=g+1)}}return s.copy(y.closestPoint),y.closestNode}}],[{key:"createZone",value:function(o){return z.buildZone(o)}}]),o}();function C(o,t){var n=Object.keys(o);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(o);t&&(e=e.filter((function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable}))),n.push.apply(n,e)}return n}function $(o){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?C(Object(n),!0).forEach((function(t){(0,b.Z)(o,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(o,Object.getOwnPropertyDescriptors(n)):C(Object(n)).forEach((function(t){Object.defineProperty(o,t,Object.getOwnPropertyDescriptor(n,t))}))}return o}var X=new y.UL(-5e3,-5e3,10001,10001),J=new y.UL(0,0,1200,600),q=(0,l.iv)(G||(G=(0,a.Z)(["\n  border: 1px solid #555555;\n  height: inherit;\n\n  > path.navpoly {\n    fill: rgba(0, 0, 0, 0.01);\n    stroke-width: 2;\n  }\n\n  > g.dots circle {\n    fill: white;\n    stroke: black;\n    stroke-width: 2;\n    cursor: pointer;\n  }\n\n  > polyline.navpath {\n    fill: none;\n    stroke: #00f;\n    stroke-width: 4;\n    stroke-dasharray: 20 10;\n  }\n\n  polygon.navtri {\n    fill: rgba(0, 0, 0, 0);\n    &:hover {\n      fill: rgba(0, 0, 0, 0.2);\n    }\n  }\n"]))),W=n(94184),K=n.n(W),Y=n(97131),H=(n(77503),n(292));function Q(o,t){var n=Object.keys(o);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(o);t&&(e=e.filter((function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable}))),n.push.apply(n,e)}return n}function oo(o){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Q(Object(n),!0).forEach((function(t){(0,b.Z)(o,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(o,Object.getOwnPropertyDescriptors(n)):Q(Object(n)).forEach((function(t){Object.defineProperty(o,t,Object.getOwnPropertyDescriptor(n,t))}))}return o}function to(o,t){var n=new y._3,e={singles:[],obstacles:[],walls:[]};o.items.forEach((function(o,r){var s,i,a;o.transform?n.feedFromArray(o.transform):n.setIdentity();var l=t[o.symbol],c=l.singles,p=l.obstacles,g=l.walls,d=l.hull;r&&(n.a*=.2,n.b*=.2,n.c*=.2,n.d*=.2);var h=c.map((function(o){return{tags:o.tags,poly:o.poly.clone().applyMatrix(n).precision(1)}})).filter((function(t){var n=t.tags;return o.doors&&n.includes("door")?n.some((function(t){return o.doors.includes(t)})):!o.walls||!n.includes("wall")||n.some((function(t){return o.walls.includes(t)}))}));(s=e.singles).push.apply(s,(0,Y.Z)(h)),(i=e.obstacles).push.apply(i,(0,Y.Z)(p.map((function(o){return o.clone().applyMatrix(n)})))),(a=e.walls).push.apply(a,(0,Y.Z)(y.LA.union([].concat((0,Y.Z)(g.map((function(o){return o.clone().applyMatrix(n)}))),(0,Y.Z)(eo(h,"wall")),(0,Y.Z)(d.flatMap((function(o){return o.createOutset(2)})).map((function(o){return o.applyMatrix(n)})))))))})),e.obstacles.forEach((function(o){return o.fixOrientation()})),e.singles.forEach((function(o){return o.poly.fixOrientation()}));var r=eo(e.singles,"door"),s=e.walls.flatMap((function(o){return y.LA.cutOut(r,[o])}));e.walls=y.LA.union(s),e.singles=e.singles.reduce((function(o,t){return o.concat(t.tags.includes("wall")?y.LA.cutOut(r,[t.poly]).map((function(o){return oo(oo({},t),{},{poly:o})})):t)}),[]);var i=o.items.map((function(o){return t[o.symbol]})),a=i[0],l=a.hull.map((function(o){return o.clone().removeHoles()})),c=eo(e.singles,"window"),p=y.LA.cutOut([].concat(s.flatMap((function(o){return o.createOutset(12)})),e.obstacles.flatMap((function(o){return o.createOutset(8)}))),l).map((function(o){return o.cleanFinalReps().precision(1).fixOrientation()})),g=(0,H.vL)(0,0).getContext("2d");g.font=no.font;var d=ro(e.singles,"label").map((function(o){var t=o.poly,n=o.tags,e=t.rect.center.json,r=n.filter((function(o){return"label"!==o})).join(" "),s=!r.match(/[gjpqy]/),i={x:g.measureText(r).width,y:s?no.noTailPx:no.sizePx},a={x:e.x-.5*i.x,y:e.y-.5*i.y,width:i.x,height:i.y};return{text:r,center:e,rect:a,padded:(new y.UL).copy(a).outset(no.padX,no.padY).json}}));return{def:o,groups:e,navPoly:p,labels:d,hullTop:y.LA.cutOut(r.concat(c),a.hull),hullRect:y.UL.from.apply(y.UL,(0,Y.Z)(a.hull.concat(r).map((function(o){return o.rect})))),items:i.map((function(t,n){return{key:t.key,pngHref:n?"/symbol/".concat(t.key,".png"):"/debug/".concat(o.key,".png"),pngRect:t.pngRect,transformArray:o.items[n].transform,transform:o.items[n].transform?"matrix(".concat(o.items[n].transform,")"):void 0}}))}}var no={sizePx:11,noTailPx:10,font:"".concat(11,"px sans-serif"),padX:4,padY:2};function eo(o,t){return ro(o,t).map((function(o){return o.poly}))}function ro(o,t){return o.filter((function(o){return o.tags.includes(t)}))}function so(o){return Object.values(o).reduce((function(o,t){return(o[t.key]={key:(n=t).key,hull:n.hull.map(y.LA.from),obstacles:n.obstacles.map(y.LA.from),walls:n.walls.map(y.LA.from),singles:n.singles.map((function(o){var t=o.tags,n=o.poly;return{tags:t,poly:y.LA.from(n)}})),pngRect:n.pngRect})&&o;var n}),{})}var io={"g-101--multipurpose":{key:"g-101--multipurpose",id:101,items:[{symbol:"101--hull"},{symbol:"fuel--010--2x4"},{symbol:"fuel--010--2x4",transform:[1,0,0,1,360,0]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,600,0]},{symbol:"iris-valves--005--1x1",transform:[1,0,0,1,840,0]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,960,0]},{symbol:"machinery--158--1.8x3.6",transform:[0,-1,1,0,10,240]},{symbol:"stateroom--020--2x3",transform:[0,1,1,0,360,120]},{symbol:"fresher--020--2x2",transform:[0,1,1,0,540,120]},{symbol:"lounge--009--2x3",transform:[-1,0,0,-1,840,240]},{symbol:"machinery--155--1.8x3.6",transform:[0,-1,1,0,972,236]},{symbol:"iris-valves--005--1x1",transform:[0,-1,1,0,0,360]},{symbol:"stateroom--018--2x3",transform:[1,0,0,1,360,240]},{symbol:"stateroom--019--2x3",transform:[-1,0,0,-1,840,420]},{symbol:"empty-room--013--2x3",transform:[0,1,-1,0,180,360]},{symbol:"medical--008--2x3",transform:[0,-1,-1,0,360,540],doors:["w"]},{symbol:"stateroom--020--2x3",transform:[0,-1,1,0,360,540]},{symbol:"stateroom--020--2x3",transform:[0,-1,-1,0,840,540]},{symbol:"fresher--025--2x3",transform:[0,-1,1,0,840,540]},{symbol:"office--023--2x3",transform:[0,-1,-1,0,1200,480]},{symbol:"empty-room--039--3x4",transform:[-1,0,0,1,180,480],walls:["w"]},{symbol:"lifeboat--small-craft",transform:[1,0,0,1,0,488]},{symbol:"medical--007--2x3",transform:[0,1,-1,0,360,660],doors:["w"]},{symbol:"office--026--2x3",transform:[0,1,-1,0,540,660]},{symbol:"office--026--2x3",transform:[0,1,1,0,660,660]},{symbol:"office--020--2x3",transform:[1,0,0,1,360,780]},{symbol:"office--020--2x3",transform:[-1,0,0,1,840,780]},{symbol:"empty-room--013--2x3",transform:[0,-1,-1,0,180,840],walls:["n"]},{symbol:"fresher--025--2x3",transform:[0,1,1,0,840,660]},{symbol:"office--061--3x4",transform:[1,0,0,1,1020,480]},{symbol:"office--023--2x3",transform:[0,1,-1,0,1200,720]},{symbol:"iris-valves--005--1x1",transform:[0,1,1,0,1140,840]},{symbol:"machinery--091--1.6x1.8",transform:[1,0,0,1,550,960]},{symbol:"office--025--2x3",transform:[0,1,1,0,360,960],doors:["w"]},{symbol:"machinery--156--1.8x3.6",transform:[0,-1,1,0,12,1068]},{symbol:"office--025--2x3",transform:[0,1,-1,0,840,960],doors:["w"]},{symbol:"machinery--357--2.2x4",transform:[1,0,0,1,960,960]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,0,1080]},{symbol:"iris-valves--005--1x1",transform:[-1,0,0,1,360,1140]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,360,1080]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,600,1080]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,960,1080]}]},"g-301--bridge":{key:"g-301--bridge",id:301,items:[{symbol:"301--hull"},{symbol:"weaponry--013--1x2",transform:[-1,0,0,1,360,-60]},{symbol:"weaponry--013--1x2",transform:[1,0,0,1,840,-60]},{symbol:"stateroom--036--2x4"},{symbol:"office--001--2x2",transform:[-1,0,0,1,240,120],doors:["s"]},{symbol:"bridge--042--8x9",transform:[1,0,0,1,360,60]},{symbol:"office--001--2x2",transform:[1,0,0,1,960,120],doors:["s"]},{symbol:"stateroom--036--2x4",transform:[-1,0,0,1,1200,0]},{symbol:"stateroom--014--2x2",transform:[1,0,0,-1,0,480]},{symbol:"stateroom--014--2x2",transform:[1,0,0,-1,120,480]},{symbol:"stateroom--036--2x4",transform:[0,-1,1,0,0,600]},{symbol:"iris-valves--005--1x1",transform:[0,-1,1,0,0,360]},{symbol:"iris-valves--005--1x1",transform:[0,1,1,0,1140,240]},{symbol:"iris-valves--005--1x1",transform:[-1,0,0,1,360,540]},{symbol:"iris-valves--005--1x1",transform:[-1,0,0,1,960,540]},{symbol:"console--031--1x1.2",transform:[-1,0,0,1,360,60]},{symbol:"console--031--1x1.2",transform:[1,0,0,1,840,60]},{symbol:"misc-stellar-cartography--023--4x4",transform:[-1,0,0,1,1200,360]}]},"g-302--xboat-repair-bay":{key:"g-302--xboat-repair-bay",id:302,items:[{symbol:"302--hull"},{symbol:"office--006--2x2",transform:[0,1,-1,0,120,120],doors:["e","w"]},{symbol:"empty-room--020--2x4",transform:[-1,0,0,1,1200,0],doors:["s"]},{symbol:"lounge--015--2x4",transform:[-1,0,0,-1,480,540]},{symbol:"window--007--0x2.4",transform:[1,0,0,1,240,412]},{symbol:"empty-room--006--2x2",transform:[0,1,-1,0,600,420],doors:["e"]},{symbol:"ships-locker--011--1x2",transform:[0,1,1,0,540,420]},{symbol:"iris-valves--005--1x1",transform:[0,1,-1,0,1200,240]},{symbol:"shop--028--0.8x1.6",transform:[0,1,-1,0,660,420]},{symbol:"shop--027--0.4x1.6",transform:[-1,0,0,1,900,480]},{symbol:"sensors--003--1x1.4",transform:[].concat((0,Y.Z)(function(o){var t=o/360*(2*Math.PI);return[Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t)]}(45)),[95,-59])}]}};function ao(o,t){var n="undefined"!==typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!n){if(Array.isArray(o)||(n=function(o,t){if(!o)return;if("string"===typeof o)return lo(o,t);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return lo(o,t)}(o))||t&&o&&"number"===typeof o.length){n&&(o=n);var e=0,r=function(){};return{s:r,n:function(){return e>=o.length?{done:!0}:{done:!1,value:o[e++]}},e:function(o){throw o},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,i=!0,a=!1;return{s:function(){n=n.call(o)},n:function(){var o=n.next();return i=o.done,o},e:function(o){a=!0,s=o},f:function(){try{i||null==n.return||n.return()}finally{if(a)throw s}}}}function lo(o,t){(null==t||t>o.length)&&(t=o.length);for(var n=0,e=new Array(t);n<t;n++)e[n]=o[n];return e}function co(o,t,n,e,r){return yo.apply(this,arguments)}function yo(){return(yo=(0,P.Z)(Z().mark((function o(t,n,e,r,s){var i,a,l,c,g,d,h,u,f,m,x,v,w,b,P,k,R,S,D,M,O,E,z,j,V,B,N,I,A,T,L,U,F,G;return Z().wrap((function(o){for(;;)switch(o.prev=o.next){case 0:i=s.scale,a=s.obsBounds,l=void 0===a||a,c=s.wallBounds,g=void 0===c||c,d=s.navTris,h=void 0!==d&&d,u=s.doors,f=void 0!==u&&u,m=s.labels,x=void 0!==m&&m,v=n[t.items[0].key],w=v.pngRect,e.width=w.width*i,e.height=w.height*i,(b=e.getContext("2d")).scale(i,i),b.translate(-w.x,-w.y),b.fillStyle="rgba(200, 200, 200, 1)",1===v.hull.length&&v.hull[0].holes.length?(P=v.hull[0].outline,(0,p.C1)(b,P)):console.error("hull walls must: exist, be connected, have a hole"),b.fillStyle="rgba(0, 0, 100, 0.2)",(0,p.Fx)(b,t.navPoly),h&&(b.strokeStyle="rgba(0, 0, 0, 0.2)",t.navPoly.flatMap((function(o){return o.qualityTriangulate()})).forEach((function(o){return(0,p.w5)(b,o)}))),b.lineJoin="round",v.singles.forEach((function(o){var t=o.poly,n=o.tags;if(n.includes("machine-base")&&((0,p.A_)(b,"#fff","#000",4),(0,p.Fx)(b,[t]),b.stroke()),n.includes("machine")&&((0,p.A_)(b,"#ccc","#000",4),(0,p.Fx)(b,[t]),b.stroke()),n.includes("fuel")){(0,p.A_)(b,"#aaa","#000",2),(0,p.Fx)(b,[t]),b.stroke(),(0,p.A_)(b,"#aaa","rgba(0, 0, 0, 0.5)",1);var e=y.dl.average(t.outline);t.outline.forEach((function(o){return(0,p.pS)(b,e,o)}))}})),k=t.items.slice(1),R=ao(k),o.prev=16,R.s();case 18:if((S=R.n()).done){o.next=30;break}return D=S.value,M=D.pngHref,O=D.pngRect,E=D.transformArray,b.save(),o.next=23,r(M);case 23:z=o.sent,E&&b.transform.apply(b,(0,Y.Z)(E)),b.scale(.2,.2),b.drawImage(z,O.x,O.y),b.restore();case 28:o.next=18;break;case 30:o.next=35;break;case 32:o.prev=32,o.t0=o.catch(16),R.e(o.t0);case 35:return o.prev=35,R.f(),o.finish(35);case 38:if(j=t.groups,V=j.singles,B=j.obstacles,N=j.walls,b.fillStyle="rgba(0, 100, 0, 0.3)",l&&(0,p.Fx)(b,B),b.fillStyle="rgba(100, 0, 0, 0.3)",g&&(0,p.Fx)(b,N),b.fillStyle="rgba(0, 0, 0, 1)",(0,p.Fx)(b,t.hullTop),V.forEach((function(o){var t=o.poly;o.tags.includes("wall")&&(b.fillStyle="rgba(0, 0, 0, 1)",(0,p.Fx)(b,[t]))})),f&&(I=eo(V,"door"),b.fillStyle="rgba(0, 0, 0, 1)",(0,p.Fx)(b,I),b.fillStyle="rgba(255, 255, 255, 1)",(0,p.Fx)(b,I.flatMap((function(o){return o.createInset(2)})))),x){b.font=no.font,b.textBaseline="top",A=ao(t.labels);try{for(A.s();!(T=A.n()).done;)L=T.value,U=L.text,F=L.rect,G=L.padded,b.fillStyle="black",b.fillRect(G.x,G.y,G.width,G.height),b.fillStyle="white",b.fillText(U,F.x,F.y)}catch(Z){A.e(Z)}finally{A.f()}}case 48:case"end":return o.stop()}}),o,null,[[16,32,35,38]])})))).apply(this,arguments)}var po,go=JSON.parse('{"101--hull":{"key":"101--hull","hull":[{"type":"Polygon","coordinates":[[[-4,-4],[1204,-4],[1204,1204],[-4,1204],[-4,-4]],[[4,4],[4,1196],[1196,1196],[1196,4],[4,4]]]}],"obstacles":[],"walls":[],"singles":[{"tags":["door","door-w-n"],"poly":{"type":"Polygon","coordinates":[[[-6,250.7],[-6,348.7],[6,348.7],[6,250.7]]]}},{"tags":["door","door-w-s"],"poly":{"type":"Polygon","coordinates":[[[-6,850.7],[-6,948.7],[6,948.7],[6,850.7]]]}},{"tags":["door","door-e-n"],"poly":{"type":"Polygon","coordinates":[[[1194,250.7],[1194,348.7],[1206,348.7],[1206,250.7]]]}},{"tags":["door","door-e-s"],"poly":{"type":"Polygon","coordinates":[[[1194,850.7],[1194,948.7],[1206,948.7],[1206,850.7]]]}},{"tags":["door","door-n-e"],"poly":{"type":"Polygon","coordinates":[[[948.999988,-6],[850.999988,-6],[850.999988,6],[948.999988,6]]]}},{"tags":["door","door-n-w"],"poly":{"type":"Polygon","coordinates":[[[348.999988,-6],[250.99998799999997,-6],[250.99998799999997,6],[348.999988,6]]]}},{"tags":["door","door-s-e"],"poly":{"type":"Polygon","coordinates":[[[948.999988,1194],[850.999988,1194],[850.999988,1206],[948.999988,1206]]]}},{"tags":["door","door-s-w"],"poly":{"type":"Polygon","coordinates":[[[348.999988,1194],[250.99998799999997,1194],[250.99998799999997,1206],[348.999988,1206]]]}}],"pngRect":{"x":-6,"y":-6,"width":1212,"height":1212}},"301--hull":{"key":"301--hull","hull":[{"type":"Polygon","coordinates":[[[-4,-4],[122.4,-4],[181.7,55.3],[360.5,55.3],[363.1,56.7],[424.38266296809985,118.67905686546464],[455,93],[493,71],[534,56],[578,49],[621,48],[664,56],[706,71],[744,93],[773.9200995299973,118.09427702515897],[837,56],[839,55],[1018,55],[1077,-4],[1204,-4],[1204,604],[-4,604],[-4,-4]],[[4,4],[4,596],[1196,596],[1196,4],[1081,4],[1023,62],[1020,63],[841,63],[779,125],[778.5,124.5],[772,131],[767,127],[737,102],[701,82],[661,67],[620,59],[578,59],[537,67],[498,82],[462,103],[433,127],[428,132],[419.3705882352941,124.32941176470588],[419,124.7],[358.4,63.3],[180,63.3],[177.1,62.1],[119.1,4],[4,4]]]}],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[300,121],[360,121],[360,61],[420,125.6],[384.4,180],[360,240],[300,240.6],[300,121]]]},{"type":"Polygon","coordinates":[[[780,125.60000600000001],[840,61.00000600000001],[840,121.00000600000001],[900,121.00000600000001],[900,240.600006],[840,240.000006],[815.6,180.000006],[780,125.60000600000001]]]}],"singles":[{"tags":["machine-base"],"poly":{"type":"Polygon","coordinates":[[[300,121],[360,121],[360,61],[420,125.6],[384.4,180],[360,240],[300,240.6],[300,121],[300,121]]]}},{"tags":["machine"],"poly":{"type":"Polygon","coordinates":[[[310.4,133],[335.4,133],[335.4,145],[347.4,145],[347.4,131],[370.4,131],[370.4,90],[406.7,127.2],[388.3,152.8],[363.8,195],[348.4,229.1],[310,229],[310.4,205],[321.4,205],[321.4,193],[310.4,193],[310.4,168.8],[323.4,168.5],[323.4,156],[310.4,156],[310.4,133],[310.4,133]]]}},{"tags":["machine-base"],"poly":{"type":"Polygon","coordinates":[[[900,121],[840,121],[840,61],[780,125.6],[815.6,180],[840,240],[900,240.6],[900,121],[900,121]]]}},{"tags":["machine"],"poly":{"type":"Polygon","coordinates":[[[889.5999879999999,133.000006],[864.5999879999999,133.000006],[864.5999879999999,145.000006],[852.5999879999999,145.000006],[852.5999879999999,131.000006],[829.5999879999999,131.000006],[829.5999879999999,90.00000600000001],[793.299988,127.200006],[811.699988,152.800006],[836.199988,195.000006],[851.5999879999999,229.100006],[889.999988,229.000006],[889.5999879999999,205.000006],[878.5999879999999,205.000006],[878.5999879999999,193.000006],[889.5999879999999,193.000006],[889.5999879999999,168.800006],[876.5999879999999,168.500006],[876.5999879999999,156.000006],[889.5999879999999,156.000006],[889.5999879999999,133.000006],[889.5999879999999,133.000006]]]}},{"tags":["door","door-w"],"poly":{"type":"Polygon","coordinates":[[[-6,251],[-6,349],[6,349],[6,251]]]}},{"tags":["door","door-e"],"poly":{"type":"Polygon","coordinates":[[[1194,251],[1194,349],[1206,349],[1206,251]]]}},{"tags":["door","door-s-e"],"poly":{"type":"Polygon","coordinates":[[[250,594],[250,606],[348,606],[348,594]]]}},{"tags":["door","door-s-w"],"poly":{"type":"Polygon","coordinates":[[[850,594],[850,606],[948,606],[948,594]]]}},{"tags":["window"],"poly":{"type":"Polygon","coordinates":[[[424,119],[455,93],[493,71],[534,56],[578,49],[621,48],[664,56],[706,71],[744,93],[775,119],[779,124],[772,131],[767,127],[737,102],[701,82],[661,67],[620,59],[578,59],[537,67],[498,82],[462,103],[433,127],[428,132],[419,124],[424,119],[424,119]]]}}],"pngRect":{"x":-6,"y":-22,"width":1212,"height":628}},"302--hull":{"key":"302--hull","hull":[{"type":"Polygon","coordinates":[[[-4,-4],[64,-4],[124,56],[124,122],[120,122],[120,235.0143298775798],[122.70917,238.322576],[238.79763680000002,410.43086480000005],[240,411.33702084698655],[240,409.9],[420,409.9],[427,415.9],[479.4,416],[598.7,416],[1076,297],[1076,-4],[1204,-4],[1204,604],[-4,604],[-4,-4]],[[4,4],[4,596],[1196,596],[1196,4],[1084,4],[1084,300],[1079.9,304.3],[600.6,423.8],[548.4,423.8],[548.4,424],[240,424],[240,421.8757724232995],[236.862554,421.8683280000001],[116.076866,242.79612],[116.11204165697707,236.39999999999998],[107.1,236.39999999999998],[107.1,120.8],[116,120.8],[116,60],[60,4],[4,4]]]}],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[60,480],[60.6,240],[120,240],[240,420],[240,540],[120,540],[60,480]]]}],"singles":[{"tags":["machine"],"poly":{"type":"Polygon","coordinates":[[[60.6,240],[60,480],[120,540],[240,540],[240,420],[120,240],[60,240],[60.6,240],[60.6,240]]]}},{"tags":["fuel"],"poly":{"type":"Polygon","coordinates":[[[126,525],[75,474],[75.6,255],[112.5,255],[225,424.5],[225,525],[126,525]]]}},{"tags":["window"],"poly":{"type":"Polygon","coordinates":[[[240,409.9],[240,424],[420,424],[420,409.9]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[897.5,346.3],[897.5,542],[902.5,542],[902.5,346.3]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1081.9240479999999,537],[600.024048,537],[600.024048,542],[1081.9240479999999,542]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1077.5,300],[1077.5,542],[1082.5,542],[1082.5,300]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1168.5,178],[1168.5,182],[1196.9,182],[1196.9,178]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1168.5,118],[1168.5,122],[1196.9,122],[1196.9,118]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1168.5,58],[1168.5,62],[1196.9,62],[1196.9,58]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1167.5,0],[1167.5,236.4],[1173,236.4],[1173,0]]]}},{"tags":["door","door-w"],"poly":{"type":"Polygon","coordinates":[[[-6,251],[-6,349],[6,349],[6,251]]]}},{"tags":["door","door-e"],"poly":{"type":"Polygon","coordinates":[[[1194,251],[1194,349],[1206,349],[1206,251]]]}},{"tags":["door","door-s-e"],"poly":{"type":"Polygon","coordinates":[[[249.996,594],[249.996,606],[347.996,606],[347.996,594]]]}},{"tags":["door","door-s-w"],"poly":{"type":"Polygon","coordinates":[[[850,594],[850,606],[948,606],[948,594]]]}},{"tags":["door","door-n","iris"],"poly":{"type":"Polygon","coordinates":[[[485,414],[485,426],[535,426],[535,414]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1086,12.000634999999875],[1074,12.000634999999875],[1074,109.10063499999978],[1086,109.10063499999978]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[728,536],[728,544],[772,544],[772,536]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[904,428],[896,428],[896,472],[904,472]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1084,367.00004899999976],[1076,367.00004899999976],[1076,472.00004899999976],[1084,472.00004899999976]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1174,187],[1166,187],[1166,231],[1174,231]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1174,127],[1166,127],[1166,171],[1174,171]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1174,67],[1166,67],[1166,111],[1174,111]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1174,8],[1166,8],[1166,52],[1174,52]]]}}],"pngRect":{"x":-6,"y":-61,"width":1212,"height":667}},"bridge--042--8x9":{"key":"bridge--042--8x9","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[56,863],[316,389],[572,640],[569,869],[56,863]]]},{"type":"Polygon","coordinates":[[[110.84667999999999,1653.086914],[386.84668,1653.086914],[386.84668,1798.086914],[110.84667999999999,1798.086914],[110.84667999999999,1653.086914]]]},{"type":"Polygon","coordinates":[[[187.83239700000001,1539.166138],[289.832397,1539.166138],[289.832397,1634.166138],[187.83239700000001,1634.166138],[187.83239700000001,1539.166138]]]},{"type":"Polygon","coordinates":[[[256.532104,1813.54126],[358.532104,1813.54126],[358.532104,1914.54126],[256.532104,1914.54126],[256.532104,1813.54126]]]},{"type":"Polygon","coordinates":[[[401,220],[1995,229],[1995,298],[401,298],[401,220]]]},{"type":"Polygon","coordinates":[[[601,2098],[808,2214],[1026,2272],[1201,2284],[1425,2263],[1636,2193],[1801,2098],[1801,2225],[1201,2344],[601,2221],[601,2098]]]},{"type":"Polygon","coordinates":[[[672.6329350000001,317.706226],[829.6329350000001,317.706226],[829.6329350000001,454.706226],[672.6329350000001,454.706226],[672.6329350000001,317.706226]]]},{"type":"Polygon","coordinates":[[[842,1818],[916,1818],[924,1798],[972,1757],[977,1695],[1425,1695],[1425,1759],[1479,1798],[1490,1818],[1561,1818],[1561,1908],[1495,1908],[1461,1948],[1425,1962],[1425,2031],[977,2031],[977,1964],[919,1926],[911,1908],[842,1908],[842,1818]]]},{"type":"Polygon","coordinates":[[[972.029785,314.502884],[1129.029785,314.502884],[1129.029785,453.502884],[972.029785,453.502884],[972.029785,314.502884]]]},{"type":"Polygon","coordinates":[[[1273.115723,314.502884],[1429.115723,314.502884],[1429.115723,453.502884],[1273.115723,453.502884],[1273.115723,314.502884]]]},{"type":"Polygon","coordinates":[[[1574.955078,317.502884],[1730.955078,317.502884],[1730.955078,456.502884],[1574.955078,456.502884],[1574.955078,317.502884]]]},{"type":"Polygon","coordinates":[[[1828,644],[2087,388],[2353,869],[1830,870],[1828,644]]]},{"type":"Polygon","coordinates":[[[1838.285156,1540.214661],[2217.285156,1540.214661],[2217.285156,1738.214661],[1838.285156,1738.214661],[1838.285156,1540.214661]]]},{"type":"Polygon","coordinates":[[[1853.099854,1388.905273],[1990.099854,1388.905273],[1990.099854,1492.905273],[1853.099854,1492.905273],[1853.099854,1388.905273]]]},{"type":"Polygon","coordinates":[[[2044.697021,1349.6035769999999],[2158.697021,1349.6035769999999],[2158.697021,1492.6035769999999],[2044.697021,1492.6035769999999],[2044.697021,1349.6035769999999]]]},{"type":"Polygon","coordinates":[[[2223.414795,1349.6035769999999],[2337.414795,1349.6035769999999],[2337.414795,1492.6035769999999],[2223.414795,1492.6035769999999],[2223.414795,1349.6035769999999]]]}],"walls":[{"type":"Polygon","coordinates":[[[-18,1192],[609,1192],[609,1213],[20,1213],[43,1432],[95,1610],[179,1795],[337,2014],[590,2217],[907,2351],[1201,2387],[1495,2351],[1812,2217],[2065,2014],[2223,1795],[2307,1610],[2335.3370786516853,1513],[1790,1513],[1790,1564],[902,1564],[902,1502],[1790,1502],[1790,1492],[2001,1492],[2001,1343],[2021,1343],[2021,1492],[2182,1492],[2182,1343],[2202,1343],[2202,1492],[2341.4719101123596,1492],[2359,1432],[2381.951965065502,1213],[1790,1213],[1790,1192],[2410,1192],[2410,1203],[2420,1203],[2419,2719],[1201,2721],[1200,2721],[-17,2719],[-18,1213],[-18,1192]]]},{"type":"Polygon","coordinates":[[[-16,902],[49,710],[116,576],[183,468],[282,350],[316,315],[343,343],[311,376],[186,531],[84,721],[25.4,892],[592,892],[592,743],[612,743],[612,892],[891,892],[891,743],[911,743],[911,892],[1212,892],[1212,913],[-16,910.4],[-16,902]]]},{"type":"Polygon","coordinates":[[[1491,743],[1511,743],[1511,902],[1491,902],[1491,743]]]},{"type":"Polygon","coordinates":[[[1791,743],[1811,743],[1811,902],[1791,902],[1791,743]]]},{"type":"Polygon","coordinates":[[[2061,343],[2088,315],[2122,350],[2221,468],[2288,576],[2356,711],[2420,902],[2380,902],[2350,802],[2288,652],[2197,503],[2093,376],[2061,343]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[59,1492],[59,1513],[901,1513],[901,1492]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[589,1199],[589,2229],[610,2229],[610,1199]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1790,1199],[1790,2229],[1811,2229],[1811,1199]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,892],[0,913],[2410,913],[2410,892]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,900],[-10,1200],[10,1200],[10,900]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[600,741.1],[600,760.1],[900,760.1],[900,741.1]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[576,1830],[576,2060],[624,2060],[624,1830]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1777,1830],[1777,2060],[1825,2060],[1825,1830]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1777,1235],[1777,1465],[1825,1465],[1825,1235]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[575,1235],[575,1465],[623,1465],[623,1235]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[634.999988,775.5615230000001],[864.999988,775.5615230000001],[864.999988,727.5615230000001],[634.999988,727.5615230000001]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1534.999988,775.5615230000001],[1764.999988,775.5615230000001],[1764.999988,727.5615230000001],[1534.999988,727.5615230000001]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[635,1526],[865,1526],[865,1478],[635,1478]]]}},{"tags":["door","iris"],"poly":{"type":"Polygon","coordinates":[[[2378,935],[2378,1165],[2426,1165],[2426,935]]]}},{"tags":["door","iris"],"poly":{"type":"Polygon","coordinates":[[[-24,935],[-24,1165],[24,1165],[24,935]]]}},{"tags":["door","iris"],"poly":{"type":"Polygon","coordinates":[[[1235.000012,927.0942380000001],[1465.000012,927.0942380000001],[1465.000012,879.0942380000001],[1235.000012,879.0942380000001]]]}},{"tags":["label","bridge"],"poly":{"type":"Polygon","coordinates":[[[1153,549],[1153,649],[1253,649],[1253,549]]]}},{"tags":["label","locker"],"poly":{"type":"Polygon","coordinates":[[[703,775],[703,875],[803,875],[803,775]]]}},{"tags":["label","locker"],"poly":{"type":"Polygon","coordinates":[[[1603,775],[1603,875],[1703,875],[1703,775]]]}},{"tags":["label","locker"],"poly":{"type":"Polygon","coordinates":[[[253,1299],[253,1399],[353,1399],[353,1299]]]}},{"tags":["label","toilet"],"poly":{"type":"Polygon","coordinates":[[[2053,1229],[2053,1329],[2153,1329],[2153,1229]]]}},{"tags":["label","briefing"],"poly":{"type":"Polygon","coordinates":[[[1153,1811],[1153,1911],[1253,1911],[1253,1811]]]}},{"tags":["label","fuel"],"poly":{"type":"Polygon","coordinates":[[[402,2499],[402,2599],[502,2599],[502,2499]]]}},{"tags":["label","fuel"],"poly":{"type":"Polygon","coordinates":[[[1893,2499],[1893,2599],[1993,2599],[1993,2499]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[1932,1899],[1932,1999],[2032,1999],[2032,1899]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[403,1899],[403,1999],[503,1999],[503,1899]]]}},{"tags":["label","cpu"],"poly":{"type":"Polygon","coordinates":[[[300,650],[300,750],[400,750],[400,650]]]}},{"tags":["label","cpu"],"poly":{"type":"Polygon","coordinates":[[[2000,650],[2000,750],[2100,750],[2100,650]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1503,741.1],[1503,761.1],[1803,761.1],[1803,741.1]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[2390,900],[2390,1200],[2410,1200],[2410,900]]]}}],"pngRect":{"x":-19,"y":-69,"width":2439,"height":2790}},"console--031--1x1.2":{"key":"console--031--1x1.2","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[-4,-4],[248,-4],[248,71.6],[373,71.6],[373,228.29999999999998],[248,228.29999999999998],[248,300],[-4,300],[-4,-4]]]}],"walls":[],"singles":[],"pngRect":{"x":-4,"y":-4,"width":377,"height":307}},"empty-room--006--2x2":{"key":"empty-room--006--2x2","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,610],[-10,610],[-10,-10]],[[10,10],[10,590],[590,590],[590,10],[10,10]]]}],"singles":[{"tags":["door","e"],"poly":{"type":"Polygon","coordinates":[[[619.9666259999999,335.000006],[579.9666259999999,335.000006],[579.9666259999999,565.000006],[619.9666259999999,565.000006]]]}},{"tags":["door","w"],"poly":{"type":"Polygon","coordinates":[[[20.966656,335.000006],[-19.033344,335.000006],[-19.033344,565.000006],[20.966656,565.000006]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,610],[10,610],[10,-10]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,610],[610,610],[610,-10]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":620}},"empty-room--013--2x3":{"key":"empty-room--013--2x3","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[10,-10],[10,890],[610,890],[610,910],[0,910],[0,900],[-10,900],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[340,-20],[340,20],[560,20],[560,-20]]]}},{"tags":["wall","n"],"poly":{"type":"Polygon","coordinates":[[[0,-10],[0,10],[590,10],[590,-10]]]}},{"tags":["wall","e"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,900],[610,900],[610,-10]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":920}},"empty-room--020--2x4":{"key":"empty-room--020--2x4","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,1210],[-10,1210],[-10,-10]],[[10,10],[10,1190],[590,1190],[590,10],[10,10]]]}],"singles":[{"tags":["door","n"],"poly":{"type":"Polygon","coordinates":[[[330,-20],[330,20],[560,20],[560,-20]]]}},{"tags":["door","s"],"poly":{"type":"Polygon","coordinates":[[[330,1180],[330,1220],[560,1220],[560,1180]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,10],[610,10],[610,-10]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,1190],[-10,1210],[610,1210],[610,1190]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":1220}},"empty-room--039--3x4":{"key":"empty-room--039--3x4","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[0,-10],[910,-10],[910,1200],[890,1200],[890,10],[0,10],[0,-10]]]}],"singles":[{"tags":["wall","w"],"poly":{"type":"Polygon","coordinates":[[[-9,0],[-9,1210],[11,1210],[11,0]]]}},{"tags":["wall","s"],"poly":{"type":"Polygon","coordinates":[[[0,1190],[0,1210],[900,1210],[900,1190]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[20,340],[-20,340],[-20,560],[20,560]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[20,630],[-20,630],[-20,850],[20,850]]]}}],"pngRect":{"x":-10,"y":-10,"width":920,"height":1220}},"fresher--020--2x2":{"key":"fresher--020--2x2","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[243,0],[358,0],[358,153],[243,153],[243,0]]]},{"type":"Polygon","coordinates":[[[402.3,0],[600,0],[600,119.5],[402.3,119.5],[402.3,0]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[590,-10],[590,10],[410,10],[410,307.1],[390,307.1],[390,10],[210,10],[210,307.1],[190,307.1],[190,10],[10,10],[10,590],[600,590],[600,610],[0,610],[0,600],[-10,600],[-10,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,600],[610,600],[610,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[624,339.999994],[576,339.999994],[576,559.999994],[624,559.999994]]]}},{"tags":["label","bathroom"],"poly":{"type":"Polygon","coordinates":[[[251.9,388.2],[251.9,488.2],[351.9,488.2],[351.9,388.2]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":620}},"fresher--025--2x3":{"key":"fresher--025--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[300,0],[300,119.5],[0,119.5],[0,0]]]},{"type":"Polygon","coordinates":[[[342.5,0],[457.5,0],[457.5,153],[342.5,153],[342.5,0]]]},{"type":"Polygon","coordinates":[[[542.5,0],[657.5,0],[657.5,153],[542.5,153],[542.5,0]]]},{"type":"Polygon","coordinates":[[[742.5,0],[857.5,0],[857.5,153],[742.5,153],[742.5,0]]]}],"walls":[{"type":"Polygon","coordinates":[[[0,-10],[910,-10],[910,600],[900,600],[900,610],[0,610],[0,590],[890,590],[890,10],[710,10],[710,307.1],[690,307.1],[690,10],[510,10],[510,307.1],[490,307.1],[490,10],[310,10],[310,307.1],[290,307.1],[290,10],[0,10],[0,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,600],[10,600],[10,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[24,339.999994],[-24,339.999994],[-24,559.999994],[24,559.999994]]]}},{"tags":["label","toilet"],"poly":{"type":"Polygon","coordinates":[[[251.9,388.2],[251.9,488.2],[351.9,488.2],[351.9,388.2]]]}}],"pngRect":{"x":-10,"y":-10,"width":920,"height":620}},"fuel--010--2x4":{"key":"fuel--010--2x4","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-19,-19.5],[1219,-19.5],[1219,619.5],[-19,619.5],[-19,-19.5]]]}],"singles":[{"tags":["label","fuel"],"poly":{"type":"Polygon","coordinates":[[[550,90],[550,190],[650,190],[650,90]]]}}],"pngRect":{"x":-19,"y":-19.6,"width":1238,"height":639}},"iris-valves--005--1x1":{"key":"iris-valves--005--1x1","hull":[],"obstacles":[],"walls":[],"singles":[],"pngRect":{"x":0,"y":40,"width":221,"height":220}},"lifeboat--small-craft":{"key":"lifeboat--small-craft","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[33,555.8],[353,555.8],[353,691.6999999999999],[33,691.6999999999999],[33,555.8]]]},{"type":"Polygon","coordinates":[[[33,735.8],[520.2,735.8],[520.2,871.6999999999999],[33,871.6999999999999],[33,735.8]]]},{"type":"Polygon","coordinates":[[[34,375.8],[353,375.8],[353,508],[34,508],[34,375.8]]]},{"type":"Polygon","coordinates":[[[109,164],[263.9,164],[263.9,302],[109,302],[109,164]]]},{"type":"Polygon","coordinates":[[[342.9,167.8],[493.9,167.8],[493.9,300],[342.9,300],[342.9,167.8]]]}],"walls":[{"type":"Polygon","coordinates":[[[-20,300],[0,185.5],[58.8,87],[125.7,29.1],[219.4,-12.2],[300,-20.1],[386.7,-11.9],[504,53.5],[578.8,145.6],[620.2,300],[582.4,300],[551.7,181],[486.1,86.3],[371.9,25.4],[230.9,27],[109.8,87.9],[47.6,181],[20,300],[20,880],[620,880],[620,1220],[-15,1220],[-20,910],[-20,300]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[620,340.900024],[580,340.900024],[580,560.900024],[620,560.900024]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,300],[590,900],[610,900],[610,300]]]}},{"tags":["label","escape","pod"],"poly":{"type":"Polygon","coordinates":[[[255.7,1016.1],[255.7,1107],[346.6,1107],[346.6,1016.1]]]}},{"tags":["machine-base"],"poly":{"type":"Polygon","coordinates":[[[0,300],[78.1,99.3],[520.9,96.6],[600,300],[600,900],[0,900],[0,300],[0,300]]]}}],"pngRect":{"x":-20,"y":-20,"width":640,"height":1238}},"lounge--009--2x3":{"key":"lounge--009--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[9.2,0],[123,0],[123,600],[9.2,600],[9.2,0]]]},{"type":"Polygon","coordinates":[[[323.2,324.8],[574.2,324.8],[574.2,579.8],[323.2,579.8],[323.2,324.8]]]},{"type":"Polygon","coordinates":[[[612.8,324.8],[882.1999999999999,324.8],[882.1999999999999,579.8],[612.8,579.8],[612.8,324.8]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[600,-10],[600,10],[10,10],[10,590],[900,590],[900,610],[-10,610],[-10,-10]]]}],"singles":[],"pngRect":{"x":-10,"y":-10,"width":920,"height":620}},"lounge--015--2x4":{"key":"lounge--015--2x4","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[9.2,51.4],[112.5,51.4],[112.5,190],[9.2,190],[9.2,51.4]]]},{"type":"Polygon","coordinates":[[[9.2,251.8],[152.79999999999998,251.8],[152.79999999999998,363.5],[9.2,363.5],[9.2,251.8]]]},{"type":"Polygon","coordinates":[[[9.2,446.8],[152.79999999999998,446.8],[152.79999999999998,558.5],[9.2,558.5],[9.2,446.8]]]},{"type":"Polygon","coordinates":[[[300,300],[423.3,300],[423.3,600],[300,600],[300,300]]]},{"type":"Polygon","coordinates":[[[612.8,413.5],[1185.4,413.5],[1185.4,550],[612.8,550],[612.8,413.5]]]},{"type":"Polygon","coordinates":[[[684.8,72.7],[830.5,19.7],[967.6,19.7],[1113.3,72.7],[1175.9,114.1],[1175.9,197.5],[1067.9,197.5],[1067.2,199.5],[921.5,146.4],[876.7,146.4],[730.9,199.5],[684.8,72.7]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[310,-10],[310,10],[10,10],[10,200],[160,200],[160,220],[10,220],[10,395],[160,395],[160,415],[10,415],[10,590],[290,590],[290,300],[310,300],[310,590],[1190,590],[1190,-10],[1210,-10],[1210,610],[-10,610],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[275,35],[275,265],[323,265],[323,35]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[290,0],[290,610],[310,610],[310,0]]]}}],"pngRect":{"x":-10,"y":-10,"width":1220,"height":620}},"machinery--091--1.6x1.8":{"key":"machinery--091--1.6x1.8","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[-10,550],[0,174.4],[27.9,103.9],[93.6,35.3],[180.3,0],[300,0],[381.6,30.1],[457.8,113.9],[480,173.3],[490,550],[-10,550]]]}],"walls":[],"singles":[],"pngRect":{"x":-10,"y":-10,"width":500,"height":559}},"machinery--155--1.8x3.6":{"key":"machinery--155--1.8x3.6","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[10,0],[530,0],[530,1080],[10,1080],[10,0]]]}],"walls":[],"singles":[],"pngRect":{"x":10,"y":-10,"width":520,"height":1100}},"machinery--156--1.8x3.6":{"key":"machinery--156--1.8x3.6","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[540,0],[540,1080],[0,1080],[0,0]]]}],"walls":[],"singles":[],"pngRect":{"x":-10,"y":-10,"width":560,"height":1100}},"machinery--158--1.8x3.6":{"key":"machinery--158--1.8x3.6","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[540,0],[540,1080],[0,1080],[0,0]]]}],"walls":[],"singles":[],"pngRect":{"x":-10,"y":-10,"width":560,"height":1100}},"machinery--357--2.2x4":{"key":"machinery--357--2.2x4","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-9,-10],[1211,-10],[1211,610],[-9,610],[-9,-10]]]}],"singles":[],"pngRect":{"x":-10,"y":-72.5,"width":1220,"height":683}},"medical--007--2x3":{"key":"medical--007--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,450.3],[99.3,450.3],[99.3,340.3],[201.5,340.3],[201.5,450.3],[300,450.3],[300,600],[0,600],[0,450.3]]]},{"type":"Polygon","coordinates":[[[347,163.6],[548.3,163.6],[548.3,600],[347,600],[347,163.6]]]},{"type":"Polygon","coordinates":[[[650,163.6],[900,163.6],[900,600],[650,600],[650,163.6]]]}],"walls":[{"type":"Polygon","coordinates":[[[0,590],[890,590],[890,-10],[910,-10],[910,610],[0,610],[0,590]]]}],"singles":[{"tags":["door","w"],"poly":{"type":"Polygon","coordinates":[[[20,40.900024],[-20,40.900024],[-20,260.900024],[20,260.900024]]]}},{"tags":["door","n"],"poly":{"type":"Polygon","coordinates":[[[40,-20],[40,20],[260,20],[260,-20]]]}},{"tags":["label","medical"],"poly":{"type":"Polygon","coordinates":[[[209.1,209.1],[209.1,300],[300,300],[300,209.1]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,600],[10,600],[10,-10]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,-10],[0,10],[900,10],[900,-10]]]}}],"pngRect":{"x":-10,"y":-10,"width":920,"height":620}},"medical--008--2x3":{"key":"medical--008--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,300],[114.9,300],[114.9,378.6],[203.3,290.2],[311.8,398.7],[220.7,489.7],[300,489.7],[300,600],[0,600],[0,300]]]},{"type":"Polygon","coordinates":[[[553.3,0],[900,0],[900,600],[553.3,600],[553.3,0]]]}],"walls":[{"type":"Polygon","coordinates":[[[0,590],[890,590],[890,-10],[910,-10],[910,610],[0,610],[0,590]]]}],"singles":[{"tags":["door","w"],"poly":{"type":"Polygon","coordinates":[[[20,40.900024],[-20,40.900024],[-20,260.900024],[20,260.900024]]]}},{"tags":["door","n"],"poly":{"type":"Polygon","coordinates":[[[40,-20],[40,20],[260,20],[260,-20]]]}},{"tags":["label","medical"],"poly":{"type":"Polygon","coordinates":[[[300,209.1],[300,300],[390.9,300],[390.9,209.1]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,600],[10,600],[10,-10]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,-10],[0,10],[900,10],[900,-10]]]}}],"pngRect":{"x":-10,"y":-10,"width":920,"height":620}},"misc-stellar-cartography--023--4x4":{"key":"misc-stellar-cartography--023--4x4","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[79.897765,457.98358600000006],[900.443425,-0.1324840000000025],[936.547179,53.73328799999999],[675.414979,312.5962880000001],[556.823025,299.9094160000001],[420.24017100000003,355.60624400000006],[328.73044100000004,472.20805400000006],[300.266479,610.192888],[328.80805900000007,732.934028],[430.116623,845.77723],[556.928709,899.7003780000001],[698.8208070000001,885.9655920000001],[823.778365,804.3100860000001],[882.2928150000001,704.1798360000001],[900.3306590000001,561.5802280000001],[889.199639,521.0697180000001],[1149.6034650000001,263.41893600000003],[1199.533285,314.86809600000004],[899.830545,968.797426],[441.58283100000006,1123.245374],[126.476567,822.5442720000001],[79.897765,457.98358600000006]]]},{"type":"Polygon","coordinates":[[[328.2539924,609.3540977999999],[366.0422088,457.7938625999998],[499.5549384000001,491.0823297999998],[461.7667220000001,642.6425649999999],[328.2539924,609.3540977999999]]]},{"type":"Polygon","coordinates":[[[556.5536892,741.5258476],[708.1139244000001,703.7376312],[741.2572384000001,836.6681832],[589.6970032,874.4563996],[556.5536892,741.5258476]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[905.3,-10],[1210,295],[1210,1210],[-10,1210],[-10,-10]],[[10,10],[10,1190],[1190,1190],[1190,302.9],[897.2,10],[10,10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[931.09596069,65.06971789800002],[1136.15699069,270.1307478980001],[1170.09812669,236.18961189800007],[965.03709669,31.128581897999993]]]}},{"tags":["label","stellar","cartography"],"poly":{"type":"Polygon","coordinates":[[[384,240],[384,340],[484,340],[484,240]]]}}],"pngRect":{"x":-10,"y":-10,"width":1220,"height":1220}},"office--001--2x2":{"key":"office--001--2x2","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[71.191702,299.97373300000004],[74.79170200000002,71.873733],[599.991702,69.073733],[599.991702,147.37373300000002],[299.99170200000003,147.37373300000002],[150.29170200000002,299.97373300000004],[148.79170200000002,589.973733],[73.29170200000002,590.5737330000001],[71.191702,299.97373300000004]]]},{"type":"Polygon","coordinates":[[[213.4,318.2],[318.9,211.2],[417.4,307.4],[307.3,417.3],[213.4,318.2]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,610],[-10,610],[-10,-10]],[[10,10],[10,590],[590,590],[590,10],[10,10]]]}],"singles":[{"tags":["door","e"],"poly":{"type":"Polygon","coordinates":[[[575,300],[575,575],[623,575],[623,300]]]}},{"tags":["door","s"],"poly":{"type":"Polygon","coordinates":[[[330,575],[330,623],[560,623],[560,575]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,590],[0,610],[610,610],[610,590]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,610],[610,610],[610,-10]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[70,40],[70,140],[170,140],[170,40]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":620}},"office--006--2x2":{"key":"office--006--2x2","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[9.2,140.6],[591.4000000000001,140.6],[591.4000000000001,214],[9.2,214],[9.2,140.6]]]},{"type":"Polygon","coordinates":[[[70.3,226.5],[227.60000000000002,226.5],[227.60000000000002,365.1],[70.3,365.1],[70.3,226.5]]]},{"type":"Polygon","coordinates":[[[370.3,226.5],[527.6,226.5],[527.6,365.1],[370.3,365.1],[370.3,226.5]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[10,-10],[10,0],[590,0],[590,-10],[610,-10],[610,610],[-10,610],[-10,-10]],[[10,61.5],[10,590],[590,590],[590,61.5],[10,61.5]]]}],"singles":[{"tags":["window"],"poly":{"type":"Polygon","coordinates":[[[10,0],[10,61.5],[590,61.5],[590,0]]]}},{"tags":["door","e"],"poly":{"type":"Polygon","coordinates":[[[575,330],[575,560],[623,560],[623,330]]]}},{"tags":["door","s"],"poly":{"type":"Polygon","coordinates":[[[185,575],[185,623],[415,623],[415,575]]]}},{"tags":["door","w"],"poly":{"type":"Polygon","coordinates":[[[-24,330],[-24,560],[24,560],[24,330]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,590],[0,610],[610,610],[610,590]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,0],[590,610],[610,610],[610,0]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,0],[-10,610],[10,610],[10,0]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":620}},"office--020--2x3":{"key":"office--020--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[600,0],[600,148.8],[451,148.8],[451,300.5],[300,300.5],[300,148.8],[149.8,148.8],[149.8,751.2],[300,751.2],[300,599.5],[451,599.5],[451,751.2],[600,751.2],[600,900],[0,900],[0,0]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,10],[10,10],[10,890],[610,890],[610,910],[-10,910],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[620,340.900024],[580,340.900024],[580,560.900024],[620,560.900024]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,910],[610,910],[610,-10]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[300,399.9],[300,490.79999999999995],[390.9,490.79999999999995],[390.9,399.9]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":920}},"office--023--2x3":{"key":"office--023--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[55.9,50.2],[549.2,50.2],[549.2,247.2],[55.9,247.2],[55.9,50.2]]]},{"type":"Polygon","coordinates":[[[335.4,400.2],[433.2,400.2],[433.2,501.1],[335.4,501.1],[335.4,400.2]]]},{"type":"Polygon","coordinates":[[[335.4,700.2],[433.2,700.2],[433.2,801.1],[335.4,801.1],[335.4,700.2]]]},{"type":"Polygon","coordinates":[[[448,300],[600,300],[600,900],[448,900],[448,300]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,900],[590,900],[590,10],[10,10],[10,900],[-10,900],[-10,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,890],[0,910],[600,910],[600,890]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[40,880],[40,920],[260,920],[260,880]]]}},{"tags":["label","cpu"],"poly":{"type":"Polygon","coordinates":[[[250,100],[250,190.9],[340.9,190.9],[340.9,100]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[164.2,550],[164.2,640.9],[255.1,640.9],[255.1,550]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":934}},"office--025--2x3":{"key":"office--025--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[49.4,50.6],[549.7,50.6],[549.7,251],[49.4,251],[49.4,50.6]]]},{"type":"Polygon","coordinates":[[[237.3,523.9],[388.3,523.9],[388.3,300],[600,300],[600,900],[388.3,900],[388.3,675.5999999999999],[237.3,675.5999999999999],[237.3,523.9]]]}],"walls":[{"type":"Polygon","coordinates":[[[0,-10],[610,-10],[610,910],[0,910],[0,890],[590,890],[590,10],[0,10],[0,-10]]]}],"singles":[{"tags":["door","w"],"poly":{"type":"Polygon","coordinates":[[[20,640.900024],[-20,640.900024],[-20,860.900024],[20,860.900024]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[186.8,356.5],[186.8,447.4],[277.70000000000005,447.4],[277.70000000000005,356.5]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,910],[10,910],[10,-10]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":920}},"office--026--2x3":{"key":"office--026--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[211.7,0],[211.7,222.9],[362.7,222.9],[362.7,374.6],[211.7,374.6],[211.7,600],[0,600],[0,0]]]},{"type":"Polygon","coordinates":[[[49.4,650.6],[549.7,650.6],[549.7,851],[49.4,851],[49.4,650.6]]]}],"walls":[{"type":"Polygon","coordinates":[[[-34,147],[-10,147],[-10,-10],[610,-10],[610,10],[10,10],[10,147],[33,147],[33,454],[10,454],[10,890],[610,890],[610,910],[-10,910],[-10,454],[-34,454],[-34,147]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[620,40.900024],[580,40.900024],[580,260.900024],[620,260.900024]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,910],[610,910],[610,-10]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[390.9,40.9],[390.9,131.8],[481.79999999999995,131.8],[481.79999999999995,40.9]]]}},{"tags":["label","cpu"],"poly":{"type":"Polygon","coordinates":[[[300,699.9],[300,790.8],[390.9,790.8],[390.9,699.9]]]}}],"pngRect":{"x":-34,"y":-10,"width":644,"height":920}},"office--061--3x4":{"key":"office--061--3x4","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[900,0],[900,1202.2],[0,1202.2],[0,1047.5],[161.6,1047.5],[161.6,928.7],[318.4,928.7],[318.4,1047.5],[748,1047.5],[748,902.9],[627.6,902.9],[627.6,750],[748,750],[748,452.9],[627.6,452.9],[627.6,300],[748,300],[748,154.7],[318.4,154.7],[318.4,273.5],[161.6,273.5],[161.6,154.7],[0,154.7],[0,0]]]}],"walls":[{"type":"Polygon","coordinates":[[[0,-10],[910,-10],[910,1200],[900,1200],[900,1210],[0,1210],[0,1190],[890,1190],[890,10],[0,10],[0,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,1200],[10,1200],[10,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[20,640.900024],[-20,640.900024],[-20,860.900024],[20,860.900024]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[20,340.900024],[-20,340.900024],[-20,560.900024],[20,560.900024]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[350,550],[350,640.9],[440.9,640.9],[440.9,550]]]}}],"pngRect":{"x":-10,"y":-10,"width":920,"height":1220}},"sensors--003--1x1.4":{"key":"sensors--003--1x1.4","hull":[],"obstacles":[],"walls":[],"singles":[],"pngRect":{"x":88.5,"y":-10,"width":423,"height":319}},"ships-locker--011--1x2":{"key":"ships-locker--011--1x2","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,300],[590,300],[590,10],[10,10],[10,300],[-10,300],[-10,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,10],[610,10],[610,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[50,-21],[50,19],[250,19],[250,-21]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[350,-21],[350,19],[550,19],[550,-21]]]}}],"pngRect":{"x":-10,"y":-20,"width":620,"height":334}},"shop--027--0.4x1.6":{"key":"shop--027--0.4x1.6","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[56.5,110],[543.5,110],[543.5,238],[56.5,238],[56.5,110]]]}],"walls":[],"singles":[],"pngRect":{"x":56.5,"y":110,"width":487,"height":128}},"shop--028--0.8x1.6":{"key":"shop--028--0.8x1.6","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[57.5,33],[542.5,33],[542.5,267],[57.5,267],[57.5,33]]]}],"singles":[],"pngRect":{"x":57.5,"y":33,"width":485,"height":234}},"stateroom--014--2x2":{"key":"stateroom--014--2x2","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[49.6,118.7],[248.4,118.7],[248.4,494.5],[49.6,494.5],[49.6,118.7]]]},{"type":"Polygon","coordinates":[[[397.3,8],[502.6,8],[502.6,177.8],[397.3,177.8],[397.3,8]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,610],[590,610],[590,10],[310,10],[310,310],[290,310],[290,10],[10,10],[10,610],[-10,610],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[330,578],[330,626],[560,626],[560,578]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[330,275],[330,323],[560,323],[560,275]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,590],[0,610],[590,610],[590,590]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[300,290],[300,310],[600,310],[600,290]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[400,400],[400,500],[500,500],[500,400]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":620}},"stateroom--018--2x3":{"key":"stateroom--018--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,8],[148.9,8],[148.9,54.6],[499.1,54.6],[499.1,250.9],[148.9,250.9],[148.9,654.6],[499.1,654.6],[499.1,850.9000000000001],[148.9,850.9000000000001],[148.9,900],[0,900],[0,8]]]},{"type":"Polygon","coordinates":[[[165.9,399.2],[261.8,399.2],[261.8,501.1],[165.9,501.1],[165.9,399.2]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[590,-10],[590,10],[10,10],[10,890],[590,890],[590,910],[0,910],[0,900],[-10,900],[-10,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,900],[610,900],[610,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[624,329.999988],[576,329.999988],[576,569.999988],[624,569.999988]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[360,400],[360,500],[460,500],[460,400]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":920}},"stateroom--019--2x3":{"key":"stateroom--019--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[300,0],[300,152.2],[0,152.2],[0,0]]]},{"type":"Polygon","coordinates":[[[0,600],[120.4,600],[120.4,654.6],[499.1,654.6],[499.1,850.9000000000001],[120.4,850.9000000000001],[120.4,900],[0,900],[0,600]]]},{"type":"Polygon","coordinates":[[[98.1,170],[201.5,170],[201.5,260.4],[98.1,260.4],[98.1,170]]]},{"type":"Polygon","coordinates":[[[384.20947709999996,105.00264549999997],[479.38607929999995,9.826043300000038],[586.4420791,116.88204310000003],[491.26547689999995,212.05864530000008],[384.20947709999996,105.00264549999997]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[590,-10],[590,10],[10,10],[10,890],[590,890],[590,910],[0,910],[0,900],[-10,900],[-10,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,900],[610,900],[610,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[624,329.999988],[576,329.999988],[576,569.999988],[624,569.999988]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[250,400],[250,500],[350,500],[350,400]]]}}],"pngRect":{"x":-10,"y":-10,"width":633,"height":920}},"stateroom--020--2x3":{"key":"stateroom--020--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[300,0],[300,118.7],[248.4,118.7],[248.4,494.5],[49.6,494.5],[49.6,118.7],[0,118.7],[0,0]]]},{"type":"Polygon","coordinates":[[[0,600],[150,600],[150,900],[0,900],[0,600]]]},{"type":"Polygon","coordinates":[[[167.9,699.5],[260.5,699.5],[260.5,803.3],[167.9,803.3],[167.9,699.5]]]},{"type":"Polygon","coordinates":[[[402.2,93.1],[532,45.8],[585.5,193],[575.6,196.6],[575.6,325],[585.5,328.6],[532,475.7],[402.2,428.5],[455.8,281.3],[490.8,294.1],[490.8,227.5],[455.8,240.2],[402.2,93.1]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[590,-10],[590,10],[10,10],[10,890],[590,890],[590,910],[0,910],[0,900],[-10,900],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[624,639.999994],[576,639.999994],[576,859.999994],[624,859.999994]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,900],[610,900],[610,-10]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[405.7,677.3],[405.7,777.3],[505.7,777.3],[505.7,677.3]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":920}},"stateroom--036--2x4":{"key":"stateroom--036--2x4","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[23.933027999999922,1070.1521070000001],[154.5400249999999,994.370794],[231.82692699999984,1127.572632],[101.21992999999986,1203.353945],[23.933027999999922,1070.1521070000001]]]},{"type":"Polygon","coordinates":[[[24.744736999999986,920.022105],[101.74779100000012,790.131603],[218.73526299999992,859.485347],[141.7322089999999,989.375849],[24.744736999999986,920.022105]]]},{"type":"Polygon","coordinates":[[[37,340],[300,340],[300,759],[37,759],[37,340]]]},{"type":"Polygon","coordinates":[[[241,10],[359,10],[359,156],[241,156],[241,10]]]},{"type":"Polygon","coordinates":[[[411,10],[548,10],[548,113],[411,113],[411,10]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,1210],[590,1210],[590,10],[10,10],[10,1210],[-10,1210],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[340,276],[340,324],[560,324],[560,276]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[330,1176],[330,1224],[560,1224],[560,1176]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,290],[0,310],[600,310],[600,290]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,1190],[0,1210],[600,1210],[600,1190]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[340,900],[340,1000],[440,1000],[440,900]]]}},{"tags":["label","bathroom"],"poly":{"type":"Polygon","coordinates":[[[142.8,114.8],[142.8,214.8],[242.8,214.8],[242.8,114.8]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":1220}},"weaponry--013--1x2":{"key":"weaponry--013--1x2","hull":[],"obstacles":[],"walls":[],"singles":[],"pngRect":{"x":25,"y":195,"width":852,"height":417}},"window--007--0x2.4":{"key":"window--007--0x2.4","hull":[],"obstacles":[],"walls":[],"singles":[],"pngRect":{"x":-4,"y":-4,"width":907,"height":67}}}');function ho(o,t){var n=Object.keys(o);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(o);t&&(e=e.filter((function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable}))),n.push.apply(n,e)}return n}function uo(o){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ho(Object(n),!0).forEach((function(t){(0,b.Z)(o,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(o,Object.getOwnPropertyDescriptors(n)):ho(Object(n)).forEach((function(t){Object.defineProperty(o,t,Object.getOwnPropertyDescriptor(n,t))}))}return o}function fo(o){var t=o.def,n=o.transform,e=(0,R.useQuery)("layout-".concat(t.key),(function(){return function(o){return xo.apply(this,arguments)}(t)})).data;return e?(0,g.BX)("g",{className:K()("geomorph",t.key),transform:n,children:[(0,g.tZ)("image",{className:"geomorph",href:e.dataUrl,x:e.pngRect.x*wo,y:e.pngRect.y*wo}),(0,g.tZ)("g",{className:"doors",children:e.doors.map((function(o){return(0,g.tZ)("polygon",{points:"".concat(o.outline)})}))}),(0,g.tZ)(mo,{gm:e}),(0,g.tZ)("image",{className:"debug",href:e.pngHref,x:e.pngRect.x,y:e.pngRect.y})]}):null}function mo(o){var t=o.gm;return(0,g.tZ)("foreignObject",uo(uo({className:"labels"},t.pngRect),{},{xmlns:"http://www.w3.org/1999/xhtml",children:(0,g.tZ)("div",{onClick:function(o){var t=o.target;console.log("you clicked",t)},children:t.labels.map((function(o){var n=o.text,e=o.padded;return(0,g.tZ)("div",{className:"label",style:{left:e.x-t.pngRect.x,top:e.y-t.pngRect.y},children:n})}))})}))}function xo(){return(xo=(0,P.Z)(Z().mark((function o(t){var n,e,r;return Z().wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return n=so(go),e=to(t,n),r=document.createElement("canvas"),o.next=5,co(e,n,r,(function(o){return(0,p.po)(o)}),{scale:wo,navTris:!1});case 5:return o.abrupt("return",{dataUrl:r.toDataURL(),pngRect:e.items[0].pngRect,doors:eo(e.groups.singles,"door"),pngHref:e.items[0].pngHref,labels:e.labels});case 6:case"end":return o.stop()}}),o)})))).apply(this,arguments)}var vo,wo=2,bo=new y.UL(0,0,1200,600),Po=new y.UL(-5e3,-5e3,10001,10001),ko=(0,l.iv)(po||(po=(0,a.Z)(["\n  height: 100%;\n  g > image.debug {\n    opacity: 0.2;\n  }\n  g > image.geomorph {\n    transform: scale(",");\n    pointer-events: none;\n  }\n  g > .doors polygon {\n    fill: white;\n    stroke: black;\n  }\n  g > .labels {\n    font: ",";\n    pointer-events: none;\n    div.label {\n      background: black;\n      color: white;\n      position: absolute;\n      padding: ","px ","px;\n      cursor: pointer;\n      pointer-events: auto;\n      user-select: none; /** TODO better way? */\n    }\n    circle {\n      fill: red;\n    }\n  }\n"])),1/wo,no.font,no.padY,no.padX);var Zo=(0,l.iv)(vo||(vo=(0,a.Z)(["\n  overflow-x: scroll;\n  overflow-y: scroll;\n  height: 100%;\n  img {\n    animation: fadein 2s;\n  }\n\n  @keyframes fadein {\n    from { opacity: 0; }\n    to   { opacity: 1; }\n  }\n"]))),Ro={"panzoom/PanZoom.jsx":"import * as React from 'react';\nimport { css } from 'goober';\nimport { Vect } from '../geom';\nimport { getSvgPos, getSvgMid, canTouchDevice, projectSvgEvt } from '../service';\n\n/** @param {React.PropsWithChildren<Props>} props */\nexport default function PanZoom(props) {\n\n  const [state] = React.useState(() => {\n    const viewBox = props.initViewBox.clone();\n    const minZoom = props.minZoom || 0.5;\n    const maxZoom = props.maxZoom || 2;\n    return {\n      viewBox,\n      /** @type {null | Vect} */\n      panFrom: null,\n      zoom: props.initZoom || 1,\n      /** @type {import('../service').SvgPtr[]} */\n      ptrs: [],\n      /** @type {null | number} */\n      ptrDiff: null,\n      /**\n       * @param {DOMPoint} point \n       * @param {number} delta \n       */\n      zoomTo: (point, delta) => {\n        const zoom = Math.min(Math.max(state.zoom + delta, minZoom), maxZoom);\n        viewBox.x = (state.zoom / zoom) * (viewBox.x - point.x) + point.x;\n        viewBox.y = (state.zoom / zoom) * (viewBox.y - point.y) + point.y;\n        viewBox.width = (1 / zoom) * props.initViewBox.width;\n        viewBox.height = (1 / zoom) * props.initViewBox.height;\n        state.zoom = zoom;\n      },\n      /** @param {WheelEvent} e */\n      onWheel: e => {\n        e.preventDefault();\n        if ('ownerSVGElement' in (e.target || {})) {\n          const point = getSvgPos(projectSvgEvt(e));\n          state.zoomTo(point, -0.003 * e.deltaY);\n          state.root.setAttribute('viewBox', `${state.viewBox}`);\n        }\n      },\n      /** @param {PointerEvent} e */\n      onPointerDown: e => {\n        if ('ownerSVGElement' in (e.target ||{})) {\n          state.panFrom = (new Vect).copy(getSvgPos(projectSvgEvt(e)));\n          state.ptrs.push(projectSvgEvt(e));\n        }\n      },\n      /** @param {PointerEvent} e */\n      onPointerMove: e => {\n        state.ptrs = state.ptrs.map(x => x.pointerId === e.pointerId ? projectSvgEvt(e) : x);\n\n        if (state.ptrs.length === 2) {\n          const ptrDiff = Math.abs(state.ptrs[1].clientX - state.ptrs[0].clientX);\n          if (state.ptrDiff !== null) {\n            const point = getSvgMid(state.ptrs);\n            state.zoomTo(point, 0.02 * (ptrDiff - state.ptrDiff));\n            state.root.setAttribute('viewBox', `${state.viewBox}`);\n          }          \n          state.ptrDiff = ptrDiff;\n        } else if (state.panFrom) {\n          const mouse = getSvgPos(projectSvgEvt(e));\n          viewBox.delta(state.panFrom.x - mouse.x, state.panFrom.y - mouse.y);\n          state.root.setAttribute('viewBox', `${state.viewBox}`);\n        }\n      },\n      /** @param {PointerEvent} e */\n      onPointerUp: (e) => {\n        state.panFrom = null;\n        state.ptrs = state.ptrs.filter(alt => e.pointerId !== alt.pointerId);\n        if (state.ptrs.length < 2) {\n          state.ptrDiff = null;\n        }\n      },\n      /** @type {(el: null | SVGSVGElement) => void} */\n      rootRef: el => {\n        if (el) {\n          state.root = el;\n          el.addEventListener('wheel', state.onWheel, { passive: false });\n          el.addEventListener('pointerdown', state.onPointerDown, { passive: true });\n          el.addEventListener('pointermove', state.onPointerMove, { passive: true });\n          el.addEventListener('pointerup', state.onPointerUp, { passive: true });\n          el.addEventListener('pointercancel', state.onPointerUp, { passive: true });\n          el.addEventListener('pointerleave', state.onPointerUp, { passive: true });\n          el.addEventListener('touchstart', e => e.preventDefault(), { passive: false });\n        }\n      },\n      /** @type {SVGSVGElement} */\n      root: ({}),\n      rootCss: css`\n        width: 100%;\n        height: 100%;\n        touch-action: pan-x pan-y pinch-zoom;\n        > g.content {\n          shape-rendering: ${canTouchDevice ? 'optimizeSpeed' : 'auto'};\n        }\n        > .grid {\n          pointer-events: none;\n        }\n      `,\n    };\n  });\n\n  return (\n    <svg\n      ref={state.rootRef}\n      className={state.rootCss}\n      preserveAspectRatio=\"xMinYMin\"\n      viewBox={`${state.viewBox}`}\n    >\n      <g className=\"content\">\n        {props.children}\n      </g>\n      <Grid bounds={props.gridBounds} />\n    </svg>\n  );\n}\n\n/**\n * @typedef Props @type {object}\n * @property {Geom.Rect} gridBounds World bounds\n * @property {Geom.Rect} initViewBox Initial viewbox in world coords\n * @property {number} [minZoom] Minimum zoom factor (default 0.5)\n * @property {number} [maxZoom] Maximum zoom factor (default 2)\n * @property {number} [initZoom] Initial zoom factor (default 1)\n */\n\n/** @param {{ bounds: Geom.Rect }} props */\nfunction Grid(props) {\n  const uid = React.useMemo(() => gridPatternCount++, []);\n\n  return <>\n    {[10, 60].flatMap(dim => [\n      <defs>\n        <pattern\n          id={`pattern-grid-${dim}x${dim}--${uid}`}\n          width={dim}\n          height={dim}\n          patternUnits=\"userSpaceOnUse\"\n        >\n          <path\n            d={`M ${dim} 0 L 0 0 0 ${dim}`}\n            fill=\"none\"\n            stroke=\"rgba(0,0,0,0.5)\"\n            strokeWidth=\"0.3\"\n          />\n        </pattern>\n      </defs>,\n      <rect\n        className=\"grid\"\n        x={props.bounds.x}\n        y={props.bounds.y}\n        width={props.bounds.width}\n        height={props.bounds.height}\n        fill={`url(#pattern-grid-${dim}x${dim}--${uid})`}\n      />\n    ])}\n  </>;\n}\n\nlet gridPatternCount = 0;","panzoom/PanZoomDemo.jsx":"import * as React from 'react';\nimport { css } from 'goober';\nimport PanZoom from './PanZoom';\nimport { Rect } from '../geom';\n\nexport default function PanZoomDemo() {\n  return (\n    <div className={rootCss}>\n      <p>\n        drag to <strong>pan</strong>, scroll/pinch to <strong>zoom</strong>\n      </p>\n      <PanZoom initViewBox={initViewBox} gridBounds={gridBounds} maxZoom={5}>\n        <image\n          href=\"/geomorph/g-301--bridge.debug.png\"\n          x={pngRect.x * 2}\n          y={pngRect.y * 2}\n          style={{ transform: \"scale(0.5)\" }}\n        />\n        {/* <rect fill=\"red\" x={0} y={0} width={20} height={20} /> */}\n      </PanZoom>\n    </div>\n  );\n}\n\nconst pngRect = new Rect(-6, -22, 1212, 628);\nconst gridBounds = new Rect(-5000, -5000, 10000 + 1, 10000 + 1);\nconst initViewBox = pngRect.clone().outset(50);\n\nconst rootCss = css`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  > p {\n    padding: 12px 8px;\n    margin: 0;\n    font-family: monospace;\n    font-size: 16px;\n    background: var(--focus-bg);\n  }\n`;","nav/NavDemo.jsx":'import React, { useEffect, useState, useMemo, useRef } from "react";\nimport { css } from "goober";\nimport { useQuery } from "react-query";\n\nimport { Poly, Rect, Vect } from "../geom";\nimport { getSvgPos, geom, projectSvgEvt } from "../service";\nimport { Pathfinding } from \'../pathfinding/Pathfinding\';\nimport PanZoom from "../panzoom/PanZoom";\n\n/**\n * TODO find an interface permitting possibly many\n * navpaths, and enable/disable navnodes\n */\n\nexport default function NavDemo() {\n\n  const [dots, setDots] = useState(/** @type {Geom.VectJson[]} */ ([]));\n  const [path, setPath] = useState(/** @type {Geom.Vect[]} */ ([]));\n  const pathfinding = useMemo(() => new Pathfinding, []);\n  const zoneKey = \'myZone\';\n  const lastDownAt = useRef(0);\n\n  const { data } = useQuery(\'navpoly-demo\', async () => {\n    /** @type {Geomorph.GeomorphJson} */\n    const json = await fetch(\'/geomorph/g-301--bridge.json\').then(x => x.json());\n    const navPoly = json.navPoly.map(x => Poly.from(x));\n    const decomp = geom.polysToTriangulation(navPoly);\n    const zone = Pathfinding.createZone(decomp);\n    pathfinding.setZoneData(zoneKey, zone);\n    return { pngRect: json.pngRect, navPoly, zone };\n  });\n\n  useEffect(() => {\n    if (dots.length === 2) {\n      const groupId = pathfinding.getGroup(zoneKey, dots[0]);\n      if (groupId !== null) {\n        setPath(\n          [dots[0]].concat(pathfinding.findPath(dots[0], dots[1], zoneKey, groupId) || [])\n            .map(Vect.from)\n        );\n      }\n    } else {\n      setPath([]);\n    }\n  }, [dots]);\n\n  return (\n    <PanZoom gridBounds={gridBounds} initViewBox={initViewBox} maxZoom={6}>\n      <g\n        className={rootCss}\n        onPointerDown={_ => lastDownAt.current = Date.now()}\n        onPointerUp={e => {\n          if (Date.now() - lastDownAt.current < 200) {\n            const point = getSvgPos(projectSvgEvt(e));\n            setDots(dots.slice(0, 1).concat(point));\n          }\n        }}\n      >\n\n        {data && <>\n          <image\n            {...data.pngRect}\n            className="geomorph"\n            href="/geomorph/g-301--bridge.debug.png"\n          />\n\n          {data.navPoly.map(x => (\n            <path\n              className="navpoly"\n              d={x.svgPath}\n              // onPointerDown={_ => lastDownAt.current = Date.now()}\n              // onPointerUp={e => {\n              //   if (Date.now() - lastDownAt.current < 200) {\n              //     const point = Vect.from(getSvgPos(e));\n              //     setDots(dots.slice(0, 1).concat(point));\n              //   }\n              // }}\n            />\n          ))}\n\n          {data.zone.groups.map(nodes =>\n            nodes.map(({ centroid, vertexIds}) =>\n              // <circle fill="rgba(0, 0, 0, 0.2)" cx={centroid.x} cy={centroid.y} r={2.5} />\n              <polygon\n                className="navtri"\n                points={`${vertexIds.map(id => data.zone.vertices[id])}`}\n              />\n          ))}\n\n        </>}\n\n        <polyline className="navpath" points={`${path}`}/>\n\n        <g className="dots">\n          {dots.map((p, i) =>\n            <circle\n              key={i} cx={p.x} cy={p.y} r={8}\n              onClick={(e) => {\n                setDots(dots.filter((_, j) => i !== j));\n                e.stopPropagation();\n              }}\n            />\n          )}\n        </g>\n      </g>\n\n    </PanZoom>\n  );\n}\n\nconst gridBounds = new Rect(-5000, -5000, 10000 + 1, 10000 + 1);\nconst initViewBox = new Rect(0, 0, 1200, 600);\n\nconst rootCss = css`\n  border: 1px solid #555555;\n  height: inherit;\n\n  > path.navpoly {\n    fill: rgba(0, 0, 0, 0.01);\n    stroke-width: 2;\n  }\n\n  > g.dots circle {\n    fill: white;\n    stroke: black;\n    stroke-width: 2;\n    cursor: pointer;\n  }\n\n  > polyline.navpath {\n    fill: none;\n    stroke: #00f;\n    stroke-width: 4;\n    stroke-dasharray: 20 10;\n  }\n\n  polygon.navtri {\n    fill: rgba(0, 0, 0, 0);\n    &:hover {\n      fill: rgba(0, 0, 0, 0.2);\n    }\n  }\n`;',"example/jsx-to-js.jsx":"import * as React from 'react';\nimport PanZoomDemo from '../panzoom/PanZoomDemo';\n\nconst withJsx = <div title=\"message\">Welcome!</div>;\nconst withoutJsx = React.createElement(\n  'div',\n  { title: 'message' },\n  'Welcome!',\n);\n\nconst withJsxToo = <div><PanZoomDemo /></div>;\nconst withoutJsxToo = React.createElement(\n  'div',\n  null,\n  React.createElement(PanZoomDemo, null),\n);","geom/rect.js":"import { Vect } from './vect';\n\n/**\n * A two dimensional rectangle where `(x, y)` is viewed as top left.\n */\nexport class Rect {\n  /**\n   * @param {number} x \n   * @param {number} y \n   * @param {number} width \n   * @param {number} height \n   */\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    /** @type {number} */ this.x = x;\n    /** @type {number} */ this.y = y;\n    /** @type {number} */ this.width = width;\n    /** @type {number} */ this.height = height;\n  }\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  get bottom() {\n    return this.y + this.height;\n  }\n\n  get bottomLeft() {\n    return new Vect(this.x, this.y + this.height);\n  }\n\n  get bottomRight() {\n    return new Vect(this.x + this.width, this.y + this.height);\n  }\n\n  get center() {\n    return new Vect(this.cx, this.cy);\n  }\n\n  get cx() {\n    return this.x + 0.5 * this.width;\n  }\n\n  get cy() {\n    return this.y + 0.5 * this.height;\n  }\n\n  /** @returns {Geom.GeoJsonPolygon} */\n  get geoJson() {\n    return {\n      type: 'Polygon',\n      coordinates: [\n        [\n          [this.x, this.y],\n          [this.x + this.width, this.y],\n          [this.x + this.width, this.y + this.height],\n          [this.x, this.y + this.height]\n        ]\n      ]\n    };\n  }\n\n  /** @returns {Geom.RectJson} */\n  get json() {\n    return { \n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n    };\n  }\n\n  get key() {\n    return `${this.x},${this.y},${this.width},${this.height}`;\n  }\n\n  get dimension() {\n    return Math.max(this.width, this.height);\n  }\n\n  /**\n   * Anti-clockwise w.r.t y being downwards\n   * @returns {[Vect, Vect, Vect, Vect]}\n   */\n  get points() {\n    return [\n      new Vect(this.x, this.y),\n      new Vect(this.x, this.y + this.height),\n      new Vect(this.x + this.width, this.y + this.height),\n      new Vect(this.x + this.width, this.y),\n    ];\n  }\n\n  get right() {\n    return this.x + this.width;\n  }\n\n  get topLeft() {\n    return new Vect(this.x, this.y);\n  }\n\n  get topRight() {\n    return new Vect(this.x + this.width, this.y);\n  }\n\n  static get zero() {\n    return new Rect(0, 0, 0, 0);\n  }\n\n  /** @param {import('./mat').Mat} m */\n  applyMatrix(m) {\n    if (!m.isIdentity) {\n      const min = m.transformPoint(this.topLeft);\n      const max = m.transformPoint(this.bottomRight);\n      this.x = Math.min(min.x, max.x);\n      this.y = Math.min(min.y, max.y);\n      this.width = Math.max(min.x, max.x) - this.x;\n      this.height = Math.max(min.y, max.y) - this.y;\n    }\n    return this;\n  }\n\n  clone() {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  /** @param {Geom.VectJson} _ */\n  contains({ x, y }) {\n    return this.x <= x && x <= this.x + this.width && (this.y <= y && y <= this.y + this.height);\n  }\n\n  /** @param {Geom.RectJson} _ */\n  copy({ x, y, width, height }) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  /** @param {Rect} _ */\n  covers({ x, y, width, height }) {\n    return (\n      this.x <= x &&\n      x + width <= this.x + this.width &&\n      this.y <= y &&\n      y + height <= this.y + this.height\n    );\n  }\n\n  /**\n   * @param {number} dx \n   * @param {number} dy \n   */\n  delta(dx, dy) {\n    this.x += dx;\n    this.y += dy;\n    return this;\n  }\n\n  /** \n   * Returns `Rect2.zero` if no args.\n   * @param {Vect[] | Rect[]} items\n   */\n  static from(...items) {\n    if (!items.length) {\n      return Rect.zero;\n    } else if (items[0] instanceof Vect) {\n      const vectors = /** @type {Vect[]} */ (items);\n      const mx = Math.min(...vectors.map(({ x }) => x));\n      const my = Math.min(...vectors.map(({ y }) => y));\n      const Mx = Math.max(...vectors.map(({ x }) => x));\n      const My = Math.max(...vectors.map(({ y }) => y));\n      return new Rect(mx, my, Mx - mx, My - my);\n    } else {\n      const rects = /** @type {Rect[]} */ (items);\n      const mx = Math.min(...rects.map(({ x }) => x));\n      const my = Math.min(...rects.map(({ y }) => y));\n      const Mx = Math.max(...rects.map(({ x, width }) => x + width));\n      const My = Math.max(...rects.map(({ y, height }) => y + height));\n      return new Rect(mx, my, Mx - mx, My - my);\n    }\n  }\n\n  /** @param {Geom.RectJson} _ */\n  static fromJson({ x, y, width, height }) {\n    return new Rect(x, y, width, height);\n  }\n\n  /**\n   * Bounded version of `lambda x.this.outset(-x)`\n   * @param {number} nonNegAmount \n   */\n  inset(nonNegAmount) {\n    const [cx, cy] = [this.cx, this.cy];\n    this.outset(-nonNegAmount);\n    if (this.width < 0) {\n      this.x = cx;\n      this.width = 0;\n    }\n    if (this.height < 0) {\n      this.y = cy;\n      this.height = 0;\n    }\n    return this;\n  }\n\n  /**\n   * Does this filled rectangle intersect with {other} filled rectangle?\n   * @param {Rect} other\n   */\n  intersects(other) {\n    return (\n      Math.abs(this.cx - other.cx) * 2 <= this.width + other.width &&\n      Math.abs(this.cy - other.cy) * 2 <= this.height + other.height\n    );\n  }\n\n  /** @param {Geom.VectJson} _ */\n  offset({ x, y }) {\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  /**\n   * @param {number} nonNegDx \n   * @param {number} [nonNegDy]\n   */\n  outset(nonNegDx, nonNegDy = nonNegDx) {\n    this.x -= nonNegDx;\n    this.y -= nonNegDy;\n    this.width += 2 * nonNegDx;\n    this.height += 2 * nonNegDy;\n    return this;\n  }\n\n  /** @param {number} k */\n  scale(k) {\n    this.x *= k;\n    this.y *= k;\n    this.width *= k;\n    this.height *= k;\n    return this;\n  }\n\n  /** @param {Geom.VectJson} position */\n  setPosition(position) {\n    this.x = position.x;\n    this.y = position.y;\n    return this;\n  }\n\n  toString() {\n    return `${this.x},${this.y},${this.width},${this.height}`;\n  }\n\n}\n"},So={"panzoom/PanZoomDemo":function(){return(0,g.BX)("div",{className:w,children:[(0,g.BX)("p",{children:["drag to ",(0,g.tZ)("strong",{children:"pan"}),", scroll/pinch to ",(0,g.tZ)("strong",{children:"zoom"})]}),(0,g.tZ)(d,{initViewBox:v,gridBounds:x,maxZoom:5,children:(0,g.tZ)("image",{href:"/geomorph/g-301--bridge.debug.png",x:2*m.x,y:2*m.y,style:{transform:"scale(0.5)"}})})]})},"nav/NavDemo":function(){var o=(0,r.useState)([]),t=o[0],n=o[1],e=(0,r.useState)([]),s=e[0],i=e[1],a=(0,r.useMemo)((function(){return new _}),[]),l="myZone",c=(0,r.useRef)(0),h=(0,R.useQuery)("navpoly-demo",(0,P.Z)(Z().mark((function o(){var t,n,e,r;return Z().wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,fetch("/geomorph/g-301--bridge.json").then((function(o){return o.json()}));case 2:return t=o.sent,n=t.navPoly.map((function(o){return y.LA.from(o)})),e=p.J7.polysToTriangulation(n),r=_.createZone(e),a.setZoneData(l,r),o.abrupt("return",{pngRect:t.pngRect,navPoly:n,zone:r});case 8:case"end":return o.stop()}}),o)})))).data;return(0,r.useEffect)((function(){if(2===t.length){var o=a.getGroup(l,t[0]);null!==o&&i([t[0]].concat(a.findPath(t[0],t[1],l,o)||[]).map(y.dl.from))}else i([])}),[t]),(0,g.tZ)(d,{gridBounds:X,initViewBox:J,maxZoom:6,children:(0,g.BX)("g",{className:q,onPointerDown:function(o){return c.current=Date.now()},onPointerUp:function(o){if(Date.now()-c.current<200){var e=(0,p.zk)((0,p.Xs)(o));n(t.slice(0,1).concat(e))}},children:[h&&(0,g.BX)(g.HY,{children:[(0,g.tZ)("image",$($({},h.pngRect),{},{className:"geomorph",href:"/geomorph/g-301--bridge.debug.png"})),h.navPoly.map((function(o){return(0,g.tZ)("path",{className:"navpoly",d:o.svgPath})})),h.zone.groups.map((function(o){return o.map((function(o){o.centroid;var t=o.vertexIds;return(0,g.tZ)("polygon",{className:"navtri",points:"".concat(t.map((function(o){return h.zone.vertices[o]})))})}))}))]}),(0,g.tZ)("polyline",{className:"navpath",points:"".concat(s)}),(0,g.tZ)("g",{className:"dots",children:t.map((function(o,e){return(0,g.tZ)("circle",{cx:o.x,cy:o.y,r:8,onClick:function(o){n(t.filter((function(o,t){return e!==t}))),o.stopPropagation()}},e)}))})]})})},"geomorph/GeomorphDemo":function(){return(0,g.tZ)("div",{className:ko,children:(0,g.tZ)(d,{initViewBox:bo,gridBounds:Po,maxZoom:6,children:(0,g.tZ)(fo,{def:io["g-101--multipurpose"]})})})},"images/Gm301Debug":function(){return(0,g.tZ)("div",{className:K()("scrollable",Zo),children:(0,g.tZ)("picture",{children:(0,g.tZ)("img",{draggable:!1,src:"/pics/g-301--bridge.debug.x1.png",alt:"Geomorph 301 (Debug)",width:1212,height:628})})})}};var Do,Mo=n(59885),Oo=n(39944),Eo=n(6320),zo=n(56127);function jo(o){var t=o.sessionKey,n=o.env,e=(0,zo.Z)((function(o){var n=o.session;return t in n?n[t]:null}));return(0,Oo.x)((function(){return zo.Z.api.persist(t)})),(0,r.useEffect)((function(){return zo.Z.api.createSession(t,n),function(){return zo.Z.api.removeSession(t)}}),[t]),(0,g.tZ)(Bo,{children:e?(0,g.tZ)(Mo.Od,{onMount:function(o){var t=new Eo.q5(o,e.key,e.ttyIo);t.initialise(),setTimeout((function(){return e.ttyShell.initialise(t)}))},options:No}):null})}var Vo,Bo=(0,l.zo)("section")(Do||(Do=(0,a.Z)(["\n  grid-area: terminal;\n  background: black;\n  height: 100%;\n"]))),No={allowProposedApi:!0,fontSize:16,cursorBlink:!0,rendererType:"canvas",theme:{background:"black",foreground:"#41FF00"},convertEol:!1,scrollback:250,rows:50};function Io(o){var t=o.getConfig(),n=t.key,e=t.folds;switch(n){case"code":var s=o.getComponent();return s in Ro?(0,g.tZ)("div",{style:{height:"100%",background:"#444"},children:(0,g.tZ)(Mo.pq,{height:"100%",lineNumbers:!0,readOnly:!0,code:Ro[s],folds:e})}):(0,g.BX)(Ao,{children:["Unknown code with filepath ",s]});case"component":var i=o.getComponent();if(i in So)return r.default.createElement(So[i]);case"terminal":var a=o.getConfig().session;return(0,g.tZ)(jo,{sessionKey:a,env:{test:{}}});default:return(0,g.BX)(Ao,{children:["\u26a0\ufe0f Unknown ",(0,g.tZ)("em",{children:"TabNode"}),' with name "',n,'".']})}}function Ao(o){var t=o.children;return(0,g.tZ)("div",{className:To,children:(0,g.tZ)("strong",{children:t})})}var To=(0,l.iv)(Vo||(Vo=(0,a.Z)(["\n  margin: 24px;\n  color: red;\n  font-size: 1.2rem;\n  font-family: monospace;\n"])));function Lo(o){var t=r.default.useMemo((function(){return s.Model.fromJson({global:{tabEnableRename:!1},layout:{type:"row",weight:100,children:[{type:"tabset",weight:50,selected:0,children:o.tabs.map((function(o){return{type:"tab",id:"terminal"===o.key?"".concat(o.key,"--").concat(o.session):"".concat(o.key,"--").concat(o.filepath),name:"terminal"===o.key?"@".concat(o.session):(o.key,o.filepath),config:{key:o.key,folds:"folds"in o?o.folds:void 0,session:"session"in o?o.session:void 0},component:"terminal"===o.key?"terminal":o.filepath,enableClose:!1}}))}]}})}),[o.tabs]);return r.default.useEffect((function(){if(o.storeKey)return i.Z.getState().tabs[o.storeKey]={key:o.storeKey,selectTab:function(o){return t.doAction(s.Actions.selectTab(o))},scrollIntoView:function(){var t;return null===(t=o.rootRef.current)||void 0===t?void 0:t.scrollIntoView({behavior:"smooth",block:"center"})}},function(){delete i.Z.getState().tabs[o.storeKey||""]}}),[t]),(0,g.tZ)(s.Layout,{model:t,factory:Io})}}}]);