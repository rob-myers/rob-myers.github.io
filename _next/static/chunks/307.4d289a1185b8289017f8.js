"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[307],{13307:function(t,n,e){e.r(n),e.d(n,{default:function(){return ln}});var o,r=e(59748),i=e(86352),s=e(11455),a=e(52209),l=e(88269),c=e(79056),y=e(97131),u=e(68216),h=e(25997),p=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;(0,u.Z)(this,t),this.x=n,this.y=e}return(0,h.Z)(t,[{key:"angle",get:function(){return Math.atan2(this.y,this.x)}},{key:"coord",get:function(){return[this.x,this.y]}},{key:"json",get:function(){return{x:this.x,y:this.y}}},{key:"length",get:function(){return Math.sqrt(this.x*this.x+this.y*this.y)}},{key:"lengthSquared",get:function(){return this.x*this.x+this.y*this.y}},{key:"add",value:function(t){var n=t.x,e=t.y;return this.translate(n,e)}},{key:"addScaledVector",value:function(t,n){return this.x+=t.x*n,this.y+=t.y*n,this}},{key:"clone",value:function(){return new t(this.x,this.y)}},{key:"copy",value:function(t){return this.set(t.x,t.y)}},{key:"distanceTo",value:function(t){return Math.hypot(t.x-this.x,t.y-this.y)}},{key:"distanceToSquared",value:function(t){return Math.pow(t.x-this.x,2)+Math.pow(t.y-this.y,2)}},{key:"dot",value:function(t){return this.x*t.x+this.y*t.y}},{key:"dotArgs",value:function(t,n){return this.x*t+this.y*n}},{key:"equals",value:function(t){var n=t.x,e=t.y;return this.x===n&&this.y===e}},{key:"normalize",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return this.length?this.scale(t/this.length):(console.error("Cannot normalize Vect '".concat(this,"' to length '").concat(t,"'")),this)}},{key:"precision",value:function(t){return this.set(Number(this.x.toFixed(t)),Number(this.y.toFixed(t)))}},{key:"rotate",value:function(t){var n=[this.x,this.y],e=n[0],o=n[1];return this.x=Math.cos(t)*e-Math.sin(t)*o,this.y=Math.sin(t)*e+Math.cos(t)*o,this}},{key:"round",value:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}},{key:"scale",value:function(t){return this.x*=t,this.y*=t,this}},{key:"set",value:function(t,n){return this.x=t,this.y=n,this}},{key:"sub",value:function(t){var n=t.x,e=t.y;return this.translate(-n,-e)}},{key:"subVectors",value:function(t,n){return this.x=t.x-n.x,this.y=t.y-n.y,this}},{key:"toString",value:function(){return"".concat(this.x,",").concat(this.y)}},{key:"translate",value:function(t,n){return this.x+=t,this.y+=n,this}}],[{key:"zero",get:function(){return new t(0,0)}},{key:"average",value:function(n){return n.length?n.reduce((function(t,n){return t.add(n)}),t.zero).scale(1/n.length):t.zero}},{key:"from",value:function(n){return Array.isArray(n)?new t(n[0],n[1]):new t(n.x,n.y)}}]),t}(),g=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;(0,u.Z)(this,t),this.x=n,this.y=e,this.width=o,this.height=r}return(0,h.Z)(t,[{key:"area",get:function(){return this.width*this.height}},{key:"bottom",get:function(){return this.y+this.height}},{key:"bottomLeft",get:function(){return new p(this.x,this.y+this.height)}},{key:"bottomRight",get:function(){return new p(this.x+this.width,this.y+this.height)}},{key:"center",get:function(){return new p(this.cx,this.cy)}},{key:"cx",get:function(){return this.x+.5*this.width}},{key:"cy",get:function(){return this.y+.5*this.height}},{key:"geoJson",get:function(){return{type:"Polygon",coordinates:[[[this.x,this.y],[this.x+this.width,this.y],[this.x+this.width,this.y+this.height],[this.x,this.y+this.height]]]}}},{key:"json",get:function(){return{x:this.x,y:this.y,width:this.width,height:this.height}}},{key:"key",get:function(){return"".concat(this.x,",").concat(this.y,",").concat(this.width,",").concat(this.height)}},{key:"dimension",get:function(){return Math.max(this.width,this.height)}},{key:"points",get:function(){return[new p(this.x,this.y),new p(this.x,this.y+this.height),new p(this.x+this.width,this.y+this.height),new p(this.x+this.width,this.y)]}},{key:"right",get:function(){return this.x+this.width}},{key:"topLeft",get:function(){return new p(this.x,this.y)}},{key:"topRight",get:function(){return new p(this.x+this.width,this.y)}},{key:"applyMatrix",value:function(t){if(!t.isIdentity){var n=t.transformPoint(this.topLeft),e=t.transformPoint(this.bottomRight);this.x=Math.min(n.x,e.x),this.y=Math.min(n.y,e.y),this.width=Math.max(n.x,e.x)-this.x,this.height=Math.max(n.y,e.y)-this.y}return this}},{key:"clone",value:function(){return new t(this.x,this.y,this.width,this.height)}},{key:"contains",value:function(t){var n=t.x,e=t.y;return this.x<=n&&n<=this.x+this.width&&this.y<=e&&e<=this.y+this.height}},{key:"copy",value:function(t){var n=t.x,e=t.y,o=t.width,r=t.height;return this.x=n,this.y=e,this.width=o,this.height=r,this}},{key:"covers",value:function(t){var n=t.x,e=t.y,o=t.width,r=t.height;return this.x<=n&&n+o<=this.x+this.width&&this.y<=e&&e+r<=this.y+this.height}},{key:"delta",value:function(t,n){return this.x+=t,this.y+=n,this}},{key:"inset",value:function(t){var n=[this.cx,this.cy],e=n[0],o=n[1];return this.outset(-t),this.width<0&&(this.x=e,this.width=0),this.height<0&&(this.y=o,this.height=0),this}},{key:"intersects",value:function(t){return 2*Math.abs(this.cx-t.cx)<=this.width+t.width&&2*Math.abs(this.cy-t.cy)<=this.height+t.height}},{key:"offset",value:function(t){var n=t.x,e=t.y;return this.x+=n,this.y+=e,this}},{key:"outset",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t;return this.x-=t,this.y-=n,this.width+=2*t,this.height+=2*n,this}},{key:"scale",value:function(t){return this.x*=t,this.y*=t,this.width*=t,this.height*=t,this}},{key:"setPosition",value:function(t){return this.x=t.x,this.y=t.y,this}},{key:"toString",value:function(){return"".concat(this.x,",").concat(this.y,",").concat(this.width,",").concat(this.height)}}],[{key:"zero",get:function(){return new t(0,0,0,0)}},{key:"from",value:function(){for(var n=arguments.length,e=new Array(n),o=0;o<n;o++)e[o]=arguments[o];if(e.length){if(e[0]instanceof p){var r=e,i=Math.min.apply(Math,(0,y.Z)(r.map((function(t){return t.x})))),s=Math.min.apply(Math,(0,y.Z)(r.map((function(t){return t.y})))),a=Math.max.apply(Math,(0,y.Z)(r.map((function(t){return t.x})))),l=Math.max.apply(Math,(0,y.Z)(r.map((function(t){return t.y}))));return new t(i,s,a-i,l-s)}var c=e,u=Math.min.apply(Math,(0,y.Z)(c.map((function(t){return t.x})))),h=Math.min.apply(Math,(0,y.Z)(c.map((function(t){return t.y})))),g=Math.max.apply(Math,(0,y.Z)(c.map((function(t){return t.x+t.width})))),d=Math.max.apply(Math,(0,y.Z)(c.map((function(t){return t.y+t.height}))));return new t(u,h,g-u,d-h)}return t.zero}},{key:"fromJson",value:function(n){return new t(n.x,n.y,n.width,n.height)}}]),t}(),d=e(17120),f=e(92809),m=e(90831),v=e(32676),x=e(9187),w=e.n(x);e(70956);function b(t,n){var e="undefined"!==typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=function(t,n){if(!t)return;if("string"===typeof t)return P(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return P(t,n)}(t))||n&&t&&"number"===typeof t.length){e&&(t=e);var o=0,r=function(){};return{s:r,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,a=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return s=t.done,t},e:function(t){a=!0,i=t},f:function(){try{s||null==e.return||e.return()}finally{if(a)throw i}}}}function P(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=new Array(n);e<n;e++)o[e]=t[e];return o}function k(t){var n;return{pointerId:t instanceof PointerEvent?t.pointerId:null,clientX:t.clientX,clientY:t.clientY,ownerSvg:(null===(n=t.currentTarget)||void 0===n?void 0:n.ownerSVGElement)||t.currentTarget}}function Z(t){var n;return(o=o||t.ownerSvg.createSVGPoint()).x=t.clientX,o.y=t.clientY,o.matrixTransform(null===(n=t.ownerSvg.getScreenCTM())||void 0===n?void 0:n.inverse())}var R="ontouchstart"in window||navigator.maxTouchPoints>0;function M(t,n){var e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];n.length&&(t.moveTo(n[0].x,n[0].y),n.forEach((function(n){return t.lineTo(n.x,n.y)})),e&&t.fill(),t.closePath())}function S(t,n){var e,o=b(n);try{for(o.s();!(e=o.n()).done;){var r=e.value;t.beginPath(),M(t,r.outline,!1);var i,s=b(r.holes);try{for(s.s();!(i=s.n()).done;){M(t,i.value,!1)}}catch(a){s.e(a)}finally{s.f()}t.fill()}}catch(a){o.e(a)}finally{o.f()}}function O(t,n,e){t.beginPath(),t.moveTo(n.x,n.y),t.lineTo(e.x,e.y),t.stroke()}function E(t,n,e,o){t.fillStyle=n,e&&(t.strokeStyle=e),void 0!==o&&(t.lineWidth=o)}function D(t,n){var e,o=b(n.tris);try{for(o.s();!(e=o.n()).done;){var r=e.value;t.beginPath(),M(t,r.map((function(t){return n.vs[t]})),!1),t.stroke()}}catch(i){o.e(i)}finally{o.f()}}function j(t){return new Promise((function(n,e){var o=new Image;o.onload=function(){return n(o)},o.src=t}))}function z(t,n){var e="undefined"!==typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=function(t,n){if(!t)return;if("string"===typeof t)return V(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return V(t,n)}(t))||n&&t&&"number"===typeof t.length){e&&(t=e);var o=0,r=function(){};return{s:r,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,a=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return s=t.done,t},e:function(t){a=!0,i=t},f:function(){try{s||null==e.return||e.return()}finally{if(a)throw i}}}}function V(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=new Array(n);e<n;e++)o[e]=t[e];return o}var I=new(function(){function t(){(0,u.Z)(this,t)}return(0,h.Z)(t,[{key:"getLinesIntersect",value:function(t,n,e,o){return Math.abs(-n.y*o.x+n.x*o.y)<1e-4?null:(o.x*(e.y-t.y)-o.y*(e.x-t.x))/(n.y*o.x-o.y*n.x)}},{key:"getLineSegsIntersection",value:function(t,n,e,o){var r,i,s=n.x-t.x,a=n.y-t.y,l=o.x-e.x,c=o.y-e.y,y=-l*a+s*c;if(0===y){if(t.x*-a+t.y*s===e.x*-a+e.y*s){if(i=l*l+c*c,0<=(r=(t.x-e.x)*l+(t.y-e.y)*c)&&r<=i)return r/i;if(0<=(r=(n.x-e.x)*l+(n.y-e.y)*c)&&r<=i)return r/i}return null}return r=(-a*(t.x-e.x)+s*(t.y-e.y))/y,i=(l*(t.y-e.y)-c*(t.x-e.x))/y,r>=0&&r<=1&&i>=0&&i<=1?i:null}},{key:"joinTriangulations",value:function(t){if(1===t.length)return t[0];var n,e=[],o=[],r=0,i=z(t);try{for(i.s();!(n=i.n()).done;){var s=n.value;e.push.apply(e,(0,y.Z)(s.vs)),o.push.apply(o,(0,y.Z)(s.tris.map((function(t){return t.map((function(t){return t+r}))})))),r+=s.vs.length}}catch(a){i.e(a)}finally{i.f()}return{vs:e,tris:o}}},{key:"polysToTriangulation",value:function(t){var n=t.map((function(t){return t.qualityTriangulate()}));return this.joinTriangulations(n)}},{key:"removePathReps",value:function(t){var n;return t.reduce((function(t,e){return n&&e.x===n.x&&e.y===n.y||t.push(n=e),t}),[])}}]),t}());function N(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,o)}return e}var T,B=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];(0,u.Z)(this,t),this.outline=n,this.holes=e}return(0,h.Z)(t,[{key:"allPoints",get:function(){var t;return(t=this.outline).concat.apply(t,(0,y.Z)(this.holes))}},{key:"geoJson",get:function(){return function(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?N(Object(e),!0).forEach((function(n){(0,f.Z)(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):N(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}({type:"Polygon",coordinates:[this.outline.map((function(t){return[t.x,t.y]}))].concat(this.holes.map((function(t){return t.map((function(t){return[t.x,t.y]}))})))},this.meta&&{meta:this.meta})}},{key:"rect",get:function(){return g.from.apply(g,(0,y.Z)(this.outline))}},{key:"svgPath",get:function(){return[this.outline].concat((0,y.Z)(this.holes)).map((function(t){return"M".concat(t,"Z")})).join(" ")}},{key:"tangents",get:function(){var t=[this.outline].concat((0,y.Z)(this.holes)).map((function(t){return t.concat(t[0]).reduce((function(t,n,e,o){if(e){var r=n.clone().sub(o[e-1]).length;r<.01&&console.log("saw point length",r)}return e>0?t.concat(n.clone().sub(o[e-1]).normalize()):[]}),[])})),n=(0,d.Z)(t);return{outer:n[0],inner:n.slice(1)}}},{key:"add",value:function(t){return this.translate(t.x,t.y)}},{key:"addMeta",value:function(t){return this.meta=Object.assign(this.meta||{},t),this}},{key:"anticlockwise",value:function(){this.outline.push(this.outline[0]);var t=this.outline.reduce((function(t,n,e,o){return t+(e<o.length-1?(o[e+1].x-n.x)*(o[e+1].y+n.y):0)}),0);return this.outline.pop(),t>0}},{key:"applyMatrix",value:function(t){return t.isIdentity||(this.outline=this.outline.map((function(n){return t.transformPoint(n)})),this.holes.forEach((function(n){return n.map((function(n){return t.transformPoint(n)}))}))),this}},{key:"cleanFinalReps",value:function(){for(var t=0,n=[this.outline].concat((0,y.Z)(this.holes));t<n.length;t++){var e=n[t],o=e.pop();o&&!o.equals(e[0])&&e.push(o)}return this}},{key:"clone",value:function(){return new t(this.outline.map((function(t){return t.clone()})),this.holes.map((function(t){return t.map((function(t){return t.clone()}))})))}},{key:"createInset",value:function(n){if(0===n)return[this.clone()];this.cleanFinalReps();var e,o=[{ring:this.outline,inset:t.insetRing(this.outline,n)}].concat((0,y.Z)(this.holes.map((function(e){return{ring:e,inset:t.insetRing(e,n)}})))).map((function(n){var e=n.ring,o=n.inset;return e.map((function(n,r){return new t([e[r].clone(),o[r],o[(r+1)%e.length],e[(r+1)%e.length].clone()])}))})),r=(0,d.Z)(o),i=r[0],s=r.slice(1);return n>0?t.cutOut(i.concat.apply(i,(0,y.Z)(s)),[this.clone()]):t.union((e=[this.clone()]).concat.apply(e,[i].concat((0,y.Z)(s))))}},{key:"createOutset",value:function(t){return this.createInset(-t)}},{key:"fastTriangulate",value:function(){var t=this.geoJson.coordinates,n=w().flatten(t),e=w()(n.vertices,n.holes,2),o=e.reduce((function(t,n,o){return o%3===2?t.concat([[e[o-2],e[o-1],n]]):t}),[]);return{vs:this.allPoints,tris:o}}},{key:"fixOrientation",value:function(){return this.anticlockwise()&&this.reverse(),this}},{key:"qualityTriangulate",value:function(){try{var t=this.outline.map((function(t,n){return{x:t.x,y:t.y,id:n}})),n=t.length,e=this.holes.map((function(t){return t.map((function(t){return{x:t.x,y:t.y,id:n++}}))})),o=new m.SweepContext(t).addHoles(e).triangulate().getTriangles().map((function(t){return[t.getPoint(0),t.getPoint(1),t.getPoint(2)]})).map((function(t){var n=(0,c.Z)(t,3),e=n[0],o=n[1],r=n[2];return[e.id,o.id,r.id]}));return{vs:this.allPoints,tris:o}}catch(r){return console.error("Quality triangulation failed, falling back to earcut"),console.error(r),this.fastTriangulate()}}},{key:"precision",value:function(t){return this.outline.forEach((function(n){return n.precision(t)})),this.holes.forEach((function(n){return n.forEach((function(n){return n.precision(t)}))})),this}},{key:"removeHoles",value:function(){return this.holes=[],this}},{key:"reverse",value:function(){return this.outline.reverse(),this.holes.forEach((function(t){return t.reverse()})),this}},{key:"round",value:function(){return this.outline.forEach((function(t){return t.round()})),this.holes.forEach((function(t){return t.forEach((function(t){return t.round()}))})),this}},{key:"scale",value:function(t){return this.outline.forEach((function(n){return n.scale(t)})),this.holes.forEach((function(n){return n.forEach((function(n){return n.scale(t)}))})),this}},{key:"translate",value:function(t,n){return this.outline.forEach((function(e){return e.translate(t,n)})),this.holes.forEach((function(e){return e.forEach((function(e){return e.translate(t,n)}))})),this}}],[{key:"cutOut",value:function(n,e){return v.difference.apply(v,[e.map((function(t){return t.geoJson.coordinates}))].concat((0,y.Z)(n.map((function(t){return t.geoJson.coordinates}))))).map((function(n){return t.from(n)}))}},{key:"from",value:function(n){return n instanceof Array?new t(n[0].map((function(t){var n=(0,c.Z)(t,2),e=n[0],o=n[1];return new p(e,o)})),n.slice(1).map((function(t){return t.map((function(t){var n=(0,c.Z)(t,2),e=n[0],o=n[1];return new p(e,o)}))}))):new t(n.coordinates[0].map((function(t){var n=(0,c.Z)(t,2),e=n[0],o=n[1];return new p(e,o)})),n.coordinates.slice(1).map((function(t){return t.map((function(t){var n=(0,c.Z)(t,2),e=n[0],o=n[1];return new p(e,o)}))})))}},{key:"fromRect",value:function(n){return new t(n.points)}},{key:"insetRing",value:function(n,e){var o=new t(n).tangents.outer,r=n.map((function(t,r){return[t.clone().translate(e*-o[r].y,e*o[r].x),n[(r+1)%n.length].clone().translate(e*-o[r].y,e*o[r].x)]}));return r.map((function(t,n){var e=(n+1)%r.length,i=r[e],s=I.getLinesIntersect(t[1],o[n],i[0],o[e]);return s?t[1].translate(s*o[n].x,s*o[n].y):p.average([t[1],i[0]])}))}},{key:"pointInTriangle",value:function(n,e,o,r){var i=t.sign(n,e,o),s=t.sign(n,o,r),a=t.sign(n,r,e);return!((i<0||s<0||a<0)&&(i>0||s>0||a>0))}},{key:"sign",value:function(t,n,e){return(t.x-e.x)*(n.y-e.y)-(n.x-e.x)*(t.y-e.y)}},{key:"union",value:function(n){return v.union.apply(v,[[]].concat((0,y.Z)(n.map((function(t){return t.geoJson.coordinates}))))).map((function(n){return t.from(n)}))}}]),t}(),A=function(){function t(n){return(0,u.Z)(this,t),this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0,this.setMatrixValue(n)}return(0,h.Z)(t,[{key:"isIdentity",get:function(){return 1===this.a&&0===this.b&&0===this.c&&1===this.d&&0===this.e&&0===this.f}},{key:"setIdentity",value:function(){this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0}},{key:"setMatrixValue",value:function(t){if("string"===typeof t){var n=t.slice("matrix(".length,-")".length).split(",").map(Number);return this.feedFromArray(n)}return t?Array.isArray(t)?this.feedFromArray([this.a,this.b,this.c,this.d,this.e,this.f]):this.feedFromArray([t.a,t.b,t.c,t.d,t.e,t.f]):this}},{key:"transformPoint",value:function(t){var n=this.a*t.x+this.c*t.y+this.e,e=this.b*t.x+this.d*t.y+this.f;return t.x=n,t.y=e,t}},{key:"feedFromArray",value:function(t){var n=(0,c.Z)(t,6),e=n[0],o=n[1],r=n[2],i=n[3],s=n[4],a=n[5];return this.a=e,this.b=o,this.c=r,this.d=i,this.e=s,this.f=a,this}}]),t}(),G=e(8311);function C(t){var n=r.useState((function(){var n=t.initViewBox.clone(),r=t.minZoom||.5,i=t.maxZoom||2;return{viewBox:n,panFrom:null,zoom:t.initZoom||1,ptrs:[],ptrDiff:null,zoomTo:function(o,s){var a=Math.min(Math.max(e.zoom+s,r),i);n.x=e.zoom/a*(n.x-o.x)+o.x,n.y=e.zoom/a*(n.y-o.y)+o.y,n.width=1/a*t.initViewBox.width,n.height=1/a*t.initViewBox.height,e.zoom=a},onWheel:function(t){if(t.preventDefault(),"ownerSVGElement"in(t.target||{})){var n=Z(k(t));e.zoomTo(n,-.003*t.deltaY),e.root.setAttribute("viewBox","".concat(e.viewBox))}},onPointerDown:function(t){"ownerSVGElement"in(t.target||{})&&(e.panFrom=(new p).copy(Z(k(t))),e.ptrs.push(k(t)))},onPointerMove:function(t){if(e.ptrs=e.ptrs.map((function(n){return n.pointerId===t.pointerId?k(t):n})),2===e.ptrs.length){var r=Math.abs(e.ptrs[1].clientX-e.ptrs[0].clientX);if(null!==e.ptrDiff){var i=function(t){var n;return(o=o||t[0].ownerSvg.createSVGPoint()).x=o.y=0,t.forEach((function(t){o.x+=t.clientX,o.y+=t.clientY})),o.x/=t.length||1,o.y/=t.length||1,o.matrixTransform(null===(n=t[0].ownerSvg.getScreenCTM())||void 0===n?void 0:n.inverse())}(e.ptrs);e.zoomTo(i,.02*(r-e.ptrDiff)),e.root.setAttribute("viewBox","".concat(e.viewBox))}e.ptrDiff=r}else if(e.panFrom){var s=Z(k(t));n.delta(e.panFrom.x-s.x,e.panFrom.y-s.y),e.root.setAttribute("viewBox","".concat(e.viewBox))}},onPointerUp:function(t){e.panFrom=null,e.ptrs=e.ptrs.filter((function(n){return t.pointerId!==n.pointerId})),e.ptrs.length<2&&(e.ptrDiff=null)},rootRef:function(t){t&&(e.root=t,t.addEventListener("wheel",e.onWheel,{passive:!1}),t.addEventListener("pointerdown",e.onPointerDown,{passive:!0}),t.addEventListener("pointermove",e.onPointerMove,{passive:!0}),t.addEventListener("pointerup",e.onPointerUp,{passive:!0}),t.addEventListener("pointercancel",e.onPointerUp,{passive:!0}),t.addEventListener("pointerleave",e.onPointerUp,{passive:!0}),t.addEventListener("touchstart",(function(t){return t.preventDefault()}),{passive:!1}))},root:{},rootCss:(0,l.iv)(T||(T=(0,a.Z)(["\n        width: 100%;\n        height: 100%;\n        touch-action: pan-x pan-y pinch-zoom;\n        > g.content {\n          shape-rendering: ",";\n        }\n        > .grid {\n          pointer-events: none;\n        }\n      "])),R?"optimizeSpeed":"auto")}})),e=(0,c.Z)(n,1)[0];return(0,G.BX)("svg",{ref:e.rootRef,className:e.rootCss,preserveAspectRatio:"xMinYMin",viewBox:"".concat(e.viewBox),children:[(0,G.tZ)("g",{className:"content",children:t.children}),(0,G.tZ)(F,{bounds:t.gridBounds})]})}function F(t){var n=r.useMemo((function(){return L++}),[]);return(0,G.tZ)(G.HY,{children:[10,60].flatMap((function(e){return[(0,G.tZ)("defs",{children:(0,G.tZ)("pattern",{id:"pattern-grid-".concat(e,"x").concat(e,"--").concat(n),width:e,height:e,patternUnits:"userSpaceOnUse",children:(0,G.tZ)("path",{d:"M ".concat(e," 0 L 0 0 0 ").concat(e),fill:"none",stroke:"rgba(0,0,0,0.5)",strokeWidth:"0.3"})})}),(0,G.tZ)("rect",{className:"grid",x:t.bounds.x,y:t.bounds.y,width:t.bounds.width,height:t.bounds.height,fill:"url(#pattern-grid-".concat(e,"x").concat(e,"--").concat(n,")")})]}))})}var U,L=0;var $=new g(-6,-22,1212,628),J=new g(-5e3,-5e3,10001,10001),q=$.clone().outset(50),_=(0,l.iv)(U||(U=(0,a.Z)(["\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  > p {\n    padding: 12px 8px;\n    margin: 0;\n    font-family: monospace;\n    font-size: 16px;\n    background: var(--focus-bg);\n  }\n"]))),X=e(30266),Y=e(809),W=e.n(Y),H=e(88767),K=function(){function t(){(0,u.Z)(this,t)}return(0,h.Z)(t,null,[{key:"roundNumber",value:function(t,n){var e=Math.pow(10,n);return Math.round(t*e)/e}},{key:"sample",value:function(t){return t[Math.floor(Math.random()*t.length)]}},{key:"distanceToSquared",value:function(t,n){var e=t.x-n.x,o=t.y-n.y;return e*e+o*o}},{key:"isPointInPoly",value:function(t,n){for(var e=!1,o=-1,r=t.length,i=r-1;++o<r;i=o)(t[o].y<=n.y&&n.y<t[i].y||t[i].y<=n.y&&n.y<t[o].y)&&n.x<(t[i].x-t[o].x)*(n.y-t[o].y)/(t[i].y-t[o].y)+t[o].x&&(e=!e);return e}},{key:"isVectorInPolygon",value:function(t,n,e){var o=1e5,r=-1e5,i=[];return n.vertexIds.forEach((function(t){o=Math.min(e[t].y,o),r=Math.max(e[t].y,r),i.push(e[t])})),!!(t.y<r+.5&&t.y>o-.5&&this.isPointInPoly(i,t))}},{key:"triarea2",value:function(t,n,e){var o=n.x-t.x,r=n.y-t.y;return-((e.x-t.x)*r-o*(e.y-t.y))}},{key:"vequal",value:function(t,n){return this.distanceToSquared(t,n)<1e-5}}]),t}(),Q=function(){function t(n){(0,u.Z)(this,t),this.content=[],this.scoreFunction=n}return(0,h.Z)(t,[{key:"push",value:function(t){this.content.push(t),this.sinkDown(this.content.length-1)}},{key:"pop",value:function(){var t=this.content[0],n=this.content.pop();return this.content.length>0&&(this.content[0]=n,this.bubbleUp(0)),t}},{key:"remove",value:function(t){var n=this.content.indexOf(t),e=this.content.pop();n!==this.content.length-1&&(this.content[n]=e,this.scoreFunction(e)<this.scoreFunction(t)?this.sinkDown(n):this.bubbleUp(n))}},{key:"size",value:function(){return this.content.length}},{key:"rescoreElement",value:function(t){this.sinkDown(this.content.indexOf(t))}},{key:"sinkDown",value:function(t){for(var n=this.content[t];t>0;){var e=(t+1>>1)-1,o=this.content[e];if(!(this.scoreFunction(n)<this.scoreFunction(o)))break;this.content[e]=n,this.content[t]=o,t=e}}},{key:"bubbleUp",value:function(t){for(var n=this.content.length,e=this.content[t],o=this.scoreFunction(e);;){var r=t+1<<1,i=r-1,s=null,a=-1/0;if(i<n){var l=this.content[i];(a=this.scoreFunction(l))<o&&(s=i)}if(r<n){var c=this.content[r];this.scoreFunction(c)<(null===s?o:a)&&(s=r)}if(null===s)break;this.content[t]=this.content[s],this.content[s]=e,t=s}}}]),t}(),tt=function(){function t(){(0,u.Z)(this,t)}return(0,h.Z)(t,null,[{key:"init",value:function(t){for(var n=0;n<t.length;n++){var e=t[n];e.f=0,e.g=0,e.h=0,e.cost=1,e.visited=!1,e.closed=!1,e.parent=null}}},{key:"cleanUp",value:function(t){for(var n=0;n<t.length;n++){var e=t[n];delete e.f,delete e.g,delete e.h,delete e.cost,delete e.visited,delete e.closed,delete e.parent}}},{key:"heap",value:function(){return new Q((function(t){return t.f}))}},{key:"search",value:function(t,n,e){this.init(t);var o=this.heap();for(o.push(n);o.size()>0;){var r=o.pop();if(r===e){for(var i=r,s=[];i.parent;)s.push(i),i=i.parent;return this.cleanUp(s),s.reverse()}r.closed=!0;for(var a=this.neighbours(t,r),l=0,c=a.length;l<c;l++){var y=a[l];if(!y.closed){var u=r.g+y.cost,h=y.visited;if(!h||u<y.g){if(y.visited=!0,y.parent=r,!y.centroid||!e.centroid)throw new Error("Unexpected state");y.h=y.h||this.heuristic(y.centroid,e.centroid),y.g=u,y.f=y.g+y.h,h?o.rescoreElement(y):o.push(y)}}}}return[]}},{key:"heuristic",value:function(t,n){return K.distanceToSquared(t,n)}},{key:"neighbours",value:function(t,n){for(var e=[],o=0;o<n.neighbours.length;o++)e.push(t[n.neighbours[o]]);return e}}]),t}(),nt=function(){function t(){(0,u.Z)(this,t)}return(0,h.Z)(t,null,[{key:"buildZone",value:function(t){var n=this,e=this._buildNavigationMesh(t);e.vertices.forEach((function(t){t.x=K.roundNumber(t.x,2),t.y=K.roundNumber(t.y,2)}));var o={};o.vertices=e.vertices;var r=this._buildPolygonGroups(e);return o.groups=new Array(r.length),r.forEach((function(t,e){var r=new Map;t.forEach((function(t,n){return r.set(t,n)}));var i=new Array(t.length);t.forEach((function(t,e){var s=[];t.neighbours.forEach((function(t){return s.push(r.get(t))}));var a=[];t.neighbours.forEach((function(e){return a.push(n._getSharedVerticesInOrder(t,e))}));var l=new p(0,0);l.add(o.vertices[t.vertexIds[0]]),l.add(o.vertices[t.vertexIds[1]]),l.add(o.vertices[t.vertexIds[2]]),l.scale(1/3),l.x=K.roundNumber(l.x,2),l.y=K.roundNumber(l.y,2),i[e]={id:e,centroid:l,neighbours:s,portals:a,vertexIds:t.vertexIds}})),o.groups[e]=i})),o}},{key:"_buildNavigationMesh",value:function(t){return this._buildPolygonsFromTriang(t)}},{key:"_spreadGroupId",value:function(t){for(var n=new Set([t]);n.size>0;){var e=n;n=new Set,e.forEach((function(e){e.group=t.group,e.neighbours.forEach((function(t){void 0===t.group&&n.add(t)}))}))}}},{key:"_buildPolygonGroups",value:function(t){var n=this,e=t.polygons,o=[];return e.forEach((function(t){void 0!==t.group?o[t.group].push(t):(t.group=o.length,n._spreadGroupId(t),o.push([t]))})),o}},{key:"_buildPolygonNeighbours",value:function(t,n){var e=new Set,o=n[t.vertexIds[0]],r=n[t.vertexIds[1]],i=n[t.vertexIds[2]];return o.forEach((function(n){n!==t&&(r.includes(n)||i.includes(n))&&e.add(n)})),r.forEach((function(n){n!==t&&i.includes(n)&&e.add(n)})),e}},{key:"_buildPolygonsFromTriang",value:function(t){for(var n=this,e=[],o=[],r={},i=0;i<t.vs.length;i++)o.push(t.vs[i]),r[i]=[];for(var s=0;s<t.tris.length;s++){var a=(0,c.Z)(t.tris[s],3),l=a[0],y=a[1],u=a[2],h={vertexIds:[l,y,u]};e.push(h),r[l].push(h),r[y].push(h),r[u].push(h)}return e.forEach((function(t){t.neighbours=n._buildPolygonNeighbours(t,r)})),{polygons:e,vertices:o}}},{key:"_getSharedVerticesInOrder",value:function(t,n){var e=t.vertexIds,o=e[0],r=e[1],i=e[2],s=n.vertexIds,a=s.includes(o),l=s.includes(r),c=s.includes(i);return a&&l&&c?Array.from(e):a&&l?[o,r]:l&&c?[r,i]:a&&c?[i,o]:(console.warn("Error processing navigation mesh neighbors; neighbors with <2 shared vertices found."),[])}}]),t}(),et=function(){function t(){(0,u.Z)(this,t),this.portals=[]}return(0,h.Z)(t,[{key:"push",value:function(t,n){void 0===n&&(n=t),this.portals.push({left:t,right:n})}},{key:"stringPull",value:function(){var t,n,e,o=this.portals,r=[],i=0,s=0,a=0;t=o[0].left,n=o[0].left,e=o[0].right,r.push(t);for(var l=1;l<o.length;l++){var c=o[l].left,y=o[l].right;if(K.triarea2(t,e,y)<=0){if(!(K.vequal(t,e)||K.triarea2(t,n,y)>0)){r.push(n),n=t=n,e=t,s=i=s,a=i,l=i;continue}e=y,a=l}if(K.triarea2(t,n,c)>=0){if(!(K.vequal(t,n)||K.triarea2(t,e,c)<0)){r.push(e),n=t=e,e=t,s=i=a,a=i,l=i;continue}n=c,s=l}}return 0!==r.length&&K.vequal(r[r.length-1],o[o.length-1].left)||r.push(o[o.length-1].left),this.path=r,r}}]),t}(),ot=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new p,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new p,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new p;(0,u.Z)(this,t),this.a=n,this.b=e,this.c=o}return(0,h.Z)(t,[{key:"closestPointToPoint",value:function(t,n){var e,o,r=this.a,i=this.b,s=this.c;rt.subVectors(i,r),it.subVectors(s,r),st.subVectors(t,r);var a=rt.dot(st),l=it.dot(st);if(a<=0&&l<=0)return n.copy(r);at.subVectors(t,i);var c=rt.dot(at),y=it.dot(at);if(c>=0&&y<=c)return n.copy(i);var u=a*y-c*l;if(u<=0&&a>=0&&c<=0)return e=a/(a-c),n.copy(r).addScaledVector(rt,e);lt.subVectors(t,s);var h=rt.dot(lt),p=it.dot(lt);if(p>=0&&h<=p)return n.copy(s);var g=h*l-a*p;if(g<=0&&l>=0&&p<=0)return o=l/(l-p),n.copy(r).addScaledVector(it,o);var d=c*p-h*y;if(d<=0&&y-c>=0&&h-p>=0)return ct.subVectors(s,i),o=(y-c)/(y-c+(h-p)),n.copy(i).addScaledVector(ct,o);var f=1/(d+g+u);return e=g*f,o=u*f,n.copy(r).addScaledVector(rt,e).addScaledVector(it,o)}},{key:"set",value:function(t,n,e){return this.a.copy(t),this.b.copy(n),this.c.copy(e),this}}]),t}(),rt=new p,it=new p,st=new p,at=new p,lt=new p,ct=new p;function yt(t,n){var e="undefined"!==typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=function(t,n){if(!t)return;if("string"===typeof t)return ut(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return ut(t,n)}(t))||n&&t&&"number"===typeof t.length){e&&(t=e);var o=0,r=function(){};return{s:r,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,a=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return s=t.done,t},e:function(t){a=!0,i=t},f:function(){try{s||null==e.return||e.return()}finally{if(a)throw i}}}}function ut(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=new Array(n);e<n;e++)o[e]=t[e];return o}var ht,pt=function(){function t(){(0,u.Z)(this,t),this.zones={};var n={point:new p(0,0),triangle:new ot,endPoint:new p(0,0),closestNode:null,closestPoint:new p(0,0),closestDistance:1/0};this.temp=n}return(0,h.Z)(t,[{key:"setZoneData",value:function(t,n){this.zones[t]=n}},{key:"getRandomNode",value:function(t,n,e,o){if(!this.zones[t])return new p(0,0);e=e||null,o=o||0;var r=[];return this.zones[t].groups[n].forEach((function(t){e&&o?K.distanceToSquared(e,t.centroid)<o*o&&r.push(t.centroid):r.push(t.centroid)})),K.sample(r)||new p(0,0)}},{key:"getClosestNode",value:function(t,n,e){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=this.zones[n].groups[e],i=this.zones[n].vertices,s=null,a=1/0;return r.forEach((function(n){var e=K.distanceToSquared(n.centroid,t);e<a&&(!o||K.isVectorInPolygon(t,n,i))&&(s=n,a=e)})),s}},{key:"findPath",value:function(t,n,e,o){var r=this.zones[e].groups[o],i=this.zones[e].vertices,s=this.getClosestNode(t,e,o,!0),a=this.getClosestNode(n,e,o,!0);if(!s||!a)return null;var l=tt.search(r,s,a),c=function(t,n){for(var e=0;e<t.neighbours.length;e++)if(t.neighbours[e]===n.id)return t.portals[e]},y=new et;y.push(t);for(var u=0;u<l.length;u++){var h=l[u],g=l[u+1];if(g){var d=c(h,g);y.push(i[d[0]],i[d[1]])}}y.push(n),y.stringPull();var f=y.path.map((function(t){return new p(t.x,t.y)}));return f.shift(),f}},{key:"getGroup",value:function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!this.zones[t])return null;for(var o=null,r=Math.pow(50,2),i=this.zones[t],s=0;s<i.groups.length;s++){var a,l=i.groups[s],c=yt(l);try{for(c.s();!(a=c.n()).done;){var y=a.value;if(e){var u=[i.vertices[y.vertexIds[0]],i.vertices[y.vertexIds[1]],i.vertices[y.vertexIds[2]]];if(K.isPointInPoly(u,n))return s}var h=K.distanceToSquared(y.centroid,n);h<r&&(o=s,r=h)}}catch(p){c.e(p)}finally{c.f()}}return o}},{key:"clampStep",value:function(t,n,e,o,r,i){var s=this.zones[o].vertices,a=this.zones[o].groups[r],l=[e],c={};c[e.id]=0;var y=this.temp;y.closestNode=null,y.closestPoint.set(0,0),y.closestDistance=1/0,y.endPoint.copy(n);for(var u=l.pop();u;u=l.pop()){y.triangle.set(s[u.vertexIds[0]],s[u.vertexIds[1]],s[u.vertexIds[2]]),y.triangle.closestPointToPoint(y.endPoint,y.point),y.point.distanceToSquared(y.endPoint)<y.closestDistance&&(y.closestNode=u,y.closestPoint.copy(y.point),y.closestDistance=y.point.distanceToSquared(y.endPoint));var h=c[u.id];if(!(h>2))for(var p=0;p<u.neighbours.length;p++){var g=a[u.neighbours[p]];g.id in c||(l.push(g),c[g.id]=h+1)}}return i.copy(y.closestPoint),y.closestNode}}],[{key:"createZone",value:function(t){return nt.buildZone(t)}}]),t}();function gt(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,o)}return e}function dt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?gt(Object(e),!0).forEach((function(n){(0,f.Z)(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):gt(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}var ft=new g(-5e3,-5e3,10001,10001),mt=new g(0,0,1200,600),vt=(0,l.iv)(ht||(ht=(0,a.Z)(["\n  border: 1px solid #555555;\n  height: inherit;\n\n  > path.navpoly {\n    fill: rgba(0, 0, 0, 0.01);\n    stroke-width: 2;\n  }\n\n  > g.dots circle {\n    fill: white;\n    stroke: black;\n    stroke-width: 2;\n    cursor: pointer;\n  }\n\n  > polyline.navpath {\n    fill: none;\n    stroke: #00f;\n    stroke-width: 4;\n    stroke-dasharray: 20 10;\n  }\n\n  polygon.navtri {\n    fill: rgba(0, 0, 0, 0);\n    &:hover {\n      fill: rgba(0, 0, 0, 0.2);\n    }\n  }\n"]))),xt=e(94184),wt=e.n(xt),bt=(e(77503),e(292));function Pt(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,o)}return e}function kt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?Pt(Object(e),!0).forEach((function(n){(0,f.Z)(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):Pt(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function Zt(t,n){var e=new A,o={singles:[],obstacles:[],walls:[]};t.items.forEach((function(t,r){var i,s,a;t.transform?e.feedFromArray(t.transform):e.setIdentity();var l=n[t.symbol],c=l.singles,u=l.obstacles,h=l.walls,p=l.hull;r&&(e.a*=.2,e.b*=.2,e.c*=.2,e.d*=.2);var g=c.map((function(t){return{tags:t.tags,poly:t.poly.clone().applyMatrix(e).precision(1)}})).filter((function(n){var e=n.tags;return t.doors&&e.includes("door")?e.some((function(n){return t.doors.includes(n)})):!t.walls||!e.includes("wall")||e.some((function(n){return t.walls.includes(n)}))}));(i=o.singles).push.apply(i,(0,y.Z)(g)),(s=o.obstacles).push.apply(s,(0,y.Z)(u.map((function(t){return t.clone().applyMatrix(e)})))),(a=o.walls).push.apply(a,(0,y.Z)(B.union([].concat((0,y.Z)(h.map((function(t){return t.clone().applyMatrix(e)}))),(0,y.Z)(Mt(g,"wall")),(0,y.Z)(p.flatMap((function(t){return t.createOutset(2)})).map((function(t){return t.applyMatrix(e)})))))))})),o.obstacles.forEach((function(t){return t.fixOrientation()})),o.singles.forEach((function(t){return t.poly.fixOrientation()}));var r=Mt(o.singles,"door"),i=o.walls.flatMap((function(t){return B.cutOut(r,[t])}));o.walls=B.union(i),o.singles=o.singles.reduce((function(t,n){return t.concat(n.tags.includes("wall")?B.cutOut(r,[n.poly]).map((function(t){return kt(kt({},n),{},{poly:t})})):n)}),[]);var s=t.items.map((function(t){return n[t.symbol]})),a=s[0],l=a.hull.map((function(t){return t.clone().removeHoles()})),c=Mt(o.singles,"window"),u=B.cutOut([].concat(i.flatMap((function(t){return t.createOutset(12)})),o.obstacles.flatMap((function(t){return t.createOutset(8)}))),l).map((function(t){return t.cleanFinalReps().precision(1).fixOrientation()})),h=(0,bt.vL)(0,0).getContext("2d");h.font=Rt.font;var p=St(o.singles,"label").map((function(t){var n=t.poly,e=t.tags,o=n.rect.center.json,r=e.filter((function(t){return"label"!==t})).join(" "),i=!r.match(/[gjpqy]/),s={x:h.measureText(r).width,y:i?Rt.noTailPx:Rt.sizePx},a={x:o.x-.5*s.x,y:o.y-.5*s.y,width:s.x,height:s.y};return{text:r,center:o,rect:a,padded:(new g).copy(a).outset(Rt.padX,Rt.padY).json}}));return{def:t,groups:o,navPoly:u,labels:p,hullTop:B.cutOut(r.concat(c),a.hull),hullRect:g.from.apply(g,(0,y.Z)(a.hull.concat(r).map((function(t){return t.rect})))),items:s.map((function(n,e){return{key:n.key,pngHref:e?"/symbol/".concat(n.key,".png"):"/debug/".concat(t.key,".png"),pngRect:n.pngRect,transformArray:t.items[e].transform,transform:t.items[e].transform?"matrix(".concat(t.items[e].transform,")"):void 0}}))}}var Rt={sizePx:11,noTailPx:10,font:"".concat(11,"px sans-serif"),padX:4,padY:2};function Mt(t,n){return St(t,n).map((function(t){return t.poly}))}function St(t,n){return t.filter((function(t){return t.tags.includes(n)}))}function Ot(t){return Object.values(t).reduce((function(t,n){return(t[n.key]={key:(e=n).key,hull:e.hull.map(B.from),obstacles:e.obstacles.map(B.from),walls:e.walls.map(B.from),singles:e.singles.map((function(t){var n=t.tags,e=t.poly;return{tags:n,poly:B.from(e)}})),pngRect:e.pngRect})&&t;var e}),{})}var Et={"g-101--multipurpose":{key:"g-101--multipurpose",id:101,items:[{symbol:"101--hull"},{symbol:"fuel--010--2x4"},{symbol:"fuel--010--2x4",transform:[1,0,0,1,360,0]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,600,0]},{symbol:"iris-valves--005--1x1",transform:[1,0,0,1,840,0]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,960,0]},{symbol:"machinery--158--1.8x3.6",transform:[0,-1,1,0,10,240]},{symbol:"stateroom--020--2x3",transform:[0,1,1,0,360,120]},{symbol:"fresher--020--2x2",transform:[0,1,1,0,540,120]},{symbol:"lounge--009--2x3",transform:[-1,0,0,-1,840,240]},{symbol:"machinery--155--1.8x3.6",transform:[0,-1,1,0,972,236]},{symbol:"iris-valves--005--1x1",transform:[0,-1,1,0,0,360]},{symbol:"stateroom--018--2x3",transform:[1,0,0,1,360,240]},{symbol:"stateroom--019--2x3",transform:[-1,0,0,-1,840,420]},{symbol:"empty-room--013--2x3",transform:[0,1,-1,0,180,360]},{symbol:"medical--008--2x3",transform:[0,-1,-1,0,360,540],doors:["w"]},{symbol:"stateroom--020--2x3",transform:[0,-1,1,0,360,540]},{symbol:"stateroom--020--2x3",transform:[0,-1,-1,0,840,540]},{symbol:"fresher--025--2x3",transform:[0,-1,1,0,840,540]},{symbol:"office--023--2x3",transform:[0,-1,-1,0,1200,480]},{symbol:"empty-room--039--3x4",transform:[-1,0,0,1,180,480],walls:["w"]},{symbol:"lifeboat--small-craft",transform:[1,0,0,1,0,488]},{symbol:"medical--007--2x3",transform:[0,1,-1,0,360,660],doors:["w"]},{symbol:"office--026--2x3",transform:[0,1,-1,0,540,660]},{symbol:"office--026--2x3",transform:[0,1,1,0,660,660]},{symbol:"office--020--2x3",transform:[1,0,0,1,360,780]},{symbol:"office--020--2x3",transform:[-1,0,0,1,840,780]},{symbol:"empty-room--013--2x3",transform:[0,-1,-1,0,180,840],walls:["n"]},{symbol:"fresher--025--2x3",transform:[0,1,1,0,840,660]},{symbol:"office--061--3x4",transform:[1,0,0,1,1020,480]},{symbol:"office--023--2x3",transform:[0,1,-1,0,1200,720]},{symbol:"iris-valves--005--1x1",transform:[0,1,1,0,1140,840]},{symbol:"machinery--091--1.6x1.8",transform:[1,0,0,1,550,960]},{symbol:"office--025--2x3",transform:[0,1,1,0,360,960],doors:["w"]},{symbol:"machinery--156--1.8x3.6",transform:[0,-1,1,0,12,1068]},{symbol:"office--025--2x3",transform:[0,1,-1,0,840,960],doors:["w"]},{symbol:"machinery--357--2.2x4",transform:[1,0,0,1,960,960]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,0,1080]},{symbol:"iris-valves--005--1x1",transform:[-1,0,0,1,360,1140]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,360,1080]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,600,1080]},{symbol:"fuel--010--2x4",transform:[1,0,0,1,960,1080]}]},"g-301--bridge":{key:"g-301--bridge",id:301,items:[{symbol:"301--hull"},{symbol:"weaponry--013--1x2",transform:[-1,0,0,1,360,-60]},{symbol:"weaponry--013--1x2",transform:[1,0,0,1,840,-60]},{symbol:"stateroom--036--2x4"},{symbol:"office--001--2x2",transform:[-1,0,0,1,240,120],doors:["s"]},{symbol:"bridge--042--8x9",transform:[1,0,0,1,360,60]},{symbol:"office--001--2x2",transform:[1,0,0,1,960,120],doors:["s"]},{symbol:"stateroom--036--2x4",transform:[-1,0,0,1,1200,0]},{symbol:"stateroom--014--2x2",transform:[1,0,0,-1,0,480]},{symbol:"stateroom--014--2x2",transform:[1,0,0,-1,120,480]},{symbol:"stateroom--036--2x4",transform:[0,-1,1,0,0,600]},{symbol:"iris-valves--005--1x1",transform:[0,-1,1,0,0,360]},{symbol:"iris-valves--005--1x1",transform:[0,1,1,0,1140,240]},{symbol:"iris-valves--005--1x1",transform:[-1,0,0,1,360,540]},{symbol:"iris-valves--005--1x1",transform:[-1,0,0,1,960,540]},{symbol:"console--031--1x1.2",transform:[-1,0,0,1,360,60]},{symbol:"console--031--1x1.2",transform:[1,0,0,1,840,60]},{symbol:"misc-stellar-cartography--023--4x4",transform:[-1,0,0,1,1200,360]}]},"g-302--xboat-repair-bay":{key:"g-302--xboat-repair-bay",id:302,items:[{symbol:"302--hull"},{symbol:"office--006--2x2",transform:[0,1,-1,0,120,120],doors:["e","w"]},{symbol:"empty-room--020--2x4",transform:[-1,0,0,1,1200,0],doors:["s"]},{symbol:"lounge--015--2x4",transform:[-1,0,0,-1,480,540]},{symbol:"window--007--0x2.4",transform:[1,0,0,1,240,412]},{symbol:"empty-room--006--2x2",transform:[0,1,-1,0,600,420],doors:["e"]},{symbol:"ships-locker--011--1x2",transform:[0,1,1,0,540,420]},{symbol:"iris-valves--005--1x1",transform:[0,1,-1,0,1200,240]},{symbol:"shop--028--0.8x1.6",transform:[0,1,-1,0,660,420]},{symbol:"shop--027--0.4x1.6",transform:[-1,0,0,1,900,480]},{symbol:"sensors--003--1x1.4",transform:[].concat((0,y.Z)(function(t){var n=t/360*(2*Math.PI);return[Math.cos(n),Math.sin(n),-Math.sin(n),Math.cos(n)]}(45)),[95,-59])}]}};function Dt(t,n){var e="undefined"!==typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=function(t,n){if(!t)return;if("string"===typeof t)return jt(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return jt(t,n)}(t))||n&&t&&"number"===typeof t.length){e&&(t=e);var o=0,r=function(){};return{s:r,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,a=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return s=t.done,t},e:function(t){a=!0,i=t},f:function(){try{s||null==e.return||e.return()}finally{if(a)throw i}}}}function jt(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=new Array(n);e<n;e++)o[e]=t[e];return o}function zt(t,n,e,o,r){return Vt.apply(this,arguments)}function Vt(){return(Vt=(0,X.Z)(W().mark((function t(n,e,o,r,i){var s,a,l,c,u,h,g,d,f,m,v,x,w,b,P,k,Z,R,j,z,V,I,N,T,B,A,G,C,F,U,L,$,J,q;return W().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:s=i.scale,a=i.obsBounds,l=void 0===a||a,c=i.wallBounds,u=void 0===c||c,h=i.navTris,g=void 0!==h&&h,d=i.doors,f=void 0!==d&&d,m=i.labels,v=void 0!==m&&m,x=e[n.items[0].key],w=x.pngRect,o.width=w.width*s,o.height=w.height*s,(b=o.getContext("2d")).scale(s,s),b.translate(-w.x,-w.y),b.fillStyle="rgba(200, 200, 200, 1)",1===x.hull.length&&x.hull[0].holes.length?(P=x.hull[0].outline,M(b,P)):console.error("hull walls must: exist, be connected, have a hole"),b.fillStyle="rgba(0, 0, 100, 0.2)",S(b,n.navPoly),g&&(b.strokeStyle="rgba(0, 0, 0, 0.2)",n.navPoly.flatMap((function(t){return t.qualityTriangulate()})).forEach((function(t){return D(b,t)}))),b.lineJoin="round",x.singles.forEach((function(t){var n=t.poly,e=t.tags;if(e.includes("machine-base")&&(E(b,"#fff","#000",4),S(b,[n]),b.stroke()),e.includes("machine")&&(E(b,"#ccc","#000",4),S(b,[n]),b.stroke()),e.includes("fuel")){E(b,"#aaa","#000",2),S(b,[n]),b.stroke(),E(b,"#aaa","rgba(0, 0, 0, 0.5)",1);var o=p.average(n.outline);n.outline.forEach((function(t){return O(b,o,t)}))}})),k=n.items.slice(1),Z=Dt(k),t.prev=16,Z.s();case 18:if((R=Z.n()).done){t.next=30;break}return j=R.value,z=j.pngHref,V=j.pngRect,I=j.transformArray,b.save(),t.next=23,r(z);case 23:N=t.sent,I&&b.transform.apply(b,(0,y.Z)(I)),b.scale(.2,.2),b.drawImage(N,V.x,V.y),b.restore();case 28:t.next=18;break;case 30:t.next=35;break;case 32:t.prev=32,t.t0=t.catch(16),Z.e(t.t0);case 35:return t.prev=35,Z.f(),t.finish(35);case 38:if(T=n.groups,B=T.singles,A=T.obstacles,G=T.walls,b.fillStyle="rgba(0, 100, 0, 0.3)",l&&S(b,A),b.fillStyle="rgba(100, 0, 0, 0.3)",u&&S(b,G),b.fillStyle="rgba(0, 0, 0, 1)",S(b,n.hullTop),B.forEach((function(t){var n=t.poly;t.tags.includes("wall")&&(b.fillStyle="rgba(0, 0, 0, 1)",S(b,[n]))})),f&&(C=Mt(B,"door"),b.fillStyle="rgba(0, 0, 0, 1)",S(b,C),b.fillStyle="rgba(255, 255, 255, 1)",S(b,C.flatMap((function(t){return t.createInset(2)})))),v){b.font=Rt.font,b.textBaseline="top",F=Dt(n.labels);try{for(F.s();!(U=F.n()).done;)L=U.value,$=L.text,J=L.rect,q=L.padded,b.fillStyle="black",b.fillRect(q.x,q.y,q.width,q.height),b.fillStyle="white",b.fillText($,J.x,J.y)}catch(_){F.e(_)}finally{F.f()}}case 48:case"end":return t.stop()}}),t,null,[[16,32,35,38]])})))).apply(this,arguments)}var It,Nt=JSON.parse('{"101--hull":{"key":"101--hull","hull":[{"type":"Polygon","coordinates":[[[-4,-4],[1204,-4],[1204,1204],[-4,1204],[-4,-4]],[[4,4],[4,1196],[1196,1196],[1196,4],[4,4]]]}],"obstacles":[],"walls":[],"singles":[{"tags":["door","door-w-n"],"poly":{"type":"Polygon","coordinates":[[[-6,250.7],[-6,348.7],[6,348.7],[6,250.7]]]}},{"tags":["door","door-w-s"],"poly":{"type":"Polygon","coordinates":[[[-6,850.7],[-6,948.7],[6,948.7],[6,850.7]]]}},{"tags":["door","door-e-n"],"poly":{"type":"Polygon","coordinates":[[[1194,250.7],[1194,348.7],[1206,348.7],[1206,250.7]]]}},{"tags":["door","door-e-s"],"poly":{"type":"Polygon","coordinates":[[[1194,850.7],[1194,948.7],[1206,948.7],[1206,850.7]]]}},{"tags":["door","door-n-e"],"poly":{"type":"Polygon","coordinates":[[[948.999988,-6],[850.999988,-6],[850.999988,6],[948.999988,6]]]}},{"tags":["door","door-n-w"],"poly":{"type":"Polygon","coordinates":[[[348.999988,-6],[250.99998799999997,-6],[250.99998799999997,6],[348.999988,6]]]}},{"tags":["door","door-s-e"],"poly":{"type":"Polygon","coordinates":[[[948.999988,1194],[850.999988,1194],[850.999988,1206],[948.999988,1206]]]}},{"tags":["door","door-s-w"],"poly":{"type":"Polygon","coordinates":[[[348.999988,1194],[250.99998799999997,1194],[250.99998799999997,1206],[348.999988,1206]]]}}],"pngRect":{"x":-6,"y":-6,"width":1212,"height":1212}},"301--hull":{"key":"301--hull","hull":[{"type":"Polygon","coordinates":[[[-4,-4],[122.4,-4],[181.7,55.3],[360.5,55.3],[363.1,56.7],[424.38266296809985,118.67905686546464],[455,93],[493,71],[534,56],[578,49],[621,48],[664,56],[706,71],[744,93],[773.9200995299973,118.09427702515897],[837,56],[839,55],[1018,55],[1077,-4],[1204,-4],[1204,604],[-4,604],[-4,-4]],[[4,4],[4,596],[1196,596],[1196,4],[1081,4],[1023,62],[1020,63],[841,63],[779,125],[778.5,124.5],[772,131],[767,127],[737,102],[701,82],[661,67],[620,59],[578,59],[537,67],[498,82],[462,103],[433,127],[428,132],[419.3705882352941,124.32941176470588],[419,124.7],[358.4,63.3],[180,63.3],[177.1,62.1],[119.1,4],[4,4]]]}],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[300,121],[360,121],[360,61],[420,125.6],[384.4,180],[360,240],[300,240.6],[300,121]]]},{"type":"Polygon","coordinates":[[[780,125.60000600000001],[840,61.00000600000001],[840,121.00000600000001],[900,121.00000600000001],[900,240.600006],[840,240.000006],[815.6,180.000006],[780,125.60000600000001]]]}],"singles":[{"tags":["machine-base"],"poly":{"type":"Polygon","coordinates":[[[300,121],[360,121],[360,61],[420,125.6],[384.4,180],[360,240],[300,240.6],[300,121],[300,121]]]}},{"tags":["machine"],"poly":{"type":"Polygon","coordinates":[[[310.4,133],[335.4,133],[335.4,145],[347.4,145],[347.4,131],[370.4,131],[370.4,90],[406.7,127.2],[388.3,152.8],[363.8,195],[348.4,229.1],[310,229],[310.4,205],[321.4,205],[321.4,193],[310.4,193],[310.4,168.8],[323.4,168.5],[323.4,156],[310.4,156],[310.4,133],[310.4,133]]]}},{"tags":["machine-base"],"poly":{"type":"Polygon","coordinates":[[[900,121],[840,121],[840,61],[780,125.6],[815.6,180],[840,240],[900,240.6],[900,121],[900,121]]]}},{"tags":["machine"],"poly":{"type":"Polygon","coordinates":[[[889.5999879999999,133.000006],[864.5999879999999,133.000006],[864.5999879999999,145.000006],[852.5999879999999,145.000006],[852.5999879999999,131.000006],[829.5999879999999,131.000006],[829.5999879999999,90.00000600000001],[793.299988,127.200006],[811.699988,152.800006],[836.199988,195.000006],[851.5999879999999,229.100006],[889.999988,229.000006],[889.5999879999999,205.000006],[878.5999879999999,205.000006],[878.5999879999999,193.000006],[889.5999879999999,193.000006],[889.5999879999999,168.800006],[876.5999879999999,168.500006],[876.5999879999999,156.000006],[889.5999879999999,156.000006],[889.5999879999999,133.000006],[889.5999879999999,133.000006]]]}},{"tags":["door","door-w"],"poly":{"type":"Polygon","coordinates":[[[-6,251],[-6,349],[6,349],[6,251]]]}},{"tags":["door","door-e"],"poly":{"type":"Polygon","coordinates":[[[1194,251],[1194,349],[1206,349],[1206,251]]]}},{"tags":["door","door-s-e"],"poly":{"type":"Polygon","coordinates":[[[250,594],[250,606],[348,606],[348,594]]]}},{"tags":["door","door-s-w"],"poly":{"type":"Polygon","coordinates":[[[850,594],[850,606],[948,606],[948,594]]]}},{"tags":["window"],"poly":{"type":"Polygon","coordinates":[[[424,119],[455,93],[493,71],[534,56],[578,49],[621,48],[664,56],[706,71],[744,93],[775,119],[779,124],[772,131],[767,127],[737,102],[701,82],[661,67],[620,59],[578,59],[537,67],[498,82],[462,103],[433,127],[428,132],[419,124],[424,119],[424,119]]]}}],"pngRect":{"x":-6,"y":-22,"width":1212,"height":628}},"302--hull":{"key":"302--hull","hull":[{"type":"Polygon","coordinates":[[[-4,-4],[64,-4],[124,56],[124,122],[120,122],[120,235.0143298775798],[122.70917,238.322576],[238.79763680000002,410.43086480000005],[240,411.33702084698655],[240,409.9],[420,409.9],[427,415.9],[479.4,416],[598.7,416],[1076,297],[1076,-4],[1204,-4],[1204,604],[-4,604],[-4,-4]],[[4,4],[4,596],[1196,596],[1196,4],[1084,4],[1084,300],[1079.9,304.3],[600.6,423.8],[548.4,423.8],[548.4,424],[240,424],[240,421.8757724232995],[236.862554,421.8683280000001],[116.076866,242.79612],[116.11204165697707,236.39999999999998],[107.1,236.39999999999998],[107.1,120.8],[116,120.8],[116,60],[60,4],[4,4]]]}],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[60,480],[60.6,240],[120,240],[240,420],[240,540],[120,540],[60,480]]]}],"singles":[{"tags":["machine"],"poly":{"type":"Polygon","coordinates":[[[60.6,240],[60,480],[120,540],[240,540],[240,420],[120,240],[60,240],[60.6,240],[60.6,240]]]}},{"tags":["fuel"],"poly":{"type":"Polygon","coordinates":[[[126,525],[75,474],[75.6,255],[112.5,255],[225,424.5],[225,525],[126,525]]]}},{"tags":["window"],"poly":{"type":"Polygon","coordinates":[[[240,409.9],[240,424],[420,424],[420,409.9]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[897.5,346.3],[897.5,542],[902.5,542],[902.5,346.3]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1081.9240479999999,537],[600.024048,537],[600.024048,542],[1081.9240479999999,542]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1077.5,300],[1077.5,542],[1082.5,542],[1082.5,300]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1168.5,178],[1168.5,182],[1196.9,182],[1196.9,178]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1168.5,118],[1168.5,122],[1196.9,122],[1196.9,118]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1168.5,58],[1168.5,62],[1196.9,62],[1196.9,58]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1167.5,0],[1167.5,236.4],[1173,236.4],[1173,0]]]}},{"tags":["door","door-w"],"poly":{"type":"Polygon","coordinates":[[[-6,251],[-6,349],[6,349],[6,251]]]}},{"tags":["door","door-e"],"poly":{"type":"Polygon","coordinates":[[[1194,251],[1194,349],[1206,349],[1206,251]]]}},{"tags":["door","door-s-e"],"poly":{"type":"Polygon","coordinates":[[[249.996,594],[249.996,606],[347.996,606],[347.996,594]]]}},{"tags":["door","door-s-w"],"poly":{"type":"Polygon","coordinates":[[[850,594],[850,606],[948,606],[948,594]]]}},{"tags":["door","door-n","iris"],"poly":{"type":"Polygon","coordinates":[[[485,414],[485,426],[535,426],[535,414]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1086,12.000634999999875],[1074,12.000634999999875],[1074,109.10063499999978],[1086,109.10063499999978]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[728,536],[728,544],[772,544],[772,536]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[904,428],[896,428],[896,472],[904,472]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1084,367.00004899999976],[1076,367.00004899999976],[1076,472.00004899999976],[1084,472.00004899999976]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1174,187],[1166,187],[1166,231],[1174,231]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1174,127],[1166,127],[1166,171],[1174,171]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1174,67],[1166,67],[1166,111],[1174,111]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1174,8],[1166,8],[1166,52],[1174,52]]]}}],"pngRect":{"x":-6,"y":-61,"width":1212,"height":667}},"bridge--042--8x9":{"key":"bridge--042--8x9","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[56,863],[316,389],[572,640],[569,869],[56,863]]]},{"type":"Polygon","coordinates":[[[110.84667999999999,1653.086914],[386.84668,1653.086914],[386.84668,1798.086914],[110.84667999999999,1798.086914],[110.84667999999999,1653.086914]]]},{"type":"Polygon","coordinates":[[[187.83239700000001,1539.166138],[289.832397,1539.166138],[289.832397,1634.166138],[187.83239700000001,1634.166138],[187.83239700000001,1539.166138]]]},{"type":"Polygon","coordinates":[[[256.532104,1813.54126],[358.532104,1813.54126],[358.532104,1914.54126],[256.532104,1914.54126],[256.532104,1813.54126]]]},{"type":"Polygon","coordinates":[[[401,220],[1995,229],[1995,298],[401,298],[401,220]]]},{"type":"Polygon","coordinates":[[[601,2098],[808,2214],[1026,2272],[1201,2284],[1425,2263],[1636,2193],[1801,2098],[1801,2225],[1201,2344],[601,2221],[601,2098]]]},{"type":"Polygon","coordinates":[[[672.6329350000001,317.706226],[829.6329350000001,317.706226],[829.6329350000001,454.706226],[672.6329350000001,454.706226],[672.6329350000001,317.706226]]]},{"type":"Polygon","coordinates":[[[842,1818],[916,1818],[924,1798],[972,1757],[977,1695],[1425,1695],[1425,1759],[1479,1798],[1490,1818],[1561,1818],[1561,1908],[1495,1908],[1461,1948],[1425,1962],[1425,2031],[977,2031],[977,1964],[919,1926],[911,1908],[842,1908],[842,1818]]]},{"type":"Polygon","coordinates":[[[972.029785,314.502884],[1129.029785,314.502884],[1129.029785,453.502884],[972.029785,453.502884],[972.029785,314.502884]]]},{"type":"Polygon","coordinates":[[[1273.115723,314.502884],[1429.115723,314.502884],[1429.115723,453.502884],[1273.115723,453.502884],[1273.115723,314.502884]]]},{"type":"Polygon","coordinates":[[[1574.955078,317.502884],[1730.955078,317.502884],[1730.955078,456.502884],[1574.955078,456.502884],[1574.955078,317.502884]]]},{"type":"Polygon","coordinates":[[[1828,644],[2087,388],[2353,869],[1830,870],[1828,644]]]},{"type":"Polygon","coordinates":[[[1838.285156,1540.214661],[2217.285156,1540.214661],[2217.285156,1738.214661],[1838.285156,1738.214661],[1838.285156,1540.214661]]]},{"type":"Polygon","coordinates":[[[1853.099854,1388.905273],[1990.099854,1388.905273],[1990.099854,1492.905273],[1853.099854,1492.905273],[1853.099854,1388.905273]]]},{"type":"Polygon","coordinates":[[[2044.697021,1349.6035769999999],[2158.697021,1349.6035769999999],[2158.697021,1492.6035769999999],[2044.697021,1492.6035769999999],[2044.697021,1349.6035769999999]]]},{"type":"Polygon","coordinates":[[[2223.414795,1349.6035769999999],[2337.414795,1349.6035769999999],[2337.414795,1492.6035769999999],[2223.414795,1492.6035769999999],[2223.414795,1349.6035769999999]]]}],"walls":[{"type":"Polygon","coordinates":[[[-18,1192],[609,1192],[609,1213],[20,1213],[43,1432],[95,1610],[179,1795],[337,2014],[590,2217],[907,2351],[1201,2387],[1495,2351],[1812,2217],[2065,2014],[2223,1795],[2307,1610],[2335.3370786516853,1513],[1790,1513],[1790,1564],[902,1564],[902,1502],[1790,1502],[1790,1492],[2001,1492],[2001,1343],[2021,1343],[2021,1492],[2182,1492],[2182,1343],[2202,1343],[2202,1492],[2341.4719101123596,1492],[2359,1432],[2381.951965065502,1213],[1790,1213],[1790,1192],[2410,1192],[2410,1203],[2420,1203],[2419,2719],[1201,2721],[1200,2721],[-17,2719],[-18,1213],[-18,1192]]]},{"type":"Polygon","coordinates":[[[-16,902],[49,710],[116,576],[183,468],[282,350],[316,315],[343,343],[311,376],[186,531],[84,721],[25.4,892],[592,892],[592,743],[612,743],[612,892],[891,892],[891,743],[911,743],[911,892],[1212,892],[1212,913],[-16,910.4],[-16,902]]]},{"type":"Polygon","coordinates":[[[1491,743],[1511,743],[1511,902],[1491,902],[1491,743]]]},{"type":"Polygon","coordinates":[[[1791,743],[1811,743],[1811,902],[1791,902],[1791,743]]]},{"type":"Polygon","coordinates":[[[2061,343],[2088,315],[2122,350],[2221,468],[2288,576],[2356,711],[2420,902],[2380,902],[2350,802],[2288,652],[2197,503],[2093,376],[2061,343]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[59,1492],[59,1513],[901,1513],[901,1492]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[589,1199],[589,2229],[610,2229],[610,1199]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1790,1199],[1790,2229],[1811,2229],[1811,1199]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,892],[0,913],[2410,913],[2410,892]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,900],[-10,1200],[10,1200],[10,900]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[600,741.1],[600,760.1],[900,760.1],[900,741.1]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[576,1830],[576,2060],[624,2060],[624,1830]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1777,1830],[1777,2060],[1825,2060],[1825,1830]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1777,1235],[1777,1465],[1825,1465],[1825,1235]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[575,1235],[575,1465],[623,1465],[623,1235]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[634.999988,775.5615230000001],[864.999988,775.5615230000001],[864.999988,727.5615230000001],[634.999988,727.5615230000001]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[1534.999988,775.5615230000001],[1764.999988,775.5615230000001],[1764.999988,727.5615230000001],[1534.999988,727.5615230000001]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[635,1526],[865,1526],[865,1478],[635,1478]]]}},{"tags":["door","iris"],"poly":{"type":"Polygon","coordinates":[[[2378,935],[2378,1165],[2426,1165],[2426,935]]]}},{"tags":["door","iris"],"poly":{"type":"Polygon","coordinates":[[[-24,935],[-24,1165],[24,1165],[24,935]]]}},{"tags":["door","iris"],"poly":{"type":"Polygon","coordinates":[[[1235.000012,927.0942380000001],[1465.000012,927.0942380000001],[1465.000012,879.0942380000001],[1235.000012,879.0942380000001]]]}},{"tags":["label","bridge"],"poly":{"type":"Polygon","coordinates":[[[1153,549],[1153,649],[1253,649],[1253,549]]]}},{"tags":["label","locker"],"poly":{"type":"Polygon","coordinates":[[[703,775],[703,875],[803,875],[803,775]]]}},{"tags":["label","locker"],"poly":{"type":"Polygon","coordinates":[[[1603,775],[1603,875],[1703,875],[1703,775]]]}},{"tags":["label","locker"],"poly":{"type":"Polygon","coordinates":[[[253,1299],[253,1399],[353,1399],[353,1299]]]}},{"tags":["label","toilet"],"poly":{"type":"Polygon","coordinates":[[[2053,1229],[2053,1329],[2153,1329],[2153,1229]]]}},{"tags":["label","briefing"],"poly":{"type":"Polygon","coordinates":[[[1153,1811],[1153,1911],[1253,1911],[1253,1811]]]}},{"tags":["label","fuel"],"poly":{"type":"Polygon","coordinates":[[[402,2499],[402,2599],[502,2599],[502,2499]]]}},{"tags":["label","fuel"],"poly":{"type":"Polygon","coordinates":[[[1893,2499],[1893,2599],[1993,2599],[1993,2499]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[1932,1899],[1932,1999],[2032,1999],[2032,1899]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[403,1899],[403,1999],[503,1999],[503,1899]]]}},{"tags":["label","cpu"],"poly":{"type":"Polygon","coordinates":[[[300,650],[300,750],[400,750],[400,650]]]}},{"tags":["label","cpu"],"poly":{"type":"Polygon","coordinates":[[[2000,650],[2000,750],[2100,750],[2100,650]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[1503,741.1],[1503,761.1],[1803,761.1],[1803,741.1]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[2390,900],[2390,1200],[2410,1200],[2410,900]]]}}],"pngRect":{"x":-19,"y":-69,"width":2439,"height":2790}},"console--031--1x1.2":{"key":"console--031--1x1.2","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[-4,-4],[248,-4],[248,71.6],[373,71.6],[373,228.29999999999998],[248,228.29999999999998],[248,300],[-4,300],[-4,-4]]]}],"walls":[],"singles":[],"pngRect":{"x":-4,"y":-4,"width":377,"height":307}},"empty-room--006--2x2":{"key":"empty-room--006--2x2","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,610],[-10,610],[-10,-10]],[[10,10],[10,590],[590,590],[590,10],[10,10]]]}],"singles":[{"tags":["door","e"],"poly":{"type":"Polygon","coordinates":[[[619.9666259999999,335.000006],[579.9666259999999,335.000006],[579.9666259999999,565.000006],[619.9666259999999,565.000006]]]}},{"tags":["door","w"],"poly":{"type":"Polygon","coordinates":[[[20.966656,335.000006],[-19.033344,335.000006],[-19.033344,565.000006],[20.966656,565.000006]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,610],[10,610],[10,-10]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,610],[610,610],[610,-10]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":620}},"empty-room--013--2x3":{"key":"empty-room--013--2x3","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[10,-10],[10,890],[610,890],[610,910],[0,910],[0,900],[-10,900],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[340,-20],[340,20],[560,20],[560,-20]]]}},{"tags":["wall","n"],"poly":{"type":"Polygon","coordinates":[[[0,-10],[0,10],[590,10],[590,-10]]]}},{"tags":["wall","e"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,900],[610,900],[610,-10]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":920}},"empty-room--020--2x4":{"key":"empty-room--020--2x4","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,1210],[-10,1210],[-10,-10]],[[10,10],[10,1190],[590,1190],[590,10],[10,10]]]}],"singles":[{"tags":["door","n"],"poly":{"type":"Polygon","coordinates":[[[330,-20],[330,20],[560,20],[560,-20]]]}},{"tags":["door","s"],"poly":{"type":"Polygon","coordinates":[[[330,1180],[330,1220],[560,1220],[560,1180]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,10],[610,10],[610,-10]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,1190],[-10,1210],[610,1210],[610,1190]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":1220}},"empty-room--039--3x4":{"key":"empty-room--039--3x4","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[0,-10],[910,-10],[910,1200],[890,1200],[890,10],[0,10],[0,-10]]]}],"singles":[{"tags":["wall","w"],"poly":{"type":"Polygon","coordinates":[[[-9,0],[-9,1210],[11,1210],[11,0]]]}},{"tags":["wall","s"],"poly":{"type":"Polygon","coordinates":[[[0,1190],[0,1210],[900,1210],[900,1190]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[20,340],[-20,340],[-20,560],[20,560]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[20,630],[-20,630],[-20,850],[20,850]]]}}],"pngRect":{"x":-10,"y":-10,"width":920,"height":1220}},"fresher--020--2x2":{"key":"fresher--020--2x2","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[243,0],[358,0],[358,153],[243,153],[243,0]]]},{"type":"Polygon","coordinates":[[[402.3,0],[600,0],[600,119.5],[402.3,119.5],[402.3,0]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[590,-10],[590,10],[410,10],[410,307.1],[390,307.1],[390,10],[210,10],[210,307.1],[190,307.1],[190,10],[10,10],[10,590],[600,590],[600,610],[0,610],[0,600],[-10,600],[-10,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,600],[610,600],[610,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[624,339.999994],[576,339.999994],[576,559.999994],[624,559.999994]]]}},{"tags":["label","bathroom"],"poly":{"type":"Polygon","coordinates":[[[251.9,388.2],[251.9,488.2],[351.9,488.2],[351.9,388.2]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":620}},"fresher--025--2x3":{"key":"fresher--025--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[300,0],[300,119.5],[0,119.5],[0,0]]]},{"type":"Polygon","coordinates":[[[342.5,0],[457.5,0],[457.5,153],[342.5,153],[342.5,0]]]},{"type":"Polygon","coordinates":[[[542.5,0],[657.5,0],[657.5,153],[542.5,153],[542.5,0]]]},{"type":"Polygon","coordinates":[[[742.5,0],[857.5,0],[857.5,153],[742.5,153],[742.5,0]]]}],"walls":[{"type":"Polygon","coordinates":[[[0,-10],[910,-10],[910,600],[900,600],[900,610],[0,610],[0,590],[890,590],[890,10],[710,10],[710,307.1],[690,307.1],[690,10],[510,10],[510,307.1],[490,307.1],[490,10],[310,10],[310,307.1],[290,307.1],[290,10],[0,10],[0,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,600],[10,600],[10,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[24,339.999994],[-24,339.999994],[-24,559.999994],[24,559.999994]]]}},{"tags":["label","toilet"],"poly":{"type":"Polygon","coordinates":[[[251.9,388.2],[251.9,488.2],[351.9,488.2],[351.9,388.2]]]}}],"pngRect":{"x":-10,"y":-10,"width":920,"height":620}},"fuel--010--2x4":{"key":"fuel--010--2x4","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-19,-19.5],[1219,-19.5],[1219,619.5],[-19,619.5],[-19,-19.5]]]}],"singles":[{"tags":["label","fuel"],"poly":{"type":"Polygon","coordinates":[[[550,90],[550,190],[650,190],[650,90]]]}}],"pngRect":{"x":-19,"y":-19.6,"width":1238,"height":639}},"iris-valves--005--1x1":{"key":"iris-valves--005--1x1","hull":[],"obstacles":[],"walls":[],"singles":[],"pngRect":{"x":0,"y":40,"width":221,"height":220}},"lifeboat--small-craft":{"key":"lifeboat--small-craft","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[33,555.8],[353,555.8],[353,691.6999999999999],[33,691.6999999999999],[33,555.8]]]},{"type":"Polygon","coordinates":[[[33,735.8],[520.2,735.8],[520.2,871.6999999999999],[33,871.6999999999999],[33,735.8]]]},{"type":"Polygon","coordinates":[[[34,375.8],[353,375.8],[353,508],[34,508],[34,375.8]]]},{"type":"Polygon","coordinates":[[[109,164],[263.9,164],[263.9,302],[109,302],[109,164]]]},{"type":"Polygon","coordinates":[[[342.9,167.8],[493.9,167.8],[493.9,300],[342.9,300],[342.9,167.8]]]}],"walls":[{"type":"Polygon","coordinates":[[[-20,300],[0,185.5],[58.8,87],[125.7,29.1],[219.4,-12.2],[300,-20.1],[386.7,-11.9],[504,53.5],[578.8,145.6],[620.2,300],[582.4,300],[551.7,181],[486.1,86.3],[371.9,25.4],[230.9,27],[109.8,87.9],[47.6,181],[20,300],[20,880],[620,880],[620,1220],[-15,1220],[-20,910],[-20,300]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[620,340.900024],[580,340.900024],[580,560.900024],[620,560.900024]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,300],[590,900],[610,900],[610,300]]]}},{"tags":["label","escape","pod"],"poly":{"type":"Polygon","coordinates":[[[255.7,1016.1],[255.7,1107],[346.6,1107],[346.6,1016.1]]]}},{"tags":["machine-base"],"poly":{"type":"Polygon","coordinates":[[[0,300],[78.1,99.3],[520.9,96.6],[600,300],[600,900],[0,900],[0,300],[0,300]]]}}],"pngRect":{"x":-20,"y":-20,"width":640,"height":1238}},"lounge--009--2x3":{"key":"lounge--009--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[9.2,0],[123,0],[123,600],[9.2,600],[9.2,0]]]},{"type":"Polygon","coordinates":[[[323.2,324.8],[574.2,324.8],[574.2,579.8],[323.2,579.8],[323.2,324.8]]]},{"type":"Polygon","coordinates":[[[612.8,324.8],[882.1999999999999,324.8],[882.1999999999999,579.8],[612.8,579.8],[612.8,324.8]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[600,-10],[600,10],[10,10],[10,590],[900,590],[900,610],[-10,610],[-10,-10]]]}],"singles":[],"pngRect":{"x":-10,"y":-10,"width":920,"height":620}},"lounge--015--2x4":{"key":"lounge--015--2x4","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[9.2,51.4],[112.5,51.4],[112.5,190],[9.2,190],[9.2,51.4]]]},{"type":"Polygon","coordinates":[[[9.2,251.8],[152.79999999999998,251.8],[152.79999999999998,363.5],[9.2,363.5],[9.2,251.8]]]},{"type":"Polygon","coordinates":[[[9.2,446.8],[152.79999999999998,446.8],[152.79999999999998,558.5],[9.2,558.5],[9.2,446.8]]]},{"type":"Polygon","coordinates":[[[300,300],[423.3,300],[423.3,600],[300,600],[300,300]]]},{"type":"Polygon","coordinates":[[[612.8,413.5],[1185.4,413.5],[1185.4,550],[612.8,550],[612.8,413.5]]]},{"type":"Polygon","coordinates":[[[684.8,72.7],[830.5,19.7],[967.6,19.7],[1113.3,72.7],[1175.9,114.1],[1175.9,197.5],[1067.9,197.5],[1067.2,199.5],[921.5,146.4],[876.7,146.4],[730.9,199.5],[684.8,72.7]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[310,-10],[310,10],[10,10],[10,200],[160,200],[160,220],[10,220],[10,395],[160,395],[160,415],[10,415],[10,590],[290,590],[290,300],[310,300],[310,590],[1190,590],[1190,-10],[1210,-10],[1210,610],[-10,610],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[275,35],[275,265],[323,265],[323,35]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[290,0],[290,610],[310,610],[310,0]]]}}],"pngRect":{"x":-10,"y":-10,"width":1220,"height":620}},"machinery--091--1.6x1.8":{"key":"machinery--091--1.6x1.8","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[-10,550],[0,174.4],[27.9,103.9],[93.6,35.3],[180.3,0],[300,0],[381.6,30.1],[457.8,113.9],[480,173.3],[490,550],[-10,550]]]}],"walls":[],"singles":[],"pngRect":{"x":-10,"y":-10,"width":500,"height":559}},"machinery--155--1.8x3.6":{"key":"machinery--155--1.8x3.6","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[10,0],[530,0],[530,1080],[10,1080],[10,0]]]}],"walls":[],"singles":[],"pngRect":{"x":10,"y":-10,"width":520,"height":1100}},"machinery--156--1.8x3.6":{"key":"machinery--156--1.8x3.6","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[540,0],[540,1080],[0,1080],[0,0]]]}],"walls":[],"singles":[],"pngRect":{"x":-10,"y":-10,"width":560,"height":1100}},"machinery--158--1.8x3.6":{"key":"machinery--158--1.8x3.6","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[540,0],[540,1080],[0,1080],[0,0]]]}],"walls":[],"singles":[],"pngRect":{"x":-10,"y":-10,"width":560,"height":1100}},"machinery--357--2.2x4":{"key":"machinery--357--2.2x4","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-9,-10],[1211,-10],[1211,610],[-9,610],[-9,-10]]]}],"singles":[],"pngRect":{"x":-10,"y":-72.5,"width":1220,"height":683}},"medical--007--2x3":{"key":"medical--007--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,450.3],[99.3,450.3],[99.3,340.3],[201.5,340.3],[201.5,450.3],[300,450.3],[300,600],[0,600],[0,450.3]]]},{"type":"Polygon","coordinates":[[[347,163.6],[548.3,163.6],[548.3,600],[347,600],[347,163.6]]]},{"type":"Polygon","coordinates":[[[650,163.6],[900,163.6],[900,600],[650,600],[650,163.6]]]}],"walls":[{"type":"Polygon","coordinates":[[[0,590],[890,590],[890,-10],[910,-10],[910,610],[0,610],[0,590]]]}],"singles":[{"tags":["door","w"],"poly":{"type":"Polygon","coordinates":[[[20,40.900024],[-20,40.900024],[-20,260.900024],[20,260.900024]]]}},{"tags":["door","n"],"poly":{"type":"Polygon","coordinates":[[[40,-20],[40,20],[260,20],[260,-20]]]}},{"tags":["label","medical"],"poly":{"type":"Polygon","coordinates":[[[209.1,209.1],[209.1,300],[300,300],[300,209.1]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,600],[10,600],[10,-10]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,-10],[0,10],[900,10],[900,-10]]]}}],"pngRect":{"x":-10,"y":-10,"width":920,"height":620}},"medical--008--2x3":{"key":"medical--008--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,300],[114.9,300],[114.9,378.6],[203.3,290.2],[311.8,398.7],[220.7,489.7],[300,489.7],[300,600],[0,600],[0,300]]]},{"type":"Polygon","coordinates":[[[553.3,0],[900,0],[900,600],[553.3,600],[553.3,0]]]}],"walls":[{"type":"Polygon","coordinates":[[[0,590],[890,590],[890,-10],[910,-10],[910,610],[0,610],[0,590]]]}],"singles":[{"tags":["door","w"],"poly":{"type":"Polygon","coordinates":[[[20,40.900024],[-20,40.900024],[-20,260.900024],[20,260.900024]]]}},{"tags":["door","n"],"poly":{"type":"Polygon","coordinates":[[[40,-20],[40,20],[260,20],[260,-20]]]}},{"tags":["label","medical"],"poly":{"type":"Polygon","coordinates":[[[300,209.1],[300,300],[390.9,300],[390.9,209.1]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,600],[10,600],[10,-10]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,-10],[0,10],[900,10],[900,-10]]]}}],"pngRect":{"x":-10,"y":-10,"width":920,"height":620}},"misc-stellar-cartography--023--4x4":{"key":"misc-stellar-cartography--023--4x4","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[79.897765,457.98358600000006],[900.443425,-0.1324840000000025],[936.547179,53.73328799999999],[675.414979,312.5962880000001],[556.823025,299.9094160000001],[420.24017100000003,355.60624400000006],[328.73044100000004,472.20805400000006],[300.266479,610.192888],[328.80805900000007,732.934028],[430.116623,845.77723],[556.928709,899.7003780000001],[698.8208070000001,885.9655920000001],[823.778365,804.3100860000001],[882.2928150000001,704.1798360000001],[900.3306590000001,561.5802280000001],[889.199639,521.0697180000001],[1149.6034650000001,263.41893600000003],[1199.533285,314.86809600000004],[899.830545,968.797426],[441.58283100000006,1123.245374],[126.476567,822.5442720000001],[79.897765,457.98358600000006]]]},{"type":"Polygon","coordinates":[[[328.2539924,609.3540977999999],[366.0422088,457.7938625999998],[499.5549384000001,491.0823297999998],[461.7667220000001,642.6425649999999],[328.2539924,609.3540977999999]]]},{"type":"Polygon","coordinates":[[[556.5536892,741.5258476],[708.1139244000001,703.7376312],[741.2572384000001,836.6681832],[589.6970032,874.4563996],[556.5536892,741.5258476]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[905.3,-10],[1210,295],[1210,1210],[-10,1210],[-10,-10]],[[10,10],[10,1190],[1190,1190],[1190,302.9],[897.2,10],[10,10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[931.09596069,65.06971789800002],[1136.15699069,270.1307478980001],[1170.09812669,236.18961189800007],[965.03709669,31.128581897999993]]]}},{"tags":["label","stellar","cartography"],"poly":{"type":"Polygon","coordinates":[[[384,240],[384,340],[484,340],[484,240]]]}}],"pngRect":{"x":-10,"y":-10,"width":1220,"height":1220}},"office--001--2x2":{"key":"office--001--2x2","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[71.191702,299.97373300000004],[74.79170200000002,71.873733],[599.991702,69.073733],[599.991702,147.37373300000002],[299.99170200000003,147.37373300000002],[150.29170200000002,299.97373300000004],[148.79170200000002,589.973733],[73.29170200000002,590.5737330000001],[71.191702,299.97373300000004]]]},{"type":"Polygon","coordinates":[[[213.4,318.2],[318.9,211.2],[417.4,307.4],[307.3,417.3],[213.4,318.2]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,610],[-10,610],[-10,-10]],[[10,10],[10,590],[590,590],[590,10],[10,10]]]}],"singles":[{"tags":["door","e"],"poly":{"type":"Polygon","coordinates":[[[575,300],[575,575],[623,575],[623,300]]]}},{"tags":["door","s"],"poly":{"type":"Polygon","coordinates":[[[330,575],[330,623],[560,623],[560,575]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,590],[0,610],[610,610],[610,590]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,610],[610,610],[610,-10]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[70,40],[70,140],[170,140],[170,40]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":620}},"office--006--2x2":{"key":"office--006--2x2","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[9.2,140.6],[591.4000000000001,140.6],[591.4000000000001,214],[9.2,214],[9.2,140.6]]]},{"type":"Polygon","coordinates":[[[70.3,226.5],[227.60000000000002,226.5],[227.60000000000002,365.1],[70.3,365.1],[70.3,226.5]]]},{"type":"Polygon","coordinates":[[[370.3,226.5],[527.6,226.5],[527.6,365.1],[370.3,365.1],[370.3,226.5]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[10,-10],[10,0],[590,0],[590,-10],[610,-10],[610,610],[-10,610],[-10,-10]],[[10,61.5],[10,590],[590,590],[590,61.5],[10,61.5]]]}],"singles":[{"tags":["window"],"poly":{"type":"Polygon","coordinates":[[[10,0],[10,61.5],[590,61.5],[590,0]]]}},{"tags":["door","e"],"poly":{"type":"Polygon","coordinates":[[[575,330],[575,560],[623,560],[623,330]]]}},{"tags":["door","s"],"poly":{"type":"Polygon","coordinates":[[[185,575],[185,623],[415,623],[415,575]]]}},{"tags":["door","w"],"poly":{"type":"Polygon","coordinates":[[[-24,330],[-24,560],[24,560],[24,330]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,590],[0,610],[610,610],[610,590]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,0],[590,610],[610,610],[610,0]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,0],[-10,610],[10,610],[10,0]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":620}},"office--020--2x3":{"key":"office--020--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[600,0],[600,148.8],[451,148.8],[451,300.5],[300,300.5],[300,148.8],[149.8,148.8],[149.8,751.2],[300,751.2],[300,599.5],[451,599.5],[451,751.2],[600,751.2],[600,900],[0,900],[0,0]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,10],[10,10],[10,890],[610,890],[610,910],[-10,910],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[620,340.900024],[580,340.900024],[580,560.900024],[620,560.900024]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,910],[610,910],[610,-10]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[300,399.9],[300,490.79999999999995],[390.9,490.79999999999995],[390.9,399.9]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":920}},"office--023--2x3":{"key":"office--023--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[55.9,50.2],[549.2,50.2],[549.2,247.2],[55.9,247.2],[55.9,50.2]]]},{"type":"Polygon","coordinates":[[[335.4,400.2],[433.2,400.2],[433.2,501.1],[335.4,501.1],[335.4,400.2]]]},{"type":"Polygon","coordinates":[[[335.4,700.2],[433.2,700.2],[433.2,801.1],[335.4,801.1],[335.4,700.2]]]},{"type":"Polygon","coordinates":[[[448,300],[600,300],[600,900],[448,900],[448,300]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,900],[590,900],[590,10],[10,10],[10,900],[-10,900],[-10,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,890],[0,910],[600,910],[600,890]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[40,880],[40,920],[260,920],[260,880]]]}},{"tags":["label","cpu"],"poly":{"type":"Polygon","coordinates":[[[250,100],[250,190.9],[340.9,190.9],[340.9,100]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[164.2,550],[164.2,640.9],[255.1,640.9],[255.1,550]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":934}},"office--025--2x3":{"key":"office--025--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[49.4,50.6],[549.7,50.6],[549.7,251],[49.4,251],[49.4,50.6]]]},{"type":"Polygon","coordinates":[[[237.3,523.9],[388.3,523.9],[388.3,300],[600,300],[600,900],[388.3,900],[388.3,675.5999999999999],[237.3,675.5999999999999],[237.3,523.9]]]}],"walls":[{"type":"Polygon","coordinates":[[[0,-10],[610,-10],[610,910],[0,910],[0,890],[590,890],[590,10],[0,10],[0,-10]]]}],"singles":[{"tags":["door","w"],"poly":{"type":"Polygon","coordinates":[[[20,640.900024],[-20,640.900024],[-20,860.900024],[20,860.900024]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[186.8,356.5],[186.8,447.4],[277.70000000000005,447.4],[277.70000000000005,356.5]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,910],[10,910],[10,-10]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":920}},"office--026--2x3":{"key":"office--026--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[211.7,0],[211.7,222.9],[362.7,222.9],[362.7,374.6],[211.7,374.6],[211.7,600],[0,600],[0,0]]]},{"type":"Polygon","coordinates":[[[49.4,650.6],[549.7,650.6],[549.7,851],[49.4,851],[49.4,650.6]]]}],"walls":[{"type":"Polygon","coordinates":[[[-34,147],[-10,147],[-10,-10],[610,-10],[610,10],[10,10],[10,147],[33,147],[33,454],[10,454],[10,890],[610,890],[610,910],[-10,910],[-10,454],[-34,454],[-34,147]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[620,40.900024],[580,40.900024],[580,260.900024],[620,260.900024]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,910],[610,910],[610,-10]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[390.9,40.9],[390.9,131.8],[481.79999999999995,131.8],[481.79999999999995,40.9]]]}},{"tags":["label","cpu"],"poly":{"type":"Polygon","coordinates":[[[300,699.9],[300,790.8],[390.9,790.8],[390.9,699.9]]]}}],"pngRect":{"x":-34,"y":-10,"width":644,"height":920}},"office--061--3x4":{"key":"office--061--3x4","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[900,0],[900,1202.2],[0,1202.2],[0,1047.5],[161.6,1047.5],[161.6,928.7],[318.4,928.7],[318.4,1047.5],[748,1047.5],[748,902.9],[627.6,902.9],[627.6,750],[748,750],[748,452.9],[627.6,452.9],[627.6,300],[748,300],[748,154.7],[318.4,154.7],[318.4,273.5],[161.6,273.5],[161.6,154.7],[0,154.7],[0,0]]]}],"walls":[{"type":"Polygon","coordinates":[[[0,-10],[910,-10],[910,1200],[900,1200],[900,1210],[0,1210],[0,1190],[890,1190],[890,10],[0,10],[0,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,1200],[10,1200],[10,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[20,640.900024],[-20,640.900024],[-20,860.900024],[20,860.900024]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[20,340.900024],[-20,340.900024],[-20,560.900024],[20,560.900024]]]}},{"tags":["label","office"],"poly":{"type":"Polygon","coordinates":[[[350,550],[350,640.9],[440.9,640.9],[440.9,550]]]}}],"pngRect":{"x":-10,"y":-10,"width":920,"height":1220}},"sensors--003--1x1.4":{"key":"sensors--003--1x1.4","hull":[],"obstacles":[],"walls":[],"singles":[],"pngRect":{"x":88.5,"y":-10,"width":423,"height":319}},"ships-locker--011--1x2":{"key":"ships-locker--011--1x2","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,300],[590,300],[590,10],[10,10],[10,300],[-10,300],[-10,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[-10,-10],[-10,10],[610,10],[610,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[50,-21],[50,19],[250,19],[250,-21]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[350,-21],[350,19],[550,19],[550,-21]]]}}],"pngRect":{"x":-10,"y":-20,"width":620,"height":334}},"shop--027--0.4x1.6":{"key":"shop--027--0.4x1.6","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[56.5,110],[543.5,110],[543.5,238],[56.5,238],[56.5,110]]]}],"walls":[],"singles":[],"pngRect":{"x":56.5,"y":110,"width":487,"height":128}},"shop--028--0.8x1.6":{"key":"shop--028--0.8x1.6","hull":[],"obstacles":[],"walls":[{"type":"Polygon","coordinates":[[[57.5,33],[542.5,33],[542.5,267],[57.5,267],[57.5,33]]]}],"singles":[],"pngRect":{"x":57.5,"y":33,"width":485,"height":234}},"stateroom--014--2x2":{"key":"stateroom--014--2x2","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[49.6,118.7],[248.4,118.7],[248.4,494.5],[49.6,494.5],[49.6,118.7]]]},{"type":"Polygon","coordinates":[[[397.3,8],[502.6,8],[502.6,177.8],[397.3,177.8],[397.3,8]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,610],[590,610],[590,10],[310,10],[310,310],[290,310],[290,10],[10,10],[10,610],[-10,610],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[330,578],[330,626],[560,626],[560,578]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[330,275],[330,323],[560,323],[560,275]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,590],[0,610],[590,610],[590,590]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[300,290],[300,310],[600,310],[600,290]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[400,400],[400,500],[500,500],[500,400]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":620}},"stateroom--018--2x3":{"key":"stateroom--018--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,8],[148.9,8],[148.9,54.6],[499.1,54.6],[499.1,250.9],[148.9,250.9],[148.9,654.6],[499.1,654.6],[499.1,850.9000000000001],[148.9,850.9000000000001],[148.9,900],[0,900],[0,8]]]},{"type":"Polygon","coordinates":[[[165.9,399.2],[261.8,399.2],[261.8,501.1],[165.9,501.1],[165.9,399.2]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[590,-10],[590,10],[10,10],[10,890],[590,890],[590,910],[0,910],[0,900],[-10,900],[-10,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,900],[610,900],[610,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[624,329.999988],[576,329.999988],[576,569.999988],[624,569.999988]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[360,400],[360,500],[460,500],[460,400]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":920}},"stateroom--019--2x3":{"key":"stateroom--019--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[300,0],[300,152.2],[0,152.2],[0,0]]]},{"type":"Polygon","coordinates":[[[0,600],[120.4,600],[120.4,654.6],[499.1,654.6],[499.1,850.9000000000001],[120.4,850.9000000000001],[120.4,900],[0,900],[0,600]]]},{"type":"Polygon","coordinates":[[[98.1,170],[201.5,170],[201.5,260.4],[98.1,260.4],[98.1,170]]]},{"type":"Polygon","coordinates":[[[384.20947709999996,105.00264549999997],[479.38607929999995,9.826043300000038],[586.4420791,116.88204310000003],[491.26547689999995,212.05864530000008],[384.20947709999996,105.00264549999997]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[590,-10],[590,10],[10,10],[10,890],[590,890],[590,910],[0,910],[0,900],[-10,900],[-10,-10]]]}],"singles":[{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,900],[610,900],[610,-10]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[624,329.999988],[576,329.999988],[576,569.999988],[624,569.999988]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[250,400],[250,500],[350,500],[350,400]]]}}],"pngRect":{"x":-10,"y":-10,"width":633,"height":920}},"stateroom--020--2x3":{"key":"stateroom--020--2x3","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[0,0],[300,0],[300,118.7],[248.4,118.7],[248.4,494.5],[49.6,494.5],[49.6,118.7],[0,118.7],[0,0]]]},{"type":"Polygon","coordinates":[[[0,600],[150,600],[150,900],[0,900],[0,600]]]},{"type":"Polygon","coordinates":[[[167.9,699.5],[260.5,699.5],[260.5,803.3],[167.9,803.3],[167.9,699.5]]]},{"type":"Polygon","coordinates":[[[402.2,93.1],[532,45.8],[585.5,193],[575.6,196.6],[575.6,325],[585.5,328.6],[532,475.7],[402.2,428.5],[455.8,281.3],[490.8,294.1],[490.8,227.5],[455.8,240.2],[402.2,93.1]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[590,-10],[590,10],[10,10],[10,890],[590,890],[590,910],[0,910],[0,900],[-10,900],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[624,639.999994],[576,639.999994],[576,859.999994],[624,859.999994]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[590,-10],[590,900],[610,900],[610,-10]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[405.7,677.3],[405.7,777.3],[505.7,777.3],[505.7,677.3]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":920}},"stateroom--036--2x4":{"key":"stateroom--036--2x4","hull":[],"obstacles":[{"type":"Polygon","coordinates":[[[23.933027999999922,1070.1521070000001],[154.5400249999999,994.370794],[231.82692699999984,1127.572632],[101.21992999999986,1203.353945],[23.933027999999922,1070.1521070000001]]]},{"type":"Polygon","coordinates":[[[24.744736999999986,920.022105],[101.74779100000012,790.131603],[218.73526299999992,859.485347],[141.7322089999999,989.375849],[24.744736999999986,920.022105]]]},{"type":"Polygon","coordinates":[[[37,340],[300,340],[300,759],[37,759],[37,340]]]},{"type":"Polygon","coordinates":[[[241,10],[359,10],[359,156],[241,156],[241,10]]]},{"type":"Polygon","coordinates":[[[411,10],[548,10],[548,113],[411,113],[411,10]]]}],"walls":[{"type":"Polygon","coordinates":[[[-10,-10],[610,-10],[610,1210],[590,1210],[590,10],[10,10],[10,1210],[-10,1210],[-10,-10]]]}],"singles":[{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[340,276],[340,324],[560,324],[560,276]]]}},{"tags":["door"],"poly":{"type":"Polygon","coordinates":[[[330,1176],[330,1224],[560,1224],[560,1176]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,290],[0,310],[600,310],[600,290]]]}},{"tags":["wall"],"poly":{"type":"Polygon","coordinates":[[[0,1190],[0,1210],[600,1210],[600,1190]]]}},{"tags":["label","bedroom"],"poly":{"type":"Polygon","coordinates":[[[340,900],[340,1000],[440,1000],[440,900]]]}},{"tags":["label","bathroom"],"poly":{"type":"Polygon","coordinates":[[[142.8,114.8],[142.8,214.8],[242.8,214.8],[242.8,114.8]]]}}],"pngRect":{"x":-10,"y":-10,"width":620,"height":1220}},"weaponry--013--1x2":{"key":"weaponry--013--1x2","hull":[],"obstacles":[],"walls":[],"singles":[],"pngRect":{"x":25,"y":195,"width":852,"height":417}},"window--007--0x2.4":{"key":"window--007--0x2.4","hull":[],"obstacles":[],"walls":[],"singles":[],"pngRect":{"x":-4,"y":-4,"width":907,"height":67}}}');function Tt(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,o)}return e}function Bt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?Tt(Object(e),!0).forEach((function(n){(0,f.Z)(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):Tt(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function At(t){var n=t.def,e=t.transform,o=(0,H.useQuery)("layout-".concat(n.key),(function(){return function(t){return Ct.apply(this,arguments)}(n)})).data;return o?(0,G.BX)("g",{className:wt()("geomorph",n.key),transform:e,children:[(0,G.tZ)("image",{className:"geomorph",href:o.dataUrl,x:o.pngRect.x*Ut,y:o.pngRect.y*Ut}),(0,G.tZ)("g",{className:"doors",children:o.doors.map((function(t){return(0,G.tZ)("polygon",{points:"".concat(t.outline)})}))}),(0,G.tZ)(Gt,{gm:o}),(0,G.tZ)("image",{className:"debug",href:o.pngHref,x:o.pngRect.x,y:o.pngRect.y})]}):null}function Gt(t){var n=t.gm;return(0,G.tZ)("foreignObject",Bt(Bt({className:"labels"},n.pngRect),{},{xmlns:"http://www.w3.org/1999/xhtml",children:(0,G.tZ)("div",{onClick:function(t){var n=t.target;console.log("you clicked",n)},children:n.labels.map((function(t){var e=t.text,o=t.padded;return(0,G.tZ)("div",{className:"label",style:{left:o.x-n.pngRect.x,top:o.y-n.pngRect.y},children:e})}))})}))}function Ct(){return(Ct=(0,X.Z)(W().mark((function t(n){var e,o,r;return W().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=Ot(Nt),o=Zt(n,e),r=document.createElement("canvas"),t.next=5,zt(o,e,r,(function(t){return j(t)}),{scale:Ut,navTris:!1});case 5:return t.abrupt("return",{dataUrl:r.toDataURL(),pngRect:o.items[0].pngRect,doors:Mt(o.groups.singles,"door"),pngHref:o.items[0].pngHref,labels:o.labels});case 6:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var Ft,Ut=2,Lt=new g(0,0,1200,600),$t=new g(-5e3,-5e3,10001,10001),Jt=(0,l.iv)(It||(It=(0,a.Z)(["\n  height: 100%;\n  g > image.debug {\n    opacity: 0.2;\n  }\n  g > image.geomorph {\n    transform: scale(",");\n    pointer-events: none;\n  }\n  g > .doors polygon {\n    fill: white;\n    stroke: black;\n  }\n  g > .labels {\n    font: ",";\n    pointer-events: none;\n    div.label {\n      background: black;\n      color: white;\n      position: absolute;\n      padding: ","px ","px;\n      cursor: pointer;\n      pointer-events: auto;\n      user-select: none; /** TODO better way? */\n    }\n    circle {\n      fill: red;\n    }\n  }\n"])),1/Ut,Rt.font,Rt.padY,Rt.padX);var qt=(0,l.iv)(Ft||(Ft=(0,a.Z)(["\n  overflow-x: scroll;\n  overflow-y: scroll;\n  height: 100%;\n  img {\n    animation: fadein 2s;\n  }\n\n  @keyframes fadein {\n    from { opacity: 0; }\n    to   { opacity: 1; }\n  }\n"]))),_t={"panzoom/PanZoom.jsx":"import * as React from 'react';\nimport { css } from 'goober';\nimport { Vect } from '../geom';\nimport { getSvgPos, getSvgMid, canTouchDevice, projectSvgEvt } from '../service';\n\n/** @param {React.PropsWithChildren<Props>} props */\nexport default function PanZoom(props) {\n\n  const [state] = React.useState(() => {\n    const viewBox = props.initViewBox.clone();\n    const minZoom = props.minZoom || 0.5;\n    const maxZoom = props.maxZoom || 2;\n    return {\n      viewBox,\n      /** @type {null | Vect} */\n      panFrom: null,\n      zoom: props.initZoom || 1,\n      /** @type {import('../service').SvgPtr[]} */\n      ptrs: [],\n      /** @type {null | number} */\n      ptrDiff: null,\n      /**\n       * @param {DOMPoint} point \n       * @param {number} delta \n       */\n      zoomTo: (point, delta) => {\n        const zoom = Math.min(Math.max(state.zoom + delta, minZoom), maxZoom);\n        viewBox.x = (state.zoom / zoom) * (viewBox.x - point.x) + point.x;\n        viewBox.y = (state.zoom / zoom) * (viewBox.y - point.y) + point.y;\n        viewBox.width = (1 / zoom) * props.initViewBox.width;\n        viewBox.height = (1 / zoom) * props.initViewBox.height;\n        state.zoom = zoom;\n      },\n      /** @param {WheelEvent} e */\n      onWheel: e => {\n        e.preventDefault();\n        if ('ownerSVGElement' in (e.target || {})) {\n          const point = getSvgPos(projectSvgEvt(e));\n          state.zoomTo(point, -0.003 * e.deltaY);\n          state.root.setAttribute('viewBox', `${state.viewBox}`);\n        }\n      },\n      /** @param {PointerEvent} e */\n      onPointerDown: e => {\n        if ('ownerSVGElement' in (e.target ||{})) {\n          state.panFrom = (new Vect).copy(getSvgPos(projectSvgEvt(e)));\n          state.ptrs.push(projectSvgEvt(e));\n        }\n      },\n      /** @param {PointerEvent} e */\n      onPointerMove: e => {\n        state.ptrs = state.ptrs.map(x => x.pointerId === e.pointerId ? projectSvgEvt(e) : x);\n\n        if (state.ptrs.length === 2) {\n          const ptrDiff = Math.abs(state.ptrs[1].clientX - state.ptrs[0].clientX);\n          if (state.ptrDiff !== null) {\n            const point = getSvgMid(state.ptrs);\n            state.zoomTo(point, 0.02 * (ptrDiff - state.ptrDiff));\n            state.root.setAttribute('viewBox', `${state.viewBox}`);\n          }          \n          state.ptrDiff = ptrDiff;\n        } else if (state.panFrom) {\n          const mouse = getSvgPos(projectSvgEvt(e));\n          viewBox.delta(state.panFrom.x - mouse.x, state.panFrom.y - mouse.y);\n          state.root.setAttribute('viewBox', `${state.viewBox}`);\n        }\n      },\n      /** @param {PointerEvent} e */\n      onPointerUp: (e) => {\n        state.panFrom = null;\n        state.ptrs = state.ptrs.filter(alt => e.pointerId !== alt.pointerId);\n        if (state.ptrs.length < 2) {\n          state.ptrDiff = null;\n        }\n      },\n      /** @type {(el: null | SVGSVGElement) => void} */\n      rootRef: el => {\n        if (el) {\n          state.root = el;\n          el.addEventListener('wheel', state.onWheel, { passive: false });\n          el.addEventListener('pointerdown', state.onPointerDown, { passive: true });\n          el.addEventListener('pointermove', state.onPointerMove, { passive: true });\n          el.addEventListener('pointerup', state.onPointerUp, { passive: true });\n          el.addEventListener('pointercancel', state.onPointerUp, { passive: true });\n          el.addEventListener('pointerleave', state.onPointerUp, { passive: true });\n          el.addEventListener('touchstart', e => e.preventDefault(), { passive: false });\n        }\n      },\n      /** @type {SVGSVGElement} */\n      root: ({}),\n      rootCss: css`\n        width: 100%;\n        height: 100%;\n        touch-action: pan-x pan-y pinch-zoom;\n        > g.content {\n          shape-rendering: ${canTouchDevice ? 'optimizeSpeed' : 'auto'};\n        }\n        > .grid {\n          pointer-events: none;\n        }\n      `,\n    };\n  });\n\n  return (\n    <svg\n      ref={state.rootRef}\n      className={state.rootCss}\n      preserveAspectRatio=\"xMinYMin\"\n      viewBox={`${state.viewBox}`}\n    >\n      <g className=\"content\">\n        {props.children}\n      </g>\n      <Grid bounds={props.gridBounds} />\n    </svg>\n  );\n}\n\n/**\n * @typedef Props @type {object}\n * @property {Geom.Rect} gridBounds World bounds\n * @property {Geom.Rect} initViewBox Initial viewbox in world coords\n * @property {number} [minZoom] Minimum zoom factor (default 0.5)\n * @property {number} [maxZoom] Maximum zoom factor (default 2)\n * @property {number} [initZoom] Initial zoom factor (default 1)\n */\n\n/** @param {{ bounds: Geom.Rect }} props */\nfunction Grid(props) {\n  const uid = React.useMemo(() => gridPatternCount++, []);\n\n  return <>\n    {[10, 60].flatMap(dim => [\n      <defs>\n        <pattern\n          id={`pattern-grid-${dim}x${dim}--${uid}`}\n          width={dim}\n          height={dim}\n          patternUnits=\"userSpaceOnUse\"\n        >\n          <path\n            d={`M ${dim} 0 L 0 0 0 ${dim}`}\n            fill=\"none\"\n            stroke=\"rgba(0,0,0,0.5)\"\n            strokeWidth=\"0.3\"\n          />\n        </pattern>\n      </defs>,\n      <rect\n        className=\"grid\"\n        x={props.bounds.x}\n        y={props.bounds.y}\n        width={props.bounds.width}\n        height={props.bounds.height}\n        fill={`url(#pattern-grid-${dim}x${dim}--${uid})`}\n      />\n    ])}\n  </>;\n}\n\nlet gridPatternCount = 0;","panzoom/PanZoomDemo.jsx":"import * as React from 'react';\nimport { css } from 'goober';\nimport PanZoom from './PanZoom';\nimport { Rect } from '../geom';\n\nexport default function PanZoomDemo() {\n  return (\n    <div className={rootCss}>\n      <p>\n        drag to <strong>pan</strong>, scroll/pinch to <strong>zoom</strong>\n      </p>\n      <PanZoom initViewBox={initViewBox} gridBounds={gridBounds} maxZoom={5}>\n        <image\n          href=\"/geomorph/g-301--bridge.debug.png\"\n          x={pngRect.x * 2}\n          y={pngRect.y * 2}\n          style={{ transform: \"scale(0.5)\" }}\n        />\n        {/* <rect fill=\"red\" x={0} y={0} width={20} height={20} /> */}\n      </PanZoom>\n    </div>\n  );\n}\n\nconst pngRect = new Rect(-6, -22, 1212, 628);\nconst gridBounds = new Rect(-5000, -5000, 10000 + 1, 10000 + 1);\nconst initViewBox = pngRect.clone().outset(50);\n\nconst rootCss = css`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  > p {\n    padding: 12px 8px;\n    margin: 0;\n    font-family: monospace;\n    font-size: 16px;\n    background: var(--focus-bg);\n  }\n`;","nav/NavDemo.jsx":'import React, { useEffect, useState, useMemo, useRef } from "react";\nimport { css } from "goober";\nimport { useQuery } from "react-query";\n\nimport { Poly, Rect, Vect } from "../geom";\nimport { getSvgPos, geom, projectSvgEvt } from "../service";\nimport { Pathfinding } from \'../pathfinding/Pathfinding\';\nimport PanZoom from "../panzoom/PanZoom";\n\n/**\n * TODO find an interface permitting possibly many\n * navpaths, and enable/disable navnodes\n */\n\nexport default function NavDemo() {\n\n  const [dots, setDots] = useState(/** @type {Geom.VectJson[]} */ ([]));\n  const [path, setPath] = useState(/** @type {Geom.Vect[]} */ ([]));\n  const pathfinding = useMemo(() => new Pathfinding, []);\n  const zoneKey = \'myZone\';\n  const lastDownAt = useRef(0);\n\n  const { data } = useQuery(\'navpoly-demo\', async () => {\n    /** @type {Geomorph.GeomorphJson} */\n    const json = await fetch(\'/geomorph/g-301--bridge.json\').then(x => x.json());\n    const navPoly = json.navPoly.map(x => Poly.from(x));\n    const decomp = geom.polysToTriangulation(navPoly);\n    const zone = Pathfinding.createZone(decomp);\n    pathfinding.setZoneData(zoneKey, zone);\n    return { pngRect: json.pngRect, navPoly, zone };\n  });\n\n  useEffect(() => {\n    if (dots.length === 2) {\n      const groupId = pathfinding.getGroup(zoneKey, dots[0]);\n      if (groupId !== null) {\n        setPath(\n          [dots[0]].concat(pathfinding.findPath(dots[0], dots[1], zoneKey, groupId) || [])\n            .map(Vect.from)\n        );\n      }\n    } else {\n      setPath([]);\n    }\n  }, [dots]);\n\n  return (\n    <PanZoom gridBounds={gridBounds} initViewBox={initViewBox} maxZoom={6}>\n      <g\n        className={rootCss}\n        onPointerDown={_ => lastDownAt.current = Date.now()}\n        onPointerUp={e => {\n          if (Date.now() - lastDownAt.current < 200) {\n            const point = getSvgPos(projectSvgEvt(e));\n            setDots(dots.slice(0, 1).concat(point));\n          }\n        }}\n      >\n\n        {data && <>\n          <image\n            {...data.pngRect}\n            className="geomorph"\n            href="/geomorph/g-301--bridge.debug.png"\n          />\n\n          {data.navPoly.map(x => (\n            <path\n              className="navpoly"\n              d={x.svgPath}\n              // onPointerDown={_ => lastDownAt.current = Date.now()}\n              // onPointerUp={e => {\n              //   if (Date.now() - lastDownAt.current < 200) {\n              //     const point = Vect.from(getSvgPos(e));\n              //     setDots(dots.slice(0, 1).concat(point));\n              //   }\n              // }}\n            />\n          ))}\n\n          {data.zone.groups.map(nodes =>\n            nodes.map(({ centroid, vertexIds}) =>\n              // <circle fill="rgba(0, 0, 0, 0.2)" cx={centroid.x} cy={centroid.y} r={2.5} />\n              <polygon\n                className="navtri"\n                points={`${vertexIds.map(id => data.zone.vertices[id])}`}\n              />\n          ))}\n\n        </>}\n\n        <polyline className="navpath" points={`${path}`}/>\n\n        <g className="dots">\n          {dots.map((p, i) =>\n            <circle\n              key={i} cx={p.x} cy={p.y} r={8}\n              onClick={(e) => {\n                setDots(dots.filter((_, j) => i !== j));\n                e.stopPropagation();\n              }}\n            />\n          )}\n        </g>\n      </g>\n\n    </PanZoom>\n  );\n}\n\nconst gridBounds = new Rect(-5000, -5000, 10000 + 1, 10000 + 1);\nconst initViewBox = new Rect(0, 0, 1200, 600);\n\nconst rootCss = css`\n  border: 1px solid #555555;\n  height: inherit;\n\n  > path.navpoly {\n    fill: rgba(0, 0, 0, 0.01);\n    stroke-width: 2;\n  }\n\n  > g.dots circle {\n    fill: white;\n    stroke: black;\n    stroke-width: 2;\n    cursor: pointer;\n  }\n\n  > polyline.navpath {\n    fill: none;\n    stroke: #00f;\n    stroke-width: 4;\n    stroke-dasharray: 20 10;\n  }\n\n  polygon.navtri {\n    fill: rgba(0, 0, 0, 0);\n    &:hover {\n      fill: rgba(0, 0, 0, 0.2);\n    }\n  }\n`;',"example/jsx-to-js.jsx":"import * as React from 'react';\nimport PanZoomDemo from '../panzoom/PanZoomDemo';\n\nconst withJsx = <div title=\"message\">Welcome!</div>;\nconst withoutJsx = React.createElement(\n  'div',\n  { title: 'message' },\n  'Welcome!',\n);\n\nconst withJsxToo = <div><PanZoomDemo /></div>;\nconst withoutJsxToo = React.createElement(\n  'div',\n  null,\n  React.createElement(PanZoomDemo, null),\n);","geom/rect.js":"import { Vect } from './vect';\n\n/**\n * A two dimensional rectangle where `(x, y)` is viewed as top left.\n */\nexport class Rect {\n  /**\n   * @param {number} x \n   * @param {number} y \n   * @param {number} width \n   * @param {number} height \n   */\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    /** @type {number} */ this.x = x;\n    /** @type {number} */ this.y = y;\n    /** @type {number} */ this.width = width;\n    /** @type {number} */ this.height = height;\n  }\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  get bottom() {\n    return this.y + this.height;\n  }\n\n  get bottomLeft() {\n    return new Vect(this.x, this.y + this.height);\n  }\n\n  get bottomRight() {\n    return new Vect(this.x + this.width, this.y + this.height);\n  }\n\n  get center() {\n    return new Vect(this.cx, this.cy);\n  }\n\n  get cx() {\n    return this.x + 0.5 * this.width;\n  }\n\n  get cy() {\n    return this.y + 0.5 * this.height;\n  }\n\n  /** @returns {Geom.GeoJsonPolygon} */\n  get geoJson() {\n    return {\n      type: 'Polygon',\n      coordinates: [\n        [\n          [this.x, this.y],\n          [this.x + this.width, this.y],\n          [this.x + this.width, this.y + this.height],\n          [this.x, this.y + this.height]\n        ]\n      ]\n    };\n  }\n\n  /** @returns {Geom.RectJson} */\n  get json() {\n    return { \n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n    };\n  }\n\n  get key() {\n    return `${this.x},${this.y},${this.width},${this.height}`;\n  }\n\n  get dimension() {\n    return Math.max(this.width, this.height);\n  }\n\n  /**\n   * Anti-clockwise w.r.t y being downwards\n   * @returns {[Vect, Vect, Vect, Vect]}\n   */\n  get points() {\n    return [\n      new Vect(this.x, this.y),\n      new Vect(this.x, this.y + this.height),\n      new Vect(this.x + this.width, this.y + this.height),\n      new Vect(this.x + this.width, this.y),\n    ];\n  }\n\n  get right() {\n    return this.x + this.width;\n  }\n\n  get topLeft() {\n    return new Vect(this.x, this.y);\n  }\n\n  get topRight() {\n    return new Vect(this.x + this.width, this.y);\n  }\n\n  static get zero() {\n    return new Rect(0, 0, 0, 0);\n  }\n\n  /** @param {import('./mat').Mat} m */\n  applyMatrix(m) {\n    if (!m.isIdentity) {\n      const min = m.transformPoint(this.topLeft);\n      const max = m.transformPoint(this.bottomRight);\n      this.x = Math.min(min.x, max.x);\n      this.y = Math.min(min.y, max.y);\n      this.width = Math.max(min.x, max.x) - this.x;\n      this.height = Math.max(min.y, max.y) - this.y;\n    }\n    return this;\n  }\n\n  clone() {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  /** @param {Geom.VectJson} _ */\n  contains({ x, y }) {\n    return this.x <= x && x <= this.x + this.width && (this.y <= y && y <= this.y + this.height);\n  }\n\n  /** @param {Geom.RectJson} _ */\n  copy({ x, y, width, height }) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  /** @param {Rect} _ */\n  covers({ x, y, width, height }) {\n    return (\n      this.x <= x &&\n      x + width <= this.x + this.width &&\n      this.y <= y &&\n      y + height <= this.y + this.height\n    );\n  }\n\n  /**\n   * @param {number} dx \n   * @param {number} dy \n   */\n  delta(dx, dy) {\n    this.x += dx;\n    this.y += dy;\n    return this;\n  }\n\n  /** \n   * Returns `Rect2.zero` if no args.\n   * @param {Vect[] | Rect[]} items\n   */\n  static from(...items) {\n    if (!items.length) {\n      return Rect.zero;\n    } else if (items[0] instanceof Vect) {\n      const vectors = /** @type {Vect[]} */ (items);\n      const mx = Math.min(...vectors.map(({ x }) => x));\n      const my = Math.min(...vectors.map(({ y }) => y));\n      const Mx = Math.max(...vectors.map(({ x }) => x));\n      const My = Math.max(...vectors.map(({ y }) => y));\n      return new Rect(mx, my, Mx - mx, My - my);\n    } else {\n      const rects = /** @type {Rect[]} */ (items);\n      const mx = Math.min(...rects.map(({ x }) => x));\n      const my = Math.min(...rects.map(({ y }) => y));\n      const Mx = Math.max(...rects.map(({ x, width }) => x + width));\n      const My = Math.max(...rects.map(({ y, height }) => y + height));\n      return new Rect(mx, my, Mx - mx, My - my);\n    }\n  }\n\n  /** @param {Geom.RectJson} _ */\n  static fromJson({ x, y, width, height }) {\n    return new Rect(x, y, width, height);\n  }\n\n  /**\n   * Bounded version of `lambda x.this.outset(-x)`\n   * @param {number} nonNegAmount \n   */\n  inset(nonNegAmount) {\n    const [cx, cy] = [this.cx, this.cy];\n    this.outset(-nonNegAmount);\n    if (this.width < 0) {\n      this.x = cx;\n      this.width = 0;\n    }\n    if (this.height < 0) {\n      this.y = cy;\n      this.height = 0;\n    }\n    return this;\n  }\n\n  /**\n   * Does this filled rectangle intersect with {other} filled rectangle?\n   * @param {Rect} other\n   */\n  intersects(other) {\n    return (\n      Math.abs(this.cx - other.cx) * 2 <= this.width + other.width &&\n      Math.abs(this.cy - other.cy) * 2 <= this.height + other.height\n    );\n  }\n\n  /** @param {Geom.VectJson} _ */\n  offset({ x, y }) {\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  /**\n   * @param {number} nonNegDx \n   * @param {number} [nonNegDy]\n   */\n  outset(nonNegDx, nonNegDy = nonNegDx) {\n    this.x -= nonNegDx;\n    this.y -= nonNegDy;\n    this.width += 2 * nonNegDx;\n    this.height += 2 * nonNegDy;\n    return this;\n  }\n\n  /** @param {number} k */\n  scale(k) {\n    this.x *= k;\n    this.y *= k;\n    this.width *= k;\n    this.height *= k;\n    return this;\n  }\n\n  /** @param {Geom.VectJson} position */\n  setPosition(position) {\n    this.x = position.x;\n    this.y = position.y;\n    return this;\n  }\n\n  toString() {\n    return `${this.x},${this.y},${this.width},${this.height}`;\n  }\n\n}\n"},Xt={"panzoom/PanZoomDemo":function(){return(0,G.BX)("div",{className:_,children:[(0,G.BX)("p",{children:["drag to ",(0,G.tZ)("strong",{children:"pan"}),", scroll/pinch to ",(0,G.tZ)("strong",{children:"zoom"})]}),(0,G.tZ)(C,{initViewBox:q,gridBounds:J,maxZoom:5,children:(0,G.tZ)("image",{href:"/geomorph/g-301--bridge.debug.png",x:2*$.x,y:2*$.y,style:{transform:"scale(0.5)"}})})]})},"nav/NavDemo":function(){var t=(0,r.useState)([]),n=t[0],e=t[1],o=(0,r.useState)([]),i=o[0],s=o[1],a=(0,r.useMemo)((function(){return new pt}),[]),l="myZone",c=(0,r.useRef)(0),y=(0,H.useQuery)("navpoly-demo",(0,X.Z)(W().mark((function t(){var n,e,o,r;return W().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("/geomorph/g-301--bridge.json").then((function(t){return t.json()}));case 2:return n=t.sent,e=n.navPoly.map((function(t){return B.from(t)})),o=I.polysToTriangulation(e),r=pt.createZone(o),a.setZoneData(l,r),t.abrupt("return",{pngRect:n.pngRect,navPoly:e,zone:r});case 8:case"end":return t.stop()}}),t)})))).data;return(0,r.useEffect)((function(){if(2===n.length){var t=a.getGroup(l,n[0]);null!==t&&s([n[0]].concat(a.findPath(n[0],n[1],l,t)||[]).map(p.from))}else s([])}),[n]),(0,G.tZ)(C,{gridBounds:ft,initViewBox:mt,maxZoom:6,children:(0,G.BX)("g",{className:vt,onPointerDown:function(t){return c.current=Date.now()},onPointerUp:function(t){if(Date.now()-c.current<200){var o=Z(k(t));e(n.slice(0,1).concat(o))}},children:[y&&(0,G.BX)(G.HY,{children:[(0,G.tZ)("image",dt(dt({},y.pngRect),{},{className:"geomorph",href:"/geomorph/g-301--bridge.debug.png"})),y.navPoly.map((function(t){return(0,G.tZ)("path",{className:"navpoly",d:t.svgPath})})),y.zone.groups.map((function(t){return t.map((function(t){t.centroid;var n=t.vertexIds;return(0,G.tZ)("polygon",{className:"navtri",points:"".concat(n.map((function(t){return y.zone.vertices[t]})))})}))}))]}),(0,G.tZ)("polyline",{className:"navpath",points:"".concat(i)}),(0,G.tZ)("g",{className:"dots",children:n.map((function(t,o){return(0,G.tZ)("circle",{cx:t.x,cy:t.y,r:8,onClick:function(t){e(n.filter((function(t,n){return o!==n}))),t.stopPropagation()}},o)}))})]})})},"geomorph/GeomorphDemo":function(){return(0,G.tZ)("div",{className:Jt,children:(0,G.tZ)(C,{initViewBox:Lt,gridBounds:$t,maxZoom:6,children:(0,G.tZ)(At,{def:Et["g-101--multipurpose"]})})})},"images/Gm301Debug":function(){return(0,G.tZ)("div",{className:wt()("scrollable",qt),children:(0,G.tZ)("picture",{children:(0,G.tZ)("img",{draggable:!1,src:"/pics/g-301--bridge.debug.x1.png",alt:"Geomorph 301 (Debug)",width:1212,height:628})})})}};var Yt,Wt=e(59885),Ht=e(39944),Kt=e(6320),Qt=e(56127);function tn(t){var n=t.sessionKey,e=t.env,o=(0,Qt.Z)((function(t){var e=t.session;return n in e?e[n]:null}));return(0,Ht.x)((function(){return Qt.Z.api.persist(n)})),(0,r.useEffect)((function(){return Qt.Z.api.createSession(n,e),function(){return Qt.Z.api.removeSession(n)}}),[n]),(0,G.tZ)(en,{children:o?(0,G.tZ)(Wt.Od,{onMount:function(t){var n=new Kt.q5(t,o.key,o.ttyIo);n.initialise(),setTimeout((function(){return o.ttyShell.initialise(n)}))},options:on}):null})}var nn,en=(0,l.zo)("section")(Yt||(Yt=(0,a.Z)(["\n  grid-area: terminal;\n  background: black;\n  height: 100%;\n"]))),on={allowProposedApi:!0,fontSize:16,cursorBlink:!0,rendererType:"canvas",theme:{background:"black",foreground:"#41FF00"},convertEol:!1,scrollback:250,rows:50};function rn(t){var n=t.getConfig(),e=n.key,o=n.folds;switch(e){case"code":var i=t.getComponent();return i in _t?(0,G.tZ)("div",{style:{height:"100%",background:"#444"},children:(0,G.tZ)(Wt.pq,{height:"100%",lineNumbers:!0,readOnly:!0,code:_t[i],folds:o})}):(0,G.BX)(sn,{children:["Unknown code with filepath ",i]});case"component":var s=t.getComponent();if(s in Xt)return r.default.createElement(Xt[s]);case"terminal":var a=t.getConfig().session;return(0,G.tZ)(tn,{sessionKey:a,env:{test:{}}});default:return(0,G.BX)(sn,{children:["\u26a0\ufe0f Unknown ",(0,G.tZ)("em",{children:"TabNode"}),' with name "',e,'".']})}}function sn(t){var n=t.children;return(0,G.tZ)("div",{className:an,children:(0,G.tZ)("strong",{children:n})})}var an=(0,l.iv)(nn||(nn=(0,a.Z)(["\n  margin: 24px;\n  color: red;\n  font-size: 1.2rem;\n  font-family: monospace;\n"])));function ln(t){var n=r.default.useMemo((function(){return i.Model.fromJson({global:{tabEnableRename:!1},layout:{type:"row",weight:100,children:[{type:"tabset",weight:50,selected:0,children:t.tabs.map((function(t){return{type:"tab",id:"terminal"===t.key?"".concat(t.key,"--").concat(t.session):"".concat(t.key,"--").concat(t.filepath),name:"terminal"===t.key?"@".concat(t.session):(t.key,t.filepath),config:{key:t.key,folds:"folds"in t?t.folds:void 0,session:"session"in t?t.session:void 0},component:"terminal"===t.key?"terminal":t.filepath,enableClose:!1}}))}]}})}),[t.tabs]);return r.default.useEffect((function(){if(t.storeKey)return s.Z.getState().tabs[t.storeKey]={key:t.storeKey,selectTab:function(t){return n.doAction(i.Actions.selectTab(t))},scrollIntoView:function(){var n;return null===(n=t.rootRef.current)||void 0===n?void 0:n.scrollIntoView({behavior:"smooth",block:"center"})}},function(){delete s.Z.getState().tabs[t.storeKey||""]}}),[n]),(0,G.tZ)(i.Layout,{model:n,factory:rn})}}}]);