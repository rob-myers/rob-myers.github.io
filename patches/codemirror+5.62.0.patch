diff --git a/node_modules/codemirror/mode/javascript/javascript.js b/node_modules/codemirror/mode/javascript/javascript.js
index 95cbbd8..994c790 100644
--- a/node_modules/codemirror/mode/javascript/javascript.js
+++ b/node_modules/codemirror/mode/javascript/javascript.js
@@ -21,23 +21,24 @@ CodeMirror.defineMode("javascript", function(config, parserConfig) {
   var wordRE = parserConfig.wordCharacters || /[\w$\xa1-\uffff]/;
 
   // Tokenizer
-
   var keywords = function(){
     function kw(type) {return {type: type, style: "keyword"};}
+    function kw2(type) {return {type: type, style: "keyword keyword-2"};}
     var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c"), D = kw("keyword d");
+    var A2 = kw2("keyword a"), B2 = kw2("keyword b"), C2 = kw2("keyword c"), D2 = kw2("keyword d");
     var operator = kw("operator"), atom = {type: "atom", style: "atom"};
 
     return {
-      "if": kw("if"), "while": A, "with": A, "else": B, "do": B, "try": B, "finally": B,
-      "return": D, "break": D, "continue": D, "new": kw("new"), "delete": C, "void": C, "throw": C,
+      "if": kw2("if"), "while": A2, "with": A2, "else": B2, "do": B2, "try": B2, "finally": B2,
+      "return": D2, "break": D2, "continue": D2, "new": kw("new"), "delete": C, "void": C, "throw": C2,
       "debugger": kw("debugger"), "var": kw("var"), "const": kw("var"), "let": kw("var"),
-      "function": kw("function"), "catch": kw("catch"),
-      "for": kw("for"), "switch": kw("switch"), "case": kw("case"), "default": kw("default"),
+      "function": kw("function"), "catch": kw2("catch"),
+      "for": kw2("for"), "switch": kw2("switch"), "case": kw2("case"), "default": kw2("default"),
       "in": operator, "typeof": operator, "instanceof": operator,
       "true": atom, "false": atom, "null": atom, "undefined": atom, "NaN": atom, "Infinity": atom,
       "this": kw("this"), "class": kw("class"), "super": kw("atom"),
-      "yield": C, "export": kw("export"), "import": kw("import"), "extends": C,
-      "await": C
+      "yield": C2, "export": kw2("export"), "import": kw2("import"), "extends": C,
+      "await": C2
     };
   }();
 
@@ -523,7 +524,7 @@ CodeMirror.defineMode("javascript", function(config, parserConfig) {
     if (type == "async") {
       cx.marked = "property";
       return cont(objprop);
-    } else if (type == "variable" || cx.style == "keyword") {
+    } else if (type == "variable" || cx.style == "keyword" || cx.style.startsWith("keyword ")) {
       cx.marked = "property";
       if (value == "get" || value == "set") return cont(getterSetter);
       var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params
@@ -633,7 +634,7 @@ CodeMirror.defineMode("javascript", function(config, parserConfig) {
     return pass(typeprop, typeprops)
   }
   function typeprop(type, value) {
-    if (type == "variable" || cx.style == "keyword") {
+    if (type == "variable" || cx.style == "keyword" || cx.style.startsWith("keyword ")) {
       cx.marked = "property"
       return cont(typeprop)
     } else if (value == "?" || type == "number" || type == "string") {
@@ -782,7 +783,7 @@ CodeMirror.defineMode("javascript", function(config, parserConfig) {
       cx.marked = "keyword";
       return cont(classBody);
     }
-    if (type == "variable" || cx.style == "keyword") {
+    if (type == "variable" || cx.style == "keyword" || cx.style.startsWith("keyword ")) {
       cx.marked = "property";
       return cont(classfield, classBody);
     }
@@ -808,7 +809,7 @@ CodeMirror.defineMode("javascript", function(config, parserConfig) {
   }
   function afterExport(type, value) {
     if (value == "*") { cx.marked = "keyword"; return cont(maybeFrom, expect(";")); }
-    if (value == "default") { cx.marked = "keyword"; return cont(expression, expect(";")); }
+    if (value == "default") { cx.marked = "keyword keyword-2"; return cont(expression, expect(";")); }
     if (type == "{") return cont(commasep(exportField, "}"), maybeFrom, expect(";"));
     return pass(statement);
   }
@@ -835,7 +836,7 @@ CodeMirror.defineMode("javascript", function(config, parserConfig) {
     if (value == "as") { cx.marked = "keyword"; return cont(importSpec); }
   }
   function maybeFrom(_type, value) {
-    if (value == "from") { cx.marked = "keyword"; return cont(expression); }
+    if (value == "from") { cx.marked = "keyword keyword-2"; return cont(expression); }
   }
   function arrayLiteral(type) {
     if (type == "]") return cont();
