import { useEffect } from 'react';

import { Header, Section, Main } from 'components/page/Layout';
import Markdown from 'components/page/Markdown';
import { CodeEdit } from 'components/dynamic';
import Terminal from 'components/sh/Terminal';
import useCodeStore from 'store/code.store';

const env = {};

export default function IndexPage() {

  useEffect(() => {
    useCodeStore.api.rehydrate(['file.js']);
  }, []);

  return (
    <Main>
      <Header />
      <Section>
        <Markdown children={`

## Abstract

- Strongly influenced by Teleglitch
  - same level design, but sans 3d walls
  - same kind of procedural generation
  - same central mechanic i.e. explore/flee/attack
  - same objective i.e. escape military research base
  - _but_ the research is about near death experiences
  - _and_ the enemies are from Tibetan Mythology
  - _and_ movement & crafting UI may differ
- Played from mini-map perspective
- Implemented via preact and css-in-js using SVG
- Demonstrated step-by-step via onsite babel + hmr


## On Website Development

_TODO needs rewrite within new context i.e. developing a game_

In the beginning, Brendan Eich made LiveScript.
It was subsequently renamed _JavaScript_ (aka JS).
It is the only programming language natively understood by web browsers, and has two important siblings. HTML describes the hierarchy of elements on a webpage, whereas CSS specifies their look and feel. JS subsumes them both:

<!-- - e.g. via \`document.createElement\` and \`document.createElement('style')\`. -->
- e.g. via [JSX](https://en.wikipedia.org/wiki/JSX_(JavaScript)) (syntactic sugar), [tagged templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates) (ES2015) and runtime DOM diffing.
- e.g. via template languages compiling to JS.

Although browsing a website begins by downloading HTML, the latter is often generated by JS running on a server. Then browsing a website amounts to _running JavaScript_, initially remotely and subsequently on our own machine (the web browser interprets it). The resulting application depends on our input, various kinds of local storage and also API responses i.e. the backend infrastructure.

<!-- Since browsing amounts to running JavaScript, developing amounts to writing it. Developers also browse the site, built using JS autogenerated from their source code.
Additional JS is run on top, _repeatedly syncing the website with the autogenerated JS_.
The developer can then change the source code and see changes automatically, saving time and improving the development experience.
Ideally this process avoids a full page reload, and updates the changed components "in place".
We will implement such a system on this site. -->

_TODO make this into "real thing" with ace-editor and babel transpilation_
      `}/>

      <section style={{ height: 200 }}>
        <Terminal sessionKey="test" env={env} />
      </section>

      <Markdown children={`

---


- shell via xterm.js and mvdan-sh
- ace-editor with tabs
- webworker with forked @babel/standalone
- service worker
- systemjs modules
- preact.js + linaria
- react-query + zustand

      `}/>
      </Section>

      <section style={{ height: 300, width: '100%' }}>
        <CodeEdit codeKey="file.js"/>
      </section>

    </Main>
  );
}
