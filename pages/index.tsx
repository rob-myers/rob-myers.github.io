import { useEffect } from 'react';
import Head from 'next/head'
import styled from "@emotion/styled";

import Header from 'components/page/Header';
import Markdown from 'components/page/Markdown';
import { CodeEdit } from 'components/dynamic';
import Terminal from 'components/sh/Terminal';
import { Section } from 'components/page/Layout';
import useCodeStore from 'store/code.store';

export default function IndexPage() {

  useEffect(() => {
    useCodeStore.api.rehydrate(['file.js']);
  }, []);

  return (
    <>
      <Head>
        <title>Hot modules</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
        <div>
          <Header />
            <Section>
            <Markdown children={`
## Introduction

In the beginning, Brendan Eich made LiveScript.
It was subsequently renamed _JavaScript_.
It is the only programming language natively supported by all web browsers.

JavaScript has siblings i.e. HTML (the hierarchy of elements on a webpage) and CSS (their look and feel). It can subsume them both via [JSX](https://en.wikipedia.org/wiki/JSX_(JavaScript)) (syntactic sugar), [tagged templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates) (introduced in ES6), or template languages compiling to JavaScript. Even the initial HTML is often generated by JavaScript. Then browsing _Website X_ amounts to running _their_ JavaScript, first remotely and subsequently on our own machine. The result might be a single page application, connected to databases via intermediary remote servers.

When running JavaScript provided by others, we may run additional code e.g. advert blockers and password autofillers. The _development_ of websites follows a similar pattern. The developer browses the same site (often without live data), and runs additional code _synchronising the site with the source files_.

...

...sandboxed version of one reusable piece of UI. Regardless they run and interact with it just as a user would. A key difference is their changes will be available to all users, whereas a user can only effect they own experience....

But web developers also want to make edits without reloading (as much as possible). Understanding _exactly what that means_ is the subject of this website.

Against the norm we will explicitly download code via a shell...

- shell via xterm.js and mvdan-sh
- ace-editor with tabs
- webworker with forked @babel/standalone
- service worker
- systemjs modules
- preact.js + linaria
- react-query + zustand

`}/>
          </Section>

          <section style={{ height: 300, width: '100%' }}>
            <CodeEdit codeKey="file.js"/>
          </section>

          <section style={{ height: 300 }}>
            <Terminal sessionKey="test" env={env} />
          </section>

        </div>
      </Main>
    </>
  );
}

const env = {};

const Main = styled.main<{}>`
  display: flex;
  justify-content: center;
  padding-bottom: 2rem;
  > div {
    flex: 1;
    max-width: 1000px;
  }

  @media(max-width: 1248px) {
    > div {
      max-width: 800px;
    }
  }
  @media(max-width: 1024px) {
    margin: 0 3rem;
    justify-content: unset;
  }
  @media(max-width: 700px) {
    margin: 0;
  }
`;
